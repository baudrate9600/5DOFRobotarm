
RobotArm.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000074  00800100  00001366  000013fa  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001366  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000001a  00800174  00800174  0000146e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000146e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000014a0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001b8  00000000  00000000  000014e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000287d  00000000  00000000  00001698  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000fbd  00000000  00000000  00003f15  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000da0  00000000  00000000  00004ed2  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000004e8  00000000  00000000  00005c74  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000cb1  00000000  00000000  0000615c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000010c5  00000000  00000000  00006e0d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000180  00000000  00000000  00007ed2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
       4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      2c:	0c 94 93 05 	jmp	0xb26	; 0xb26 <__vector_11>
      30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      48:	0c 94 5d 00 	jmp	0xba	; 0xba <__vector_18>
      4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      50:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__vector_20>
      54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf ef       	ldi	r28, 0xFF	; 255
      6e:	d8 e0       	ldi	r29, 0x08	; 8
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
      74:	11 e0       	ldi	r17, 0x01	; 1
      76:	a0 e0       	ldi	r26, 0x00	; 0
      78:	b1 e0       	ldi	r27, 0x01	; 1
      7a:	e6 e6       	ldi	r30, 0x66	; 102
      7c:	f3 e1       	ldi	r31, 0x13	; 19
      7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
      80:	05 90       	lpm	r0, Z+
      82:	0d 92       	st	X+, r0
      84:	a4 37       	cpi	r26, 0x74	; 116
      86:	b1 07       	cpc	r27, r17
      88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
      8a:	21 e0       	ldi	r18, 0x01	; 1
      8c:	a4 e7       	ldi	r26, 0x74	; 116
      8e:	b1 e0       	ldi	r27, 0x01	; 1
      90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
      92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
      94:	ae 38       	cpi	r26, 0x8E	; 142
      96:	b2 07       	cpc	r27, r18
      98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
      9a:	0e 94 b5 00 	call	0x16a	; 0x16a <main>
      9e:	0c 94 b1 09 	jmp	0x1362	; 0x1362 <_exit>

000000a2 <__bad_interrupt>:
      a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <__vector_20>:
		SERVO_REGISTER &= ~dir_a;
		SERVO_REGISTER |= dir_b;
		speed *= -1;
	}
	*pwm = speed;
}
      a6:	1f 92       	push	r1
      a8:	0f 92       	push	r0
      aa:	0f b6       	in	r0, 0x3f	; 63
      ac:	0f 92       	push	r0
      ae:	11 24       	eor	r1, r1
      b0:	0f 90       	pop	r0
      b2:	0f be       	out	0x3f, r0	; 63
      b4:	0f 90       	pop	r0
      b6:	1f 90       	pop	r1
      b8:	18 95       	reti

000000ba <__vector_18>:
      ba:	1f 92       	push	r1
      bc:	0f 92       	push	r0
      be:	0f b6       	in	r0, 0x3f	; 63
      c0:	0f 92       	push	r0
      c2:	11 24       	eor	r1, r1
      c4:	2f 93       	push	r18
      c6:	3f 93       	push	r19
      c8:	8f 93       	push	r24
      ca:	9f 93       	push	r25
      cc:	ef 93       	push	r30
      ce:	ff 93       	push	r31
      d0:	10 92 88 01 	sts	0x0188, r1	; 0x800188 <motor_status+0x12>
      d4:	10 92 87 01 	sts	0x0187, r1	; 0x800187 <motor_status+0x11>
      d8:	90 91 c6 00 	lds	r25, 0x00C6	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
      dc:	80 91 89 01 	lds	r24, 0x0189	; 0x800189 <parse_state>
      e0:	81 30       	cpi	r24, 0x01	; 1
      e2:	61 f0       	breq	.+24     	; 0xfc <__vector_18+0x42>
      e4:	28 f0       	brcs	.+10     	; 0xf0 <__vector_18+0x36>
      e6:	82 30       	cpi	r24, 0x02	; 2
      e8:	a9 f0       	breq	.+42     	; 0x114 <__vector_18+0x5a>
      ea:	83 30       	cpi	r24, 0x03	; 3
      ec:	89 f1       	breq	.+98     	; 0x150 <__vector_18+0x96>
      ee:	32 c0       	rjmp	.+100    	; 0x154 <__vector_18+0x9a>
      f0:	9d 34       	cpi	r25, 0x4D	; 77
      f2:	81 f5       	brne	.+96     	; 0x154 <__vector_18+0x9a>
      f4:	81 e0       	ldi	r24, 0x01	; 1
      f6:	80 93 89 01 	sts	0x0189, r24	; 0x800189 <parse_state>
      fa:	2c c0       	rjmp	.+88     	; 0x154 <__vector_18+0x9a>
      fc:	80 ed       	ldi	r24, 0xD0	; 208
      fe:	89 0f       	add	r24, r25
     100:	80 93 76 01 	sts	0x0176, r24	; 0x800176 <motor_status>
     104:	82 e0       	ldi	r24, 0x02	; 2
     106:	80 93 89 01 	sts	0x0189, r24	; 0x800189 <parse_state>
     10a:	10 92 75 01 	sts	0x0175, r1	; 0x800175 <__data_end+0x1>
     10e:	10 92 74 01 	sts	0x0174, r1	; 0x800174 <__data_end>
     112:	20 c0       	rjmp	.+64     	; 0x154 <__vector_18+0x9a>
     114:	20 91 74 01 	lds	r18, 0x0174	; 0x800174 <__data_end>
     118:	30 91 75 01 	lds	r19, 0x0175	; 0x800175 <__data_end+0x1>
     11c:	f9 01       	movw	r30, r18
     11e:	ee 0f       	add	r30, r30
     120:	ff 1f       	adc	r31, r31
     122:	ea 58       	subi	r30, 0x8A	; 138
     124:	fe 4f       	sbci	r31, 0xFE	; 254
     126:	89 2f       	mov	r24, r25
     128:	90 e0       	ldi	r25, 0x00	; 0
     12a:	92 83       	std	Z+2, r25	; 0x02
     12c:	81 83       	std	Z+1, r24	; 0x01
     12e:	c9 01       	movw	r24, r18
     130:	01 96       	adiw	r24, 0x01	; 1
     132:	90 93 75 01 	sts	0x0175, r25	; 0x800175 <__data_end+0x1>
     136:	80 93 74 01 	sts	0x0174, r24	; 0x800174 <__data_end>
     13a:	08 97       	sbiw	r24, 0x08	; 8
     13c:	59 f4       	brne	.+22     	; 0x154 <__vector_18+0x9a>
     13e:	10 92 89 01 	sts	0x0189, r1	; 0x800189 <parse_state>
     142:	81 e0       	ldi	r24, 0x01	; 1
     144:	90 e0       	ldi	r25, 0x00	; 0
     146:	90 93 88 01 	sts	0x0188, r25	; 0x800188 <motor_status+0x12>
     14a:	80 93 87 01 	sts	0x0187, r24	; 0x800187 <motor_status+0x11>
     14e:	02 c0       	rjmp	.+4      	; 0x154 <__vector_18+0x9a>
     150:	10 92 89 01 	sts	0x0189, r1	; 0x800189 <parse_state>
     154:	ff 91       	pop	r31
     156:	ef 91       	pop	r30
     158:	9f 91       	pop	r25
     15a:	8f 91       	pop	r24
     15c:	3f 91       	pop	r19
     15e:	2f 91       	pop	r18
     160:	0f 90       	pop	r0
     162:	0f be       	out	0x3f, r0	; 63
     164:	0f 90       	pop	r0
     166:	1f 90       	pop	r1
     168:	18 95       	reti

0000016a <main>:

/*some comment*/
int main(void)
{
     16a:	cf 93       	push	r28
     16c:	df 93       	push	r29
     16e:	cd b7       	in	r28, 0x3d	; 61
     170:	de b7       	in	r29, 0x3e	; 62
     172:	c6 57       	subi	r28, 0x76	; 118
     174:	d1 09       	sbc	r29, r1
     176:	0f b6       	in	r0, 0x3f	; 63
     178:	f8 94       	cli
     17a:	de bf       	out	0x3e, r29	; 62
     17c:	0f be       	out	0x3f, r0	; 63
     17e:	cd bf       	out	0x3d, r28	; 61

	
	/* initialize component */ 
	sei();
     180:	78 94       	sei
	timer_enable();	
     182:	0e 94 67 05 	call	0xace	; 0xace <_Z12timer_enablev>
	usart_enable(9600);
     186:	80 e8       	ldi	r24, 0x80	; 128
     188:	95 e2       	ldi	r25, 0x25	; 37
     18a:	0e 94 b8 05 	call	0xb70	; 0xb70 <_Z12usart_enablej>
	/* Initialize motors */ 
	
    /* Replace with your application code */
	uint8_t tacho_values;
	uint8_t old_tacho_values;
	DDRD &= ~SERVO_TACHO_0_M;
     18e:	55 98       	cbi	0x0a, 5	; 10
	DDRD &= ~SERVO_TACHO_0_P; 
     190:	52 98       	cbi	0x0a, 2	; 10

	/* Initialize servo motors */
	DDRD |= SERVO_0_EN | SERVO_0_DIR_A | SERVO_0_DIR_B;
     192:	8a b1       	in	r24, 0x0a	; 10
     194:	88 6c       	ori	r24, 0xC8	; 200
     196:	8a b9       	out	0x0a, r24	; 10
	TCCR2A |= (1 << COM2B1 ) | (1 << WGM21) | (1 << WGM20); /*Fast PWM */
     198:	e0 eb       	ldi	r30, 0xB0	; 176
     19a:	f0 e0       	ldi	r31, 0x00	; 0
     19c:	80 81       	ld	r24, Z
     19e:	83 62       	ori	r24, 0x23	; 35
     1a0:	80 83       	st	Z, r24
	TCCR2B |= (1 << CS20); /*No prescaling */
     1a2:	e1 eb       	ldi	r30, 0xB1	; 177
     1a4:	f0 e0       	ldi	r31, 0x00	; 0
     1a6:	80 81       	ld	r24, Z
     1a8:	81 60       	ori	r24, 0x01	; 1
     1aa:	80 83       	st	Z, r24
	/* PID */
		
	DDRB |= M0_DIR | M0_STEP | M1_STEP | M1_DIR;
     1ac:	84 b1       	in	r24, 0x04	; 4
     1ae:	8f 60       	ori	r24, 0x0F	; 15
     1b0:	84 b9       	out	0x04, r24	; 4
	StepperMotor stepper0(0,0.043182,M0_DIR,M0_STEP);
     1b2:	ee 24       	eor	r14, r14
     1b4:	e3 94       	inc	r14
     1b6:	02 e0       	ldi	r16, 0x02	; 2
     1b8:	2c e9       	ldi	r18, 0x9C	; 156
     1ba:	3f ed       	ldi	r19, 0xDF	; 223
     1bc:	40 e3       	ldi	r20, 0x30	; 48
     1be:	5d e3       	ldi	r21, 0x3D	; 61
     1c0:	60 e0       	ldi	r22, 0x00	; 0
     1c2:	70 e0       	ldi	r23, 0x00	; 0
     1c4:	ce 01       	movw	r24, r28
     1c6:	01 96       	adiw	r24, 0x01	; 1
     1c8:	0e 94 80 02 	call	0x500	; 0x500 <_ZN12StepperMotorC1Eifhh>
	StepperMotor stepper1(0,0.2571426, M1_DIR,M1_STEP); 
     1cc:	68 94       	set
     1ce:	ee 24       	eor	r14, r14
     1d0:	e2 f8       	bld	r14, 2
     1d2:	08 e0       	ldi	r16, 0x08	; 8
     1d4:	22 e3       	ldi	r18, 0x32	; 50
     1d6:	38 ea       	ldi	r19, 0xA8	; 168
     1d8:	43 e8       	ldi	r20, 0x83	; 131
     1da:	5e e3       	ldi	r21, 0x3E	; 62
     1dc:	60 e0       	ldi	r22, 0x00	; 0
     1de:	70 e0       	ldi	r23, 0x00	; 0
     1e0:	ce 01       	movw	r24, r28
     1e2:	89 96       	adiw	r24, 0x29	; 41
     1e4:	0e 94 80 02 	call	0x500	; 0x500 <_ZN12StepperMotorC1Eifhh>
	ServoMotor  servo0(&SERVO0_PWM,&SERVO_REGISTER,SERVO_0_DIR_A,SERVO_0_DIR_B);
     1e8:	00 e8       	ldi	r16, 0x80	; 128
     1ea:	20 e4       	ldi	r18, 0x40	; 64
     1ec:	4b e2       	ldi	r20, 0x2B	; 43
     1ee:	50 e0       	ldi	r21, 0x00	; 0
     1f0:	64 eb       	ldi	r22, 0xB4	; 180
     1f2:	70 e0       	ldi	r23, 0x00	; 0
     1f4:	ce 01       	movw	r24, r28
     1f6:	8f 5a       	subi	r24, 0xAF	; 175
     1f8:	9f 4f       	sbci	r25, 0xFF	; 255
     1fa:	0e 94 c2 01 	call	0x384	; 0x384 <_ZN10ServoMotorC1EPVhS1_hh>
	servo0.target_pos = 0;
     1fe:	6c 96       	adiw	r28, 0x1c	; 28
     200:	1f ae       	std	Y+63, r1	; 0x3f
     202:	1e ae       	std	Y+62, r1	; 0x3e
     204:	6c 97       	sbiw	r28, 0x1c	; 28
	servo0.set_pid(10,0,0);
     206:	20 e0       	ldi	r18, 0x00	; 0
     208:	30 e0       	ldi	r19, 0x00	; 0
     20a:	40 e0       	ldi	r20, 0x00	; 0
     20c:	50 e0       	ldi	r21, 0x00	; 0
     20e:	6a e0       	ldi	r22, 0x0A	; 10
     210:	70 e0       	ldi	r23, 0x00	; 0
     212:	ce 01       	movw	r24, r28
     214:	8f 5a       	subi	r24, 0xAF	; 175
     216:	9f 4f       	sbci	r25, 0xFF	; 255
     218:	0e 94 d7 01 	call	0x3ae	; 0x3ae <_ZN10ServoMotor7set_pidEjjj>
	while (1) 
    {
		
		/*character FSM */ 
		char buff[50]; 
		if(motor_status.done == 1){
     21c:	06 e7       	ldi	r16, 0x76	; 118
     21e:	11 e0       	ldi	r17, 0x01	; 1
	//		sprintf(buff,"Motor %d, angle =  %d\n",motor_status.motor_select,motor_status.angle);
	//		usart_send(buff);
			motor_status.done = 0; 
			uint16_t duration = (motor_status.data[0]-48)*10 + (motor_status.data[1]-48);
			uint16_t acceleration = (motor_status.data[2]-48)*10 + (motor_status.data[3]-48);
			int16_t angle = (motor_status.data[5]-48)*100 + (motor_status.data[6]-48)*10 + (motor_status.data[7]-48);
     220:	0f 2e       	mov	r0, r31
     222:	f4 e6       	ldi	r31, 0x64	; 100
     224:	ff 2e       	mov	r15, r31
     226:	f0 2d       	mov	r31, r0
					break;
				case 1 :
					stepper0.target_pos = angle; 
					stepper0.duration = duration;
					stepper0.acceleration = acceleration;
					stepper0.start = 1; 
     228:	ee 24       	eor	r14, r14
     22a:	e3 94       	inc	r14
	while (1) 
    {
		
		/*character FSM */ 
		char buff[50]; 
		if(motor_status.done == 1){
     22c:	d8 01       	movw	r26, r16
     22e:	51 96       	adiw	r26, 0x11	; 17
     230:	8d 91       	ld	r24, X+
     232:	9c 91       	ld	r25, X
     234:	52 97       	sbiw	r26, 0x12	; 18
     236:	01 97       	sbiw	r24, 0x01	; 1
     238:	09 f0       	breq	.+2      	; 0x23c <main+0xd2>
     23a:	7e c0       	rjmp	.+252    	; 0x338 <main+0x1ce>
	//		sprintf(buff,"Motor %d, angle =  %d\n",motor_status.motor_select,motor_status.angle);
	//		usart_send(buff);
			motor_status.done = 0; 
     23c:	52 96       	adiw	r26, 0x12	; 18
     23e:	1c 92       	st	X, r1
     240:	1e 92       	st	-X, r1
     242:	51 97       	sbiw	r26, 0x11	; 17
			uint16_t duration = (motor_status.data[0]-48)*10 + (motor_status.data[1]-48);
     244:	11 96       	adiw	r26, 0x01	; 1
     246:	8d 91       	ld	r24, X+
     248:	9c 91       	ld	r25, X
     24a:	12 97       	sbiw	r26, 0x02	; 2
     24c:	c0 97       	sbiw	r24, 0x30	; 48
     24e:	ac 01       	movw	r20, r24
     250:	44 0f       	add	r20, r20
     252:	55 1f       	adc	r21, r21
     254:	88 0f       	add	r24, r24
     256:	99 1f       	adc	r25, r25
     258:	88 0f       	add	r24, r24
     25a:	99 1f       	adc	r25, r25
     25c:	88 0f       	add	r24, r24
     25e:	99 1f       	adc	r25, r25
     260:	84 0f       	add	r24, r20
     262:	95 1f       	adc	r25, r21
     264:	13 96       	adiw	r26, 0x03	; 3
     266:	4d 91       	ld	r20, X+
     268:	5c 91       	ld	r21, X
     26a:	14 97       	sbiw	r26, 0x04	; 4
     26c:	40 53       	subi	r20, 0x30	; 48
     26e:	51 09       	sbc	r21, r1
     270:	48 0f       	add	r20, r24
     272:	59 1f       	adc	r21, r25
			uint16_t acceleration = (motor_status.data[2]-48)*10 + (motor_status.data[3]-48);
     274:	15 96       	adiw	r26, 0x05	; 5
     276:	8d 91       	ld	r24, X+
     278:	9c 91       	ld	r25, X
     27a:	16 97       	sbiw	r26, 0x06	; 6
     27c:	c0 97       	sbiw	r24, 0x30	; 48
     27e:	9c 01       	movw	r18, r24
     280:	22 0f       	add	r18, r18
     282:	33 1f       	adc	r19, r19
     284:	88 0f       	add	r24, r24
     286:	99 1f       	adc	r25, r25
     288:	88 0f       	add	r24, r24
     28a:	99 1f       	adc	r25, r25
     28c:	88 0f       	add	r24, r24
     28e:	99 1f       	adc	r25, r25
     290:	82 0f       	add	r24, r18
     292:	93 1f       	adc	r25, r19
     294:	17 96       	adiw	r26, 0x07	; 7
     296:	6d 91       	ld	r22, X+
     298:	7c 91       	ld	r23, X
     29a:	18 97       	sbiw	r26, 0x08	; 8
     29c:	60 53       	subi	r22, 0x30	; 48
     29e:	71 09       	sbc	r23, r1
     2a0:	68 0f       	add	r22, r24
     2a2:	79 1f       	adc	r23, r25
			int16_t angle = (motor_status.data[5]-48)*100 + (motor_status.data[6]-48)*10 + (motor_status.data[7]-48);
     2a4:	1b 96       	adiw	r26, 0x0b	; 11
     2a6:	8d 91       	ld	r24, X+
     2a8:	9c 91       	ld	r25, X
     2aa:	1c 97       	sbiw	r26, 0x0c	; 12
     2ac:	c0 97       	sbiw	r24, 0x30	; 48
     2ae:	f8 9e       	mul	r15, r24
     2b0:	f0 01       	movw	r30, r0
     2b2:	f9 9e       	mul	r15, r25
     2b4:	f0 0d       	add	r31, r0
     2b6:	11 24       	eor	r1, r1
     2b8:	1d 96       	adiw	r26, 0x0d	; 13
     2ba:	2d 91       	ld	r18, X+
     2bc:	3c 91       	ld	r19, X
     2be:	1e 97       	sbiw	r26, 0x0e	; 14
     2c0:	c9 01       	movw	r24, r18
     2c2:	c0 97       	sbiw	r24, 0x30	; 48
     2c4:	dc 01       	movw	r26, r24
     2c6:	aa 0f       	add	r26, r26
     2c8:	bb 1f       	adc	r27, r27
     2ca:	9c 01       	movw	r18, r24
     2cc:	22 0f       	add	r18, r18
     2ce:	33 1f       	adc	r19, r19
     2d0:	22 0f       	add	r18, r18
     2d2:	33 1f       	adc	r19, r19
     2d4:	22 0f       	add	r18, r18
     2d6:	33 1f       	adc	r19, r19
     2d8:	cd 01       	movw	r24, r26
     2da:	82 0f       	add	r24, r18
     2dc:	93 1f       	adc	r25, r19
     2de:	8e 0f       	add	r24, r30
     2e0:	9f 1f       	adc	r25, r31
     2e2:	f8 01       	movw	r30, r16
     2e4:	27 85       	ldd	r18, Z+15	; 0x0f
     2e6:	30 89       	ldd	r19, Z+16	; 0x10
     2e8:	20 53       	subi	r18, 0x30	; 48
     2ea:	31 09       	sbc	r19, r1
     2ec:	82 0f       	add	r24, r18
     2ee:	93 1f       	adc	r25, r19

			if(motor_status.data[4] == '-'){
     2f0:	21 85       	ldd	r18, Z+9	; 0x09
     2f2:	32 85       	ldd	r19, Z+10	; 0x0a
     2f4:	2d 32       	cpi	r18, 0x2D	; 45
     2f6:	31 05       	cpc	r19, r1
     2f8:	19 f4       	brne	.+6      	; 0x300 <main+0x196>
				angle = angle * -1;
     2fa:	91 95       	neg	r25
     2fc:	81 95       	neg	r24
     2fe:	91 09       	sbc	r25, r1
			}
			switch(motor_status.motor_select){
     300:	d8 01       	movw	r26, r16
     302:	2c 91       	ld	r18, X
     304:	21 30       	cpi	r18, 0x01	; 1
     306:	49 f0       	breq	.+18     	; 0x31a <main+0x1b0>
     308:	18 f0       	brcs	.+6      	; 0x310 <main+0x1a6>
     30a:	22 30       	cpi	r18, 0x02	; 2
     30c:	71 f0       	breq	.+28     	; 0x32a <main+0x1c0>
     30e:	14 c0       	rjmp	.+40     	; 0x338 <main+0x1ce>
				case 0 : 
					//usart_send("hello");
					servo0.target_pos = angle; 
     310:	6c 96       	adiw	r28, 0x1c	; 28
     312:	9f af       	std	Y+63, r25	; 0x3f
     314:	8e af       	std	Y+62, r24	; 0x3e
     316:	6c 97       	sbiw	r28, 0x1c	; 28
					break;
     318:	0f c0       	rjmp	.+30     	; 0x338 <main+0x1ce>
				case 1 :
					stepper0.target_pos = angle; 
     31a:	9d 83       	std	Y+5, r25	; 0x05
     31c:	8c 83       	std	Y+4, r24	; 0x04
					stepper0.duration = duration;
     31e:	5f 87       	std	Y+15, r21	; 0x0f
     320:	4e 87       	std	Y+14, r20	; 0x0e
					stepper0.acceleration = acceleration;
     322:	7d 87       	std	Y+13, r23	; 0x0d
     324:	6c 87       	std	Y+12, r22	; 0x0c
					stepper0.start = 1; 
     326:	e9 82       	std	Y+1, r14	; 0x01
					break; 
     328:	07 c0       	rjmp	.+14     	; 0x338 <main+0x1ce>
				case 2 : 
					stepper1.target_pos = angle; 
     32a:	9d a7       	std	Y+45, r25	; 0x2d
     32c:	8c a7       	std	Y+44, r24	; 0x2c
					stepper1.duration = duration;
     32e:	5f ab       	std	Y+55, r21	; 0x37
     330:	4e ab       	std	Y+54, r20	; 0x36
					stepper1.acceleration = acceleration;
     332:	7d ab       	std	Y+53, r23	; 0x35
     334:	6c ab       	std	Y+52, r22	; 0x34
					stepper1.start = 1;
     336:	e9 a6       	std	Y+41, r14	; 0x29
			}
		}

			//usart_sendln(temp);	
		
		stepper0.rotate(timer_10k());
     338:	0e 94 8a 05 	call	0xb14	; 0xb14 <_Z9timer_10kv>
     33c:	ab 01       	movw	r20, r22
     33e:	bc 01       	movw	r22, r24
     340:	ce 01       	movw	r24, r28
     342:	01 96       	adiw	r24, 0x01	; 1
     344:	0e 94 90 03 	call	0x720	; 0x720 <_ZN12StepperMotor6rotateEm>
		stepper1.rotate(timer_10k());
     348:	0e 94 8a 05 	call	0xb14	; 0xb14 <_Z9timer_10kv>
     34c:	ab 01       	movw	r20, r22
     34e:	bc 01       	movw	r22, r24
     350:	ce 01       	movw	r24, r28
     352:	89 96       	adiw	r24, 0x29	; 41
     354:	0e 94 90 03 	call	0x720	; 0x720 <_ZN12StepperMotor6rotateEm>
		servo0.rotate(timer_10k());
     358:	0e 94 8a 05 	call	0xb14	; 0xb14 <_Z9timer_10kv>
     35c:	ab 01       	movw	r20, r22
     35e:	bc 01       	movw	r22, r24
     360:	ce 01       	movw	r24, r28
     362:	8f 5a       	subi	r24, 0xAF	; 175
     364:	9f 4f       	sbci	r25, 0xFF	; 255
     366:	0e 94 18 02 	call	0x430	; 0x430 <_ZN10ServoMotor6rotateEm>
	
		tacho_values= PIND; 
     36a:	89 b1       	in	r24, 0x09	; 9
		servo0.tacho(PIND & SERVO_TACHO_0_P, PIND & SERVO_TACHO_0_M);
     36c:	49 b1       	in	r20, 0x09	; 9
     36e:	69 b1       	in	r22, 0x09	; 9
     370:	40 72       	andi	r20, 0x20	; 32
     372:	64 70       	andi	r22, 0x04	; 4
     374:	ce 01       	movw	r24, r28
     376:	8f 5a       	subi	r24, 0xAF	; 175
     378:	9f 4f       	sbci	r25, 0xFF	; 255
     37a:	0e 94 66 02 	call	0x4cc	; 0x4cc <_ZN10ServoMotor5tachoEhh>
		/*Check if any bits have toggled */
		if(tacho_values ^ old_tacho_values){
			old_tacho_values = tacho_values;
			
		}
		if(timer_10k()-temp > 100){
     37e:	0e 94 8a 05 	call	0xb14	; 0xb14 <_Z9timer_10kv>
	StepperMotor stepper1(0,0.2571426, M1_DIR,M1_STEP); 
	ServoMotor  servo0(&SERVO0_PWM,&SERVO_REGISTER,SERVO_0_DIR_A,SERVO_0_DIR_B);
	servo0.target_pos = 0;
	servo0.set_pid(10,0,0);
	uint32_t temp = 0 ;
	while (1) 
     382:	54 cf       	rjmp	.-344    	; 0x22c <main+0xc2>

00000384 <_ZN10ServoMotorC1EPVhS1_hh>:
#include "Usart.h"
#include <avr/io.h>	
// default constructor
#define MAX_INT 100
#define MAX_SUMMATION 100
ServoMotor::ServoMotor(volatile uint8_t * pwm,volatile uint8_t * servo_register ,uint8_t dir_a,uint8_t dir_b)
     384:	0f 93       	push	r16
     386:	fc 01       	movw	r30, r24
{
	this->tacho_state = 0;
     388:	13 a2       	std	Z+35, r1	; 0x23
	this->target_pos = 0; 
     38a:	12 86       	std	Z+10, r1	; 0x0a
     38c:	11 86       	std	Z+9, r1	; 0x09
	this->integral_term = 0; 
     38e:	11 8a       	std	Z+17, r1	; 0x11
     390:	12 8a       	std	Z+18, r1	; 0x12
     392:	13 8a       	std	Z+19, r1	; 0x13
     394:	14 8a       	std	Z+20, r1	; 0x14
	this->old_error = 0; 
     396:	17 8a       	std	Z+23, r1	; 0x17
     398:	10 8e       	std	Z+24, r1	; 0x18
     39a:	11 8e       	std	Z+25, r1	; 0x19
     39c:	12 8e       	std	Z+26, r1	; 0x1a
	this->dir_a = dir_a;
     39e:	24 a3       	std	Z+36, r18	; 0x24
	this->dir_b = dir_b;
     3a0:	05 a3       	std	Z+37, r16	; 0x25
	this->servo_register = servo_register;
     3a2:	50 a3       	std	Z+32, r21	; 0x20
     3a4:	47 8f       	std	Z+31, r20	; 0x1f
	this->servo_pwm = pwm; 
     3a6:	72 a3       	std	Z+34, r23	; 0x22
     3a8:	61 a3       	std	Z+33, r22	; 0x21
	

} //ServoMotor
     3aa:	0f 91       	pop	r16
     3ac:	08 95       	ret

000003ae <_ZN10ServoMotor7set_pidEjjj>:
void ServoMotor::set_pid(uint16_t P, uint16_t I, uint16_t D){
     3ae:	cf 93       	push	r28
     3b0:	df 93       	push	r29
     3b2:	fc 01       	movw	r30, r24
     3b4:	ea 01       	movw	r28, r20
	P_factor = P;
     3b6:	71 83       	std	Z+1, r23	; 0x01
     3b8:	60 83       	st	Z, r22
	I_factor = I; 
     3ba:	53 83       	std	Z+3, r21	; 0x03
     3bc:	42 83       	std	Z+2, r20	; 0x02
	D_factor = D; 
     3be:	35 83       	std	Z+5, r19	; 0x05
     3c0:	24 83       	std	Z+4, r18	; 0x04
	
	max_error = MAX_INT / (P_factor + 1);
     3c2:	6f 5f       	subi	r22, 0xFF	; 255
     3c4:	7f 4f       	sbci	r23, 0xFF	; 255
     3c6:	24 e6       	ldi	r18, 0x64	; 100
     3c8:	30 e0       	ldi	r19, 0x00	; 0
     3ca:	c9 01       	movw	r24, r18
     3cc:	0e 94 f6 08 	call	0x11ec	; 0x11ec <__udivmodhi4>
     3d0:	60 87       	std	Z+8, r22	; 0x08
	max_summation = MAX_SUMMATION /(I_factor +1); 
     3d2:	be 01       	movw	r22, r28
     3d4:	6f 5f       	subi	r22, 0xFF	; 255
     3d6:	7f 4f       	sbci	r23, 0xFF	; 255
     3d8:	c9 01       	movw	r24, r18
     3da:	0e 94 f6 08 	call	0x11ec	; 0x11ec <__udivmodhi4>
     3de:	77 83       	std	Z+7, r23	; 0x07
     3e0:	66 83       	std	Z+6, r22	; 0x06
}
     3e2:	df 91       	pop	r29
     3e4:	cf 91       	pop	r28
     3e6:	08 95       	ret

000003e8 <_ZN10ServoMotor3pidEv>:

/* this function is called at fixed intervals and computes the 
 * output of the transfer function */
int16_t ServoMotor::pid(){
     3e8:	fc 01       	movw	r30, r24
	error = (target_pos -absolute_position);
     3ea:	21 85       	ldd	r18, Z+9	; 0x09
     3ec:	32 85       	ldd	r19, Z+10	; 0x0a
     3ee:	83 85       	ldd	r24, Z+11	; 0x0b
     3f0:	94 85       	ldd	r25, Z+12	; 0x0c
     3f2:	28 1b       	sub	r18, r24
     3f4:	39 0b       	sbc	r19, r25
     3f6:	36 8b       	std	Z+22, r19	; 0x16
     3f8:	25 8b       	std	Z+21, r18	; 0x15
	uint16_t pterm;
	if(error > max_error){
     3fa:	40 85       	ldd	r20, Z+8	; 0x08
     3fc:	50 e0       	ldi	r21, 0x00	; 0
     3fe:	42 17       	cp	r20, r18
     400:	53 07       	cpc	r21, r19
     402:	84 f0       	brlt	.+32     	; 0x424 <__LOCK_REGION_LENGTH__+0x24>
		pterm = MAX_INT;
	}else if(error < -max_error){
     404:	51 95       	neg	r21
     406:	41 95       	neg	r20
     408:	51 09       	sbc	r21, r1
     40a:	24 17       	cp	r18, r20
     40c:	35 07       	cpc	r19, r21
     40e:	6c f0       	brlt	.+26     	; 0x42a <__LOCK_REGION_LENGTH__+0x2a>
		pterm = -MAX_INT;	
	}else{
		pterm = P_factor * error;		
     410:	40 81       	ld	r20, Z
     412:	51 81       	ldd	r21, Z+1	; 0x01
     414:	24 9f       	mul	r18, r20
     416:	c0 01       	movw	r24, r0
     418:	25 9f       	mul	r18, r21
     41a:	90 0d       	add	r25, r0
     41c:	34 9f       	mul	r19, r20
     41e:	90 0d       	add	r25, r0
     420:	11 24       	eor	r1, r1
     422:	08 95       	ret
 * output of the transfer function */
int16_t ServoMotor::pid(){
	error = (target_pos -absolute_position);
	uint16_t pterm;
	if(error > max_error){
		pterm = MAX_INT;
     424:	84 e6       	ldi	r24, 0x64	; 100
     426:	90 e0       	ldi	r25, 0x00	; 0
     428:	08 95       	ret
	}else if(error < -max_error){
		pterm = -MAX_INT;	
     42a:	8c e9       	ldi	r24, 0x9C	; 156
     42c:	9f ef       	ldi	r25, 0xFF	; 255
	}else{
		pterm = P_factor * error;		
	}
	return pterm;
}
     42e:	08 95       	ret

00000430 <_ZN10ServoMotor6rotateEm>:

void ServoMotor::rotate(uint32_t current_time){
     430:	cf 92       	push	r12
     432:	df 92       	push	r13
     434:	ef 92       	push	r14
     436:	ff 92       	push	r15
     438:	0f 93       	push	r16
     43a:	1f 93       	push	r17
     43c:	cf 93       	push	r28
     43e:	df 93       	push	r29
	int16_t output;
	/*Update the PID at a frequency of 1khz */
	if(current_time - old_time > 10){
     440:	fc 01       	movw	r30, r24
     442:	03 8d       	ldd	r16, Z+27	; 0x1b
     444:	14 8d       	ldd	r17, Z+28	; 0x1c
     446:	25 8d       	ldd	r18, Z+29	; 0x1d
     448:	36 8d       	ldd	r19, Z+30	; 0x1e
     44a:	6a 01       	movw	r12, r20
     44c:	7b 01       	movw	r14, r22
     44e:	c0 1a       	sub	r12, r16
     450:	d1 0a       	sbc	r13, r17
     452:	e2 0a       	sbc	r14, r18
     454:	f3 0a       	sbc	r15, r19
     456:	97 01       	movw	r18, r14
     458:	86 01       	movw	r16, r12
     45a:	0b 30       	cpi	r16, 0x0B	; 11
     45c:	11 05       	cpc	r17, r1
     45e:	21 05       	cpc	r18, r1
     460:	31 05       	cpc	r19, r1
     462:	58 f1       	brcs	.+86     	; 0x4ba <_ZN10ServoMotor6rotateEm+0x8a>
     464:	ec 01       	movw	r28, r24
		old_time = current_time;
     466:	43 8f       	std	Z+27, r20	; 0x1b
     468:	54 8f       	std	Z+28, r21	; 0x1c
     46a:	65 8f       	std	Z+29, r22	; 0x1d
     46c:	76 8f       	std	Z+30, r23	; 0x1e
		output = pid(); 
     46e:	0e 94 f4 01 	call	0x3e8	; 0x3e8 <_ZN10ServoMotor3pidEv>
	
		/*Change direction if output is less than zero */
	//	usart_sendln(output);
		if(output > 0){
     472:	18 16       	cp	r1, r24
     474:	19 06       	cpc	r1, r25
     476:	74 f4       	brge	.+28     	; 0x494 <_ZN10ServoMotor6rotateEm+0x64>
			*servo_register |= dir_a  ;
     478:	ef 8d       	ldd	r30, Y+31	; 0x1f
     47a:	f8 a1       	ldd	r31, Y+32	; 0x20
     47c:	30 81       	ld	r19, Z
     47e:	2c a1       	ldd	r18, Y+36	; 0x24
     480:	23 2b       	or	r18, r19
     482:	20 83       	st	Z, r18
			*servo_register &= ~dir_b;
     484:	ef 8d       	ldd	r30, Y+31	; 0x1f
     486:	f8 a1       	ldd	r31, Y+32	; 0x20
     488:	30 81       	ld	r19, Z
     48a:	2d a1       	ldd	r18, Y+37	; 0x25
     48c:	20 95       	com	r18
     48e:	23 23       	and	r18, r19
     490:	20 83       	st	Z, r18
     492:	10 c0       	rjmp	.+32     	; 0x4b4 <_ZN10ServoMotor6rotateEm+0x84>
		}else{
			*servo_register &= ~dir_a;
     494:	ef 8d       	ldd	r30, Y+31	; 0x1f
     496:	f8 a1       	ldd	r31, Y+32	; 0x20
     498:	30 81       	ld	r19, Z
     49a:	2c a1       	ldd	r18, Y+36	; 0x24
     49c:	20 95       	com	r18
     49e:	23 23       	and	r18, r19
     4a0:	20 83       	st	Z, r18
			*servo_register |= dir_b;
     4a2:	ef 8d       	ldd	r30, Y+31	; 0x1f
     4a4:	f8 a1       	ldd	r31, Y+32	; 0x20
     4a6:	30 81       	ld	r19, Z
     4a8:	2d a1       	ldd	r18, Y+37	; 0x25
     4aa:	23 2b       	or	r18, r19
     4ac:	20 83       	st	Z, r18
			output = output * -1;
     4ae:	91 95       	neg	r25
     4b0:	81 95       	neg	r24
     4b2:	91 09       	sbc	r25, r1
		}
		/* Limit the maximum output */ 	
	
		*servo_pwm = output;
     4b4:	e9 a1       	ldd	r30, Y+33	; 0x21
     4b6:	fa a1       	ldd	r31, Y+34	; 0x22
     4b8:	80 83       	st	Z, r24
		
		
	}
}
     4ba:	df 91       	pop	r29
     4bc:	cf 91       	pop	r28
     4be:	1f 91       	pop	r17
     4c0:	0f 91       	pop	r16
     4c2:	ff 90       	pop	r15
     4c4:	ef 90       	pop	r14
     4c6:	df 90       	pop	r13
     4c8:	cf 90       	pop	r12
     4ca:	08 95       	ret

000004cc <_ZN10ServoMotor5tachoEhh>:
/*Updates the absolute position from the tachometer in the motor*/
void ServoMotor::tacho(uint8_t plus, uint8_t min){
     4cc:	fc 01       	movw	r30, r24
	if(tacho_state == 0){
     4ce:	83 a1       	ldd	r24, Z+35	; 0x23
     4d0:	81 11       	cpse	r24, r1
     4d2:	12 c0       	rjmp	.+36     	; 0x4f8 <_ZN10ServoMotor5tachoEhh+0x2c>
		/* If plus goes high and min is also high it went fowards 
		 * else it went backwards */
		if(plus){
     4d4:	66 23       	and	r22, r22
     4d6:	99 f0       	breq	.+38     	; 0x4fe <_ZN10ServoMotor5tachoEhh+0x32>
			if(min){
     4d8:	44 23       	and	r20, r20
     4da:	31 f0       	breq	.+12     	; 0x4e8 <_ZN10ServoMotor5tachoEhh+0x1c>
				absolute_position++;
     4dc:	83 85       	ldd	r24, Z+11	; 0x0b
     4de:	94 85       	ldd	r25, Z+12	; 0x0c
     4e0:	01 96       	adiw	r24, 0x01	; 1
     4e2:	94 87       	std	Z+12, r25	; 0x0c
     4e4:	83 87       	std	Z+11, r24	; 0x0b
     4e6:	05 c0       	rjmp	.+10     	; 0x4f2 <_ZN10ServoMotor5tachoEhh+0x26>
			}else{
				absolute_position--;
     4e8:	83 85       	ldd	r24, Z+11	; 0x0b
     4ea:	94 85       	ldd	r25, Z+12	; 0x0c
     4ec:	01 97       	sbiw	r24, 0x01	; 1
     4ee:	94 87       	std	Z+12, r25	; 0x0c
     4f0:	83 87       	std	Z+11, r24	; 0x0b
			}
			tacho_state=1; 
     4f2:	81 e0       	ldi	r24, 0x01	; 1
     4f4:	83 a3       	std	Z+35, r24	; 0x23
     4f6:	08 95       	ret
		}
	}else{
		if(!plus){
     4f8:	61 11       	cpse	r22, r1
     4fa:	01 c0       	rjmp	.+2      	; 0x4fe <_ZN10ServoMotor5tachoEhh+0x32>
			tacho_state = 0; 
     4fc:	13 a2       	std	Z+35, r1	; 0x23
     4fe:	08 95       	ret

00000500 <_ZN12StepperMotorC1Eifhh>:

#define DEBUG_
#define S_SCALER 1000UL

/* Iniatialize the stepper motor */
StepperMotor::StepperMotor(int16_t current_pos, float step_to_angle, uint8_t dir_pin, uint8_t step_pin)
     500:	ef 92       	push	r14
     502:	0f 93       	push	r16
     504:	cf 93       	push	r28
     506:	df 93       	push	r29
     508:	ec 01       	movw	r28, r24
{
	state = S_WAIT; 
     50a:	1f a2       	std	Y+39, r1	; 0x27
	this->current_pos	= current_pos;
     50c:	7a 83       	std	Y+2, r23	; 0x02
     50e:	69 83       	std	Y+1, r22	; 0x01
	/*this value should ideally be an integer */
	this->step_to_angle	= 1.0f/step_to_angle; 
     510:	60 e0       	ldi	r22, 0x00	; 0
     512:	70 e0       	ldi	r23, 0x00	; 0
     514:	80 e8       	ldi	r24, 0x80	; 128
     516:	9f e3       	ldi	r25, 0x3F	; 63
     518:	0e 94 f8 06 	call	0xdf0	; 0xdf0 <__divsf3>
     51c:	6b a3       	std	Y+35, r22	; 0x23
     51e:	7c a3       	std	Y+36, r23	; 0x24
     520:	8d a3       	std	Y+37, r24	; 0x25
     522:	9e a3       	std	Y+38, r25	; 0x26
	this->dir_pin		= dir_pin;
     524:	09 a3       	std	Y+33, r16	; 0x21
	this->step_pin		= step_pin;		
     526:	ea a2       	std	Y+34, r14	; 0x22
	stepper_time = 0;
     528:	1d 8e       	std	Y+29, r1	; 0x1d
     52a:	1e 8e       	std	Y+30, r1	; 0x1e
     52c:	1f 8e       	std	Y+31, r1	; 0x1f
     52e:	18 a2       	std	Y+32, r1	; 0x20
	long_pulse_width = 0;
     530:	1f 86       	std	Y+15, r1	; 0x0f
     532:	18 8a       	std	Y+16, r1	; 0x10
     534:	19 8a       	std	Y+17, r1	; 0x11
     536:	1a 8a       	std	Y+18, r1	; 0x12
} 
     538:	df 91       	pop	r29
     53a:	cf 91       	pop	r28
     53c:	0f 91       	pop	r16
     53e:	ef 90       	pop	r14
     540:	08 95       	ret

00000542 <_ZN12StepperMotor3fsmEm>:
		fsm(current_time); 
	}

}
stepper_fsm StepperMotor::fsm(uint32_t current_time)
{
     542:	cf 92       	push	r12
     544:	df 92       	push	r13
     546:	ef 92       	push	r14
     548:	ff 92       	push	r15
     54a:	0f 93       	push	r16
     54c:	1f 93       	push	r17
     54e:	cf 93       	push	r28
     550:	df 93       	push	r29
     552:	ec 01       	movw	r28, r24
	STEPPER_REGISTER |= step_pin;
     554:	95 b1       	in	r25, 0x05	; 5
     556:	8a a1       	ldd	r24, Y+34	; 0x22
     558:	89 2b       	or	r24, r25
     55a:	85 b9       	out	0x05, r24	; 5
	/*Generate pulses at a frequency of step time*/
	if((current_time - stepper_time) > pulse_width){
     55c:	8d 8d       	ldd	r24, Y+29	; 0x1d
     55e:	9e 8d       	ldd	r25, Y+30	; 0x1e
     560:	af 8d       	ldd	r26, Y+31	; 0x1f
     562:	b8 a1       	ldd	r27, Y+32	; 0x20
     564:	8a 01       	movw	r16, r20
     566:	9b 01       	movw	r18, r22
     568:	08 1b       	sub	r16, r24
     56a:	19 0b       	sbc	r17, r25
     56c:	2a 0b       	sbc	r18, r26
     56e:	3b 0b       	sbc	r19, r27
     570:	8b 89       	ldd	r24, Y+19	; 0x13
     572:	9c 89       	ldd	r25, Y+20	; 0x14
     574:	ad 89       	ldd	r26, Y+21	; 0x15
     576:	be 89       	ldd	r27, Y+22	; 0x16
     578:	80 17       	cp	r24, r16
     57a:	91 07       	cpc	r25, r17
     57c:	a2 07       	cpc	r26, r18
     57e:	b3 07       	cpc	r27, r19
     580:	08 f0       	brcs	.+2      	; 0x584 <_ZN12StepperMotor3fsmEm+0x42>
     582:	c4 c0       	rjmp	.+392    	; 0x70c <_ZN12StepperMotor3fsmEm+0x1ca>
		stepper_time = current_time;
     584:	4d 8f       	std	Y+29, r20	; 0x1d
     586:	5e 8f       	std	Y+30, r21	; 0x1e
     588:	6f 8f       	std	Y+31, r22	; 0x1f
     58a:	78 a3       	std	Y+32, r23	; 0x20
		switch(state){
     58c:	8f a1       	ldd	r24, Y+39	; 0x27
     58e:	83 30       	cpi	r24, 0x03	; 3
     590:	09 f4       	brne	.+2      	; 0x594 <_ZN12StepperMotor3fsmEm+0x52>
     592:	53 c0       	rjmp	.+166    	; 0x63a <_ZN12StepperMotor3fsmEm+0xf8>
     594:	84 30       	cpi	r24, 0x04	; 4
     596:	09 f4       	brne	.+2      	; 0x59a <_ZN12StepperMotor3fsmEm+0x58>
     598:	6c c0       	rjmp	.+216    	; 0x672 <_ZN12StepperMotor3fsmEm+0x130>
     59a:	82 30       	cpi	r24, 0x02	; 2
     59c:	09 f0       	breq	.+2      	; 0x5a0 <_ZN12StepperMotor3fsmEm+0x5e>
     59e:	ac c0       	rjmp	.+344    	; 0x6f8 <_ZN12StepperMotor3fsmEm+0x1b6>
			/*Linearly accelerate */
			case S_ACCEL:
				long_pulse_width=(long_pulse_width-(2UL*long_pulse_width)/(4UL*pulse_width_counter  +1UL));	
     5a0:	cf 84       	ldd	r12, Y+15	; 0x0f
     5a2:	d8 88       	ldd	r13, Y+16	; 0x10
     5a4:	e9 88       	ldd	r14, Y+17	; 0x11
     5a6:	fa 88       	ldd	r15, Y+18	; 0x12
     5a8:	c7 01       	movw	r24, r14
     5aa:	b6 01       	movw	r22, r12
     5ac:	66 0f       	add	r22, r22
     5ae:	77 1f       	adc	r23, r23
     5b0:	88 1f       	adc	r24, r24
     5b2:	99 1f       	adc	r25, r25
     5b4:	2f 89       	ldd	r18, Y+23	; 0x17
     5b6:	38 8d       	ldd	r19, Y+24	; 0x18
     5b8:	89 01       	movw	r16, r18
     5ba:	33 0f       	add	r19, r19
     5bc:	22 0b       	sbc	r18, r18
     5be:	33 0b       	sbc	r19, r19
     5c0:	00 0f       	add	r16, r16
     5c2:	11 1f       	adc	r17, r17
     5c4:	22 1f       	adc	r18, r18
     5c6:	33 1f       	adc	r19, r19
     5c8:	00 0f       	add	r16, r16
     5ca:	11 1f       	adc	r17, r17
     5cc:	22 1f       	adc	r18, r18
     5ce:	33 1f       	adc	r19, r19
     5d0:	a9 01       	movw	r20, r18
     5d2:	98 01       	movw	r18, r16
     5d4:	2f 5f       	subi	r18, 0xFF	; 255
     5d6:	3f 4f       	sbci	r19, 0xFF	; 255
     5d8:	4f 4f       	sbci	r20, 0xFF	; 255
     5da:	5f 4f       	sbci	r21, 0xFF	; 255
     5dc:	0e 94 0a 09 	call	0x1214	; 0x1214 <__udivmodsi4>
     5e0:	c7 01       	movw	r24, r14
     5e2:	b6 01       	movw	r22, r12
     5e4:	62 1b       	sub	r22, r18
     5e6:	73 0b       	sbc	r23, r19
     5e8:	84 0b       	sbc	r24, r20
     5ea:	95 0b       	sbc	r25, r21
     5ec:	6f 87       	std	Y+15, r22	; 0x0f
     5ee:	78 8b       	std	Y+16, r23	; 0x10
     5f0:	89 8b       	std	Y+17, r24	; 0x11
     5f2:	9a 8b       	std	Y+18, r25	; 0x12
				pulse_width = long_pulse_width / S_SCALER;
     5f4:	28 ee       	ldi	r18, 0xE8	; 232
     5f6:	33 e0       	ldi	r19, 0x03	; 3
     5f8:	40 e0       	ldi	r20, 0x00	; 0
     5fa:	50 e0       	ldi	r21, 0x00	; 0
     5fc:	0e 94 0a 09 	call	0x1214	; 0x1214 <__udivmodsi4>
     600:	2b 8b       	std	Y+19, r18	; 0x13
     602:	3c 8b       	std	Y+20, r19	; 0x14
     604:	4d 8b       	std	Y+21, r20	; 0x15
     606:	5e 8b       	std	Y+22, r21	; 0x16
			//	usart_sendln(step_counter);	
			
				if( step_counter >=  t0){
     608:	29 8d       	ldd	r18, Y+25	; 0x19
     60a:	3a 8d       	ldd	r19, Y+26	; 0x1a
     60c:	8f 81       	ldd	r24, Y+7	; 0x07
     60e:	98 85       	ldd	r25, Y+8	; 0x08
     610:	28 17       	cp	r18, r24
     612:	39 07       	cpc	r19, r25
     614:	60 f0       	brcs	.+24     	; 0x62e <_ZN12StepperMotor3fsmEm+0xec>
					#ifdef DEBUG_
						usart_send("S_ACCEL");
     616:	80 e0       	ldi	r24, 0x00	; 0
     618:	91 e0       	ldi	r25, 0x01	; 1
     61a:	0e 94 68 06 	call	0xcd0	; 0xcd0 <_Z10usart_sendPc>
						usart_sendln(pulse_width);
     61e:	6b 89       	ldd	r22, Y+19	; 0x13
     620:	7c 89       	ldd	r23, Y+20	; 0x14
     622:	8d 89       	ldd	r24, Y+21	; 0x15
     624:	9e 89       	ldd	r25, Y+22	; 0x16
     626:	0e 94 81 06 	call	0xd02	; 0xd02 <_Z12usart_sendlnm>
					#endif
					state = S_CONSTANT;
     62a:	83 e0       	ldi	r24, 0x03	; 3
     62c:	8f a3       	std	Y+39, r24	; 0x27
				}	
				pulse_width_counter ++;
     62e:	8f 89       	ldd	r24, Y+23	; 0x17
     630:	98 8d       	ldd	r25, Y+24	; 0x18
     632:	01 96       	adiw	r24, 0x01	; 1
     634:	98 8f       	std	Y+24, r25	; 0x18
     636:	8f 8b       	std	Y+23, r24	; 0x17
				break; 
     638:	5f c0       	rjmp	.+190    	; 0x6f8 <_ZN12StepperMotor3fsmEm+0x1b6>
			/*Rotate at a constant velocity */
			case S_CONSTANT:
				if(step_counter >= t1){
     63a:	29 8d       	ldd	r18, Y+25	; 0x19
     63c:	3a 8d       	ldd	r19, Y+26	; 0x1a
     63e:	89 85       	ldd	r24, Y+9	; 0x09
     640:	9a 85       	ldd	r25, Y+10	; 0x0a
     642:	28 17       	cp	r18, r24
     644:	39 07       	cpc	r19, r25
     646:	08 f4       	brcc	.+2      	; 0x64a <_ZN12StepperMotor3fsmEm+0x108>
     648:	57 c0       	rjmp	.+174    	; 0x6f8 <_ZN12StepperMotor3fsmEm+0x1b6>
					state = S_DECEL;
     64a:	84 e0       	ldi	r24, 0x04	; 4
     64c:	8f a3       	std	Y+39, r24	; 0x27
					pulse_width_counter =pulse_width_counter *-1; 
     64e:	8f 89       	ldd	r24, Y+23	; 0x17
     650:	98 8d       	ldd	r25, Y+24	; 0x18
     652:	91 95       	neg	r25
     654:	81 95       	neg	r24
     656:	91 09       	sbc	r25, r1
     658:	98 8f       	std	Y+24, r25	; 0x18
     65a:	8f 8b       	std	Y+23, r24	; 0x17
					#ifdef DEBUG_
						usart_send("S_CONSTANT ");
     65c:	88 e0       	ldi	r24, 0x08	; 8
     65e:	91 e0       	ldi	r25, 0x01	; 1
     660:	0e 94 68 06 	call	0xcd0	; 0xcd0 <_Z10usart_sendPc>
						usart_sendln(pulse_width);
     664:	6b 89       	ldd	r22, Y+19	; 0x13
     666:	7c 89       	ldd	r23, Y+20	; 0x14
     668:	8d 89       	ldd	r24, Y+21	; 0x15
     66a:	9e 89       	ldd	r25, Y+22	; 0x16
     66c:	0e 94 81 06 	call	0xd02	; 0xd02 <_Z12usart_sendlnm>
     670:	43 c0       	rjmp	.+134    	; 0x6f8 <_ZN12StepperMotor3fsmEm+0x1b6>
					#endif
					}
				break;
			/*Linearly decelerate */
			case S_DECEL:
				long_pulse_width=(long_pulse_width-(2*long_pulse_width)/(4*pulse_width_counter  +1));		
     672:	cf 84       	ldd	r12, Y+15	; 0x0f
     674:	d8 88       	ldd	r13, Y+16	; 0x10
     676:	e9 88       	ldd	r14, Y+17	; 0x11
     678:	fa 88       	ldd	r15, Y+18	; 0x12
     67a:	c7 01       	movw	r24, r14
     67c:	b6 01       	movw	r22, r12
     67e:	66 0f       	add	r22, r22
     680:	77 1f       	adc	r23, r23
     682:	88 1f       	adc	r24, r24
     684:	99 1f       	adc	r25, r25
     686:	2f 89       	ldd	r18, Y+23	; 0x17
     688:	38 8d       	ldd	r19, Y+24	; 0x18
     68a:	22 0f       	add	r18, r18
     68c:	33 1f       	adc	r19, r19
     68e:	22 0f       	add	r18, r18
     690:	33 1f       	adc	r19, r19
     692:	2f 5f       	subi	r18, 0xFF	; 255
     694:	3f 4f       	sbci	r19, 0xFF	; 255
     696:	03 2e       	mov	r0, r19
     698:	00 0c       	add	r0, r0
     69a:	44 0b       	sbc	r20, r20
     69c:	55 0b       	sbc	r21, r21
     69e:	0e 94 2c 09 	call	0x1258	; 0x1258 <__divmodsi4>
     6a2:	c7 01       	movw	r24, r14
     6a4:	b6 01       	movw	r22, r12
     6a6:	62 1b       	sub	r22, r18
     6a8:	73 0b       	sbc	r23, r19
     6aa:	84 0b       	sbc	r24, r20
     6ac:	95 0b       	sbc	r25, r21
     6ae:	6f 87       	std	Y+15, r22	; 0x0f
     6b0:	78 8b       	std	Y+16, r23	; 0x10
     6b2:	89 8b       	std	Y+17, r24	; 0x11
     6b4:	9a 8b       	std	Y+18, r25	; 0x12
				pulse_width = long_pulse_width / S_SCALER;
     6b6:	28 ee       	ldi	r18, 0xE8	; 232
     6b8:	33 e0       	ldi	r19, 0x03	; 3
     6ba:	40 e0       	ldi	r20, 0x00	; 0
     6bc:	50 e0       	ldi	r21, 0x00	; 0
     6be:	0e 94 0a 09 	call	0x1214	; 0x1214 <__udivmodsi4>
     6c2:	2b 8b       	std	Y+19, r18	; 0x13
     6c4:	3c 8b       	std	Y+20, r19	; 0x14
     6c6:	4d 8b       	std	Y+21, r20	; 0x15
     6c8:	5e 8b       	std	Y+22, r21	; 0x16
			//	usart_sendln(step_counter);	
				if(step_counter >= num_steps){
     6ca:	29 8d       	ldd	r18, Y+25	; 0x19
     6cc:	3a 8d       	ldd	r19, Y+26	; 0x1a
     6ce:	8d 81       	ldd	r24, Y+5	; 0x05
     6d0:	9e 81       	ldd	r25, Y+6	; 0x06
     6d2:	28 17       	cp	r18, r24
     6d4:	39 07       	cpc	r19, r25
     6d6:	58 f0       	brcs	.+22     	; 0x6ee <_ZN12StepperMotor3fsmEm+0x1ac>
							start = 0; 
     6d8:	18 82       	st	Y, r1
					#ifdef DEBUG_
						usart_send("S_DECEL ");
     6da:	84 e1       	ldi	r24, 0x14	; 20
     6dc:	91 e0       	ldi	r25, 0x01	; 1
     6de:	0e 94 68 06 	call	0xcd0	; 0xcd0 <_Z10usart_sendPc>
						usart_sendln(long_pulse_width);
     6e2:	6f 85       	ldd	r22, Y+15	; 0x0f
     6e4:	78 89       	ldd	r23, Y+16	; 0x10
     6e6:	89 89       	ldd	r24, Y+17	; 0x11
     6e8:	9a 89       	ldd	r25, Y+18	; 0x12
     6ea:	0e 94 86 06 	call	0xd0c	; 0xd0c <_Z12usart_sendlnl>
					#endif
				}
				pulse_width_counter ++;
     6ee:	8f 89       	ldd	r24, Y+23	; 0x17
     6f0:	98 8d       	ldd	r25, Y+24	; 0x18
     6f2:	01 96       	adiw	r24, 0x01	; 1
     6f4:	98 8f       	std	Y+24, r25	; 0x18
     6f6:	8f 8b       	std	Y+23, r24	; 0x17
				break;
		}	
		STEPPER_REGISTER &= ~step_pin;
     6f8:	95 b1       	in	r25, 0x05	; 5
     6fa:	8a a1       	ldd	r24, Y+34	; 0x22
     6fc:	80 95       	com	r24
     6fe:	89 23       	and	r24, r25
     700:	85 b9       	out	0x05, r24	; 5
		step_counter++; 
     702:	89 8d       	ldd	r24, Y+25	; 0x19
     704:	9a 8d       	ldd	r25, Y+26	; 0x1a
     706:	01 96       	adiw	r24, 0x01	; 1
     708:	9a 8f       	std	Y+26, r25	; 0x1a
     70a:	89 8f       	std	Y+25, r24	; 0x19
	}
	
	
	return state;
}
     70c:	8f a1       	ldd	r24, Y+39	; 0x27
     70e:	df 91       	pop	r29
     710:	cf 91       	pop	r28
     712:	1f 91       	pop	r17
     714:	0f 91       	pop	r16
     716:	ff 90       	pop	r15
     718:	ef 90       	pop	r14
     71a:	df 90       	pop	r13
     71c:	cf 90       	pop	r12
     71e:	08 95       	ret

00000720 <_ZN12StepperMotor6rotateEm>:
} 




int StepperMotor::rotate(uint32_t current_time){
     720:	2f 92       	push	r2
     722:	3f 92       	push	r3
     724:	4f 92       	push	r4
     726:	5f 92       	push	r5
     728:	6f 92       	push	r6
     72a:	7f 92       	push	r7
     72c:	8f 92       	push	r8
     72e:	9f 92       	push	r9
     730:	af 92       	push	r10
     732:	bf 92       	push	r11
     734:	cf 92       	push	r12
     736:	df 92       	push	r13
     738:	ef 92       	push	r14
     73a:	ff 92       	push	r15
     73c:	0f 93       	push	r16
     73e:	1f 93       	push	r17
     740:	cf 93       	push	r28
     742:	df 93       	push	r29
     744:	cd b7       	in	r28, 0x3d	; 61
     746:	de b7       	in	r29, 0x3e	; 62
     748:	60 97       	sbiw	r28, 0x10	; 16
     74a:	0f b6       	in	r0, 0x3f	; 63
     74c:	f8 94       	cli
     74e:	de bf       	out	0x3e, r29	; 62
     750:	0f be       	out	0x3f, r0	; 63
     752:	cd bf       	out	0x3d, r28	; 61
     754:	98 8b       	std	Y+16, r25	; 0x10
     756:	8f 87       	std	Y+15, r24	; 0x0f
     758:	2a 01       	movw	r4, r20
     75a:	3b 01       	movw	r6, r22
	if(start == 1){
     75c:	dc 01       	movw	r26, r24
     75e:	8c 91       	ld	r24, X
     760:	81 30       	cpi	r24, 0x01	; 1
     762:	09 f0       	breq	.+2      	; 0x766 <_ZN12StepperMotor6rotateEm+0x46>
     764:	95 c1       	rjmp	.+810    	; 0xa90 <__stack+0x191>
		state = S_ACCEL;
     766:	82 e0       	ldi	r24, 0x02	; 2
     768:	97 96       	adiw	r26, 0x27	; 39
     76a:	8c 93       	st	X, r24
     76c:	97 97       	sbiw	r26, 0x27	; 39
		int16_t angle=(target_pos - current_pos);
     76e:	13 96       	adiw	r26, 0x03	; 3
     770:	8d 91       	ld	r24, X+
     772:	9c 91       	ld	r25, X
     774:	14 97       	sbiw	r26, 0x04	; 4
     776:	11 96       	adiw	r26, 0x01	; 1
     778:	2d 91       	ld	r18, X+
     77a:	3c 91       	ld	r19, X
     77c:	12 97       	sbiw	r26, 0x02	; 2
     77e:	8c 01       	movw	r16, r24
     780:	02 1b       	sub	r16, r18
     782:	13 0b       	sbc	r17, r19
		current_pos = target_pos;
     784:	12 96       	adiw	r26, 0x02	; 2
     786:	9c 93       	st	X, r25
     788:	8e 93       	st	-X, r24
     78a:	11 97       	sbiw	r26, 0x01	; 1
		if(angle> 0){
     78c:	10 16       	cp	r1, r16
     78e:	11 06       	cpc	r1, r17
     790:	34 f4       	brge	.+12     	; 0x79e <_ZN12StepperMotor6rotateEm+0x7e>
			STEPPER_REGISTER |= dir_pin; 
     792:	95 b1       	in	r25, 0x05	; 5
     794:	91 96       	adiw	r26, 0x21	; 33
     796:	8c 91       	ld	r24, X
     798:	89 2b       	or	r24, r25
     79a:	85 b9       	out	0x05, r24	; 5
     79c:	14 c0       	rjmp	.+40     	; 0x7c6 <_ZN12StepperMotor6rotateEm+0xa6>
		}else if(angle <0){
     79e:	11 23       	and	r17, r17
     7a0:	5c f4       	brge	.+22     	; 0x7b8 <_ZN12StepperMotor6rotateEm+0x98>
			STEPPER_REGISTER &= ~dir_pin; 
     7a2:	95 b1       	in	r25, 0x05	; 5
     7a4:	ef 85       	ldd	r30, Y+15	; 0x0f
     7a6:	f8 89       	ldd	r31, Y+16	; 0x10
     7a8:	81 a1       	ldd	r24, Z+33	; 0x21
     7aa:	80 95       	com	r24
     7ac:	89 23       	and	r24, r25
     7ae:	85 b9       	out	0x05, r24	; 5
			angle = angle * -1;
     7b0:	11 95       	neg	r17
     7b2:	01 95       	neg	r16
     7b4:	11 09       	sbc	r17, r1
     7b6:	07 c0       	rjmp	.+14     	; 0x7c6 <_ZN12StepperMotor6rotateEm+0xa6>
		}else if(angle == 0){
     7b8:	01 15       	cp	r16, r1
     7ba:	11 05       	cpc	r17, r1
     7bc:	21 f4       	brne	.+8      	; 0x7c6 <_ZN12StepperMotor6rotateEm+0xa6>
			state = S_WAIT;
     7be:	af 85       	ldd	r26, Y+15	; 0x0f
     7c0:	b8 89       	ldd	r27, Y+16	; 0x10
     7c2:	97 96       	adiw	r26, 0x27	; 39
     7c4:	1c 92       	st	X, r1
			start = 0; 
		}

		/* Compute parameters */
		num_steps = angle*step_to_angle;
     7c6:	af 85       	ldd	r26, Y+15	; 0x0f
     7c8:	b8 89       	ldd	r27, Y+16	; 0x10
     7ca:	93 96       	adiw	r26, 0x23	; 35
     7cc:	8d 91       	ld	r24, X+
     7ce:	9d 91       	ld	r25, X+
     7d0:	0d 90       	ld	r0, X+
     7d2:	bc 91       	ld	r27, X
     7d4:	a0 2d       	mov	r26, r0
     7d6:	89 87       	std	Y+9, r24	; 0x09
     7d8:	9a 87       	std	Y+10, r25	; 0x0a
     7da:	ab 87       	std	Y+11, r26	; 0x0b
     7dc:	bc 87       	std	Y+12, r27	; 0x0c
     7de:	b8 01       	movw	r22, r16
     7e0:	01 2e       	mov	r0, r17
     7e2:	00 0c       	add	r0, r0
     7e4:	88 0b       	sbc	r24, r24
     7e6:	99 0b       	sbc	r25, r25
     7e8:	0e 94 a2 07 	call	0xf44	; 0xf44 <__floatsisf>
     7ec:	29 85       	ldd	r18, Y+9	; 0x09
     7ee:	3a 85       	ldd	r19, Y+10	; 0x0a
     7f0:	4b 85       	ldd	r20, Y+11	; 0x0b
     7f2:	5c 85       	ldd	r21, Y+12	; 0x0c
     7f4:	0e 94 2e 08 	call	0x105c	; 0x105c <__mulsf3>
     7f8:	0e 94 71 07 	call	0xee2	; 0xee2 <__fixunssfsi>
     7fc:	6b 01       	movw	r12, r22
     7fe:	7c 01       	movw	r14, r24
     800:	ef 85       	ldd	r30, Y+15	; 0x0f
     802:	f8 89       	ldd	r31, Y+16	; 0x10
     804:	76 83       	std	Z+6, r23	; 0x06
     806:	65 83       	std	Z+5, r22	; 0x05
		uint16_t vmax= 0.5*(acceleration*duration-sqrt(pow(acceleration*duration,2)-(angle*acceleration*4)));
     808:	23 84       	ldd	r2, Z+11	; 0x0b
     80a:	34 84       	ldd	r3, Z+12	; 0x0c
     80c:	85 85       	ldd	r24, Z+13	; 0x0d
     80e:	96 85       	ldd	r25, Z+14	; 0x0e
     810:	28 9e       	mul	r2, r24
     812:	b0 01       	movw	r22, r0
     814:	29 9e       	mul	r2, r25
     816:	70 0d       	add	r23, r0
     818:	38 9e       	mul	r3, r24
     81a:	70 0d       	add	r23, r0
     81c:	11 24       	eor	r1, r1
     81e:	80 e0       	ldi	r24, 0x00	; 0
     820:	90 e0       	ldi	r25, 0x00	; 0
     822:	0e 94 a0 07 	call	0xf40	; 0xf40 <__floatunsisf>
     826:	69 83       	std	Y+1, r22	; 0x01
     828:	7a 83       	std	Y+2, r23	; 0x02
     82a:	8b 83       	std	Y+3, r24	; 0x03
     82c:	9c 83       	std	Y+4, r25	; 0x04
     82e:	02 9d       	mul	r16, r2
     830:	c0 01       	movw	r24, r0
     832:	03 9d       	mul	r16, r3
     834:	90 0d       	add	r25, r0
     836:	12 9d       	mul	r17, r2
     838:	90 0d       	add	r25, r0
     83a:	11 24       	eor	r1, r1
     83c:	9e 87       	std	Y+14, r25	; 0x0e
     83e:	8d 87       	std	Y+13, r24	; 0x0d
     840:	29 81       	ldd	r18, Y+1	; 0x01
     842:	3a 81       	ldd	r19, Y+2	; 0x02
     844:	4b 81       	ldd	r20, Y+3	; 0x03
     846:	5c 81       	ldd	r21, Y+4	; 0x04
     848:	ca 01       	movw	r24, r20
     84a:	b9 01       	movw	r22, r18
     84c:	0e 94 2e 08 	call	0x105c	; 0x105c <__mulsf3>
     850:	6d 83       	std	Y+5, r22	; 0x05
     852:	7e 83       	std	Y+6, r23	; 0x06
     854:	8f 83       	std	Y+7, r24	; 0x07
     856:	98 87       	std	Y+8, r25	; 0x08
     858:	8d 84       	ldd	r8, Y+13	; 0x0d
     85a:	9e 84       	ldd	r9, Y+14	; 0x0e
     85c:	88 0c       	add	r8, r8
     85e:	99 1c       	adc	r9, r9
     860:	88 0c       	add	r8, r8
     862:	99 1c       	adc	r9, r9
     864:	a1 2c       	mov	r10, r1
     866:	b1 2c       	mov	r11, r1
     868:	c5 01       	movw	r24, r10
     86a:	b4 01       	movw	r22, r8
     86c:	0e 94 a0 07 	call	0xf40	; 0xf40 <__floatunsisf>
     870:	9b 01       	movw	r18, r22
     872:	ac 01       	movw	r20, r24
     874:	6d 81       	ldd	r22, Y+5	; 0x05
     876:	7e 81       	ldd	r23, Y+6	; 0x06
     878:	8f 81       	ldd	r24, Y+7	; 0x07
     87a:	98 85       	ldd	r25, Y+8	; 0x08
     87c:	0e 94 8b 06 	call	0xd16	; 0xd16 <__subsf3>
     880:	0e 94 a1 08 	call	0x1142	; 0x1142 <sqrt>
     884:	9b 01       	movw	r18, r22
     886:	ac 01       	movw	r20, r24
     888:	69 81       	ldd	r22, Y+1	; 0x01
     88a:	7a 81       	ldd	r23, Y+2	; 0x02
     88c:	8b 81       	ldd	r24, Y+3	; 0x03
     88e:	9c 81       	ldd	r25, Y+4	; 0x04
     890:	0e 94 8b 06 	call	0xd16	; 0xd16 <__subsf3>
     894:	20 e0       	ldi	r18, 0x00	; 0
     896:	30 e0       	ldi	r19, 0x00	; 0
     898:	40 e0       	ldi	r20, 0x00	; 0
     89a:	5f e3       	ldi	r21, 0x3F	; 63
     89c:	0e 94 2e 08 	call	0x105c	; 0x105c <__mulsf3>
     8a0:	0e 94 71 07 	call	0xee2	; 0xee2 <__fixunssfsi>
     8a4:	4b 01       	movw	r8, r22
     8a6:	5c 01       	movw	r10, r24
		t0=(pow(vmax,2)*num_steps)/(2*angle*acceleration);
     8a8:	80 e0       	ldi	r24, 0x00	; 0
     8aa:	90 e0       	ldi	r25, 0x00	; 0
     8ac:	0e 94 a0 07 	call	0xf40	; 0xf40 <__floatunsisf>
     8b0:	69 83       	std	Y+1, r22	; 0x01
     8b2:	7a 83       	std	Y+2, r23	; 0x02
     8b4:	8b 83       	std	Y+3, r24	; 0x03
     8b6:	9c 83       	std	Y+4, r25	; 0x04
     8b8:	b6 01       	movw	r22, r12
     8ba:	80 e0       	ldi	r24, 0x00	; 0
     8bc:	90 e0       	ldi	r25, 0x00	; 0
     8be:	0e 94 a0 07 	call	0xf40	; 0xf40 <__floatunsisf>
     8c2:	6d 83       	std	Y+5, r22	; 0x05
     8c4:	7e 83       	std	Y+6, r23	; 0x06
     8c6:	8f 83       	std	Y+7, r24	; 0x07
     8c8:	98 87       	std	Y+8, r25	; 0x08
     8ca:	29 81       	ldd	r18, Y+1	; 0x01
     8cc:	3a 81       	ldd	r19, Y+2	; 0x02
     8ce:	4b 81       	ldd	r20, Y+3	; 0x03
     8d0:	5c 81       	ldd	r21, Y+4	; 0x04
     8d2:	ca 01       	movw	r24, r20
     8d4:	b9 01       	movw	r22, r18
     8d6:	0e 94 2e 08 	call	0x105c	; 0x105c <__mulsf3>
     8da:	9b 01       	movw	r18, r22
     8dc:	ac 01       	movw	r20, r24
     8de:	6d 81       	ldd	r22, Y+5	; 0x05
     8e0:	7e 81       	ldd	r23, Y+6	; 0x06
     8e2:	8f 81       	ldd	r24, Y+7	; 0x07
     8e4:	98 85       	ldd	r25, Y+8	; 0x08
     8e6:	0e 94 2e 08 	call	0x105c	; 0x105c <__mulsf3>
     8ea:	69 83       	std	Y+1, r22	; 0x01
     8ec:	7a 83       	std	Y+2, r23	; 0x02
     8ee:	8b 83       	std	Y+3, r24	; 0x03
     8f0:	9c 83       	std	Y+4, r25	; 0x04
     8f2:	6d 85       	ldd	r22, Y+13	; 0x0d
     8f4:	7e 85       	ldd	r23, Y+14	; 0x0e
     8f6:	66 0f       	add	r22, r22
     8f8:	77 1f       	adc	r23, r23
     8fa:	80 e0       	ldi	r24, 0x00	; 0
     8fc:	90 e0       	ldi	r25, 0x00	; 0
     8fe:	0e 94 a0 07 	call	0xf40	; 0xf40 <__floatunsisf>
     902:	9b 01       	movw	r18, r22
     904:	ac 01       	movw	r20, r24
     906:	69 81       	ldd	r22, Y+1	; 0x01
     908:	7a 81       	ldd	r23, Y+2	; 0x02
     90a:	8b 81       	ldd	r24, Y+3	; 0x03
     90c:	9c 81       	ldd	r25, Y+4	; 0x04
     90e:	0e 94 f8 06 	call	0xdf0	; 0xdf0 <__divsf3>
     912:	0e 94 71 07 	call	0xee2	; 0xee2 <__fixunssfsi>
     916:	af 85       	ldd	r26, Y+15	; 0x0f
     918:	b8 89       	ldd	r27, Y+16	; 0x10
     91a:	18 96       	adiw	r26, 0x08	; 8
     91c:	7c 93       	st	X, r23
     91e:	6e 93       	st	-X, r22
     920:	17 97       	sbiw	r26, 0x07	; 7
		t1 =num_steps-t0;
     922:	c6 01       	movw	r24, r12
     924:	86 1b       	sub	r24, r22
     926:	97 0b       	sbc	r25, r23
     928:	1a 96       	adiw	r26, 0x0a	; 10
     92a:	9c 93       	st	X, r25
     92c:	8e 93       	st	-X, r24
     92e:	19 97       	sbiw	r26, 0x09	; 9
		long_pulse_width =10000* sqrt(2/(acceleration*step_to_angle)) * S_SCALER;
     930:	61 01       	movw	r12, r2
     932:	e1 2c       	mov	r14, r1
     934:	f1 2c       	mov	r15, r1
     936:	c7 01       	movw	r24, r14
     938:	b6 01       	movw	r22, r12
     93a:	0e 94 a0 07 	call	0xf40	; 0xf40 <__floatunsisf>
     93e:	29 85       	ldd	r18, Y+9	; 0x09
     940:	3a 85       	ldd	r19, Y+10	; 0x0a
     942:	4b 85       	ldd	r20, Y+11	; 0x0b
     944:	5c 85       	ldd	r21, Y+12	; 0x0c
     946:	0e 94 2e 08 	call	0x105c	; 0x105c <__mulsf3>
     94a:	9b 01       	movw	r18, r22
     94c:	ac 01       	movw	r20, r24
     94e:	60 e0       	ldi	r22, 0x00	; 0
     950:	70 e0       	ldi	r23, 0x00	; 0
     952:	80 e0       	ldi	r24, 0x00	; 0
     954:	90 e4       	ldi	r25, 0x40	; 64
     956:	0e 94 f8 06 	call	0xdf0	; 0xdf0 <__divsf3>
     95a:	0e 94 a1 08 	call	0x1142	; 0x1142 <sqrt>
     95e:	20 e0       	ldi	r18, 0x00	; 0
     960:	30 e4       	ldi	r19, 0x40	; 64
     962:	4c e1       	ldi	r20, 0x1C	; 28
     964:	56 e4       	ldi	r21, 0x46	; 70
     966:	0e 94 2e 08 	call	0x105c	; 0x105c <__mulsf3>
     96a:	20 e0       	ldi	r18, 0x00	; 0
     96c:	30 e0       	ldi	r19, 0x00	; 0
     96e:	4a e7       	ldi	r20, 0x7A	; 122
     970:	54 e4       	ldi	r21, 0x44	; 68
     972:	0e 94 2e 08 	call	0x105c	; 0x105c <__mulsf3>
     976:	0e 94 6a 07 	call	0xed4	; 0xed4 <__fixsfsi>
     97a:	ef 85       	ldd	r30, Y+15	; 0x0f
     97c:	f8 89       	ldd	r31, Y+16	; 0x10
     97e:	67 87       	std	Z+15, r22	; 0x0f
     980:	70 8b       	std	Z+16, r23	; 0x10
     982:	81 8b       	std	Z+17, r24	; 0x11
     984:	92 8b       	std	Z+18, r25	; 0x12
		/* End  computations */

		step_counter  = 0;
     986:	12 8e       	std	Z+26, r1	; 0x1a
     988:	11 8e       	std	Z+25, r1	; 0x19
		pulse_width_counter  = 1; 
     98a:	21 e0       	ldi	r18, 0x01	; 1
     98c:	30 e0       	ldi	r19, 0x00	; 0
     98e:	30 8f       	std	Z+24, r19	; 0x18
     990:	27 8b       	std	Z+23, r18	; 0x17
		pulse_width = long_pulse_width / S_SCALER;
     992:	28 ee       	ldi	r18, 0xE8	; 232
     994:	33 e0       	ldi	r19, 0x03	; 3
     996:	40 e0       	ldi	r20, 0x00	; 0
     998:	50 e0       	ldi	r21, 0x00	; 0
     99a:	0e 94 0a 09 	call	0x1214	; 0x1214 <__udivmodsi4>
     99e:	af 85       	ldd	r26, Y+15	; 0x0f
     9a0:	b8 89       	ldd	r27, Y+16	; 0x10
     9a2:	53 96       	adiw	r26, 0x13	; 19
     9a4:	2d 93       	st	X+, r18
     9a6:	3d 93       	st	X+, r19
     9a8:	4d 93       	st	X+, r20
     9aa:	5c 93       	st	X, r21
     9ac:	56 97       	sbiw	r26, 0x16	; 22
		start = 2; 
     9ae:	82 e0       	ldi	r24, 0x02	; 2
     9b0:	8c 93       	st	X, r24
		#ifdef DEBUG_
		
		usart_sendln("####################"); 
     9b2:	8d e1       	ldi	r24, 0x1D	; 29
     9b4:	91 e0       	ldi	r25, 0x01	; 1
     9b6:	0e 94 7c 06 	call	0xcf8	; 0xcf8 <_Z12usart_sendlnPc>
		usart_send("Angle ");usart_sendln((int)angle);  
     9ba:	82 e3       	ldi	r24, 0x32	; 50
     9bc:	91 e0       	ldi	r25, 0x01	; 1
     9be:	0e 94 68 06 	call	0xcd0	; 0xcd0 <_Z10usart_sendPc>
     9c2:	c8 01       	movw	r24, r16
     9c4:	0e 94 77 06 	call	0xcee	; 0xcee <_Z12usart_sendlni>
		usart_send("duration ");usart_sendln((int)duration);
     9c8:	89 e3       	ldi	r24, 0x39	; 57
     9ca:	91 e0       	ldi	r25, 0x01	; 1
     9cc:	0e 94 68 06 	call	0xcd0	; 0xcd0 <_Z10usart_sendPc>
     9d0:	ef 85       	ldd	r30, Y+15	; 0x0f
     9d2:	f8 89       	ldd	r31, Y+16	; 0x10
     9d4:	85 85       	ldd	r24, Z+13	; 0x0d
     9d6:	96 85       	ldd	r25, Z+14	; 0x0e
     9d8:	0e 94 77 06 	call	0xcee	; 0xcee <_Z12usart_sendlni>
		usart_send("Acceleration ");usart_sendln((int)acceleration);
     9dc:	83 e4       	ldi	r24, 0x43	; 67
     9de:	91 e0       	ldi	r25, 0x01	; 1
     9e0:	0e 94 68 06 	call	0xcd0	; 0xcd0 <_Z10usart_sendPc>
     9e4:	af 85       	ldd	r26, Y+15	; 0x0f
     9e6:	b8 89       	ldd	r27, Y+16	; 0x10
     9e8:	1b 96       	adiw	r26, 0x0b	; 11
     9ea:	8d 91       	ld	r24, X+
     9ec:	9c 91       	ld	r25, X
     9ee:	1c 97       	sbiw	r26, 0x0c	; 12
     9f0:	0e 94 77 06 	call	0xcee	; 0xcee <_Z12usart_sendlni>
		usart_send("vmax ");usart_sendln((int)vmax); 			
     9f4:	81 e5       	ldi	r24, 0x51	; 81
     9f6:	91 e0       	ldi	r25, 0x01	; 1
     9f8:	0e 94 68 06 	call	0xcd0	; 0xcd0 <_Z10usart_sendPc>
     9fc:	c4 01       	movw	r24, r8
     9fe:	0e 94 77 06 	call	0xcee	; 0xcee <_Z12usart_sendlni>
		usart_send("#n ");usart_sendln((int)num_steps); 			
     a02:	87 e5       	ldi	r24, 0x57	; 87
     a04:	91 e0       	ldi	r25, 0x01	; 1
     a06:	0e 94 68 06 	call	0xcd0	; 0xcd0 <_Z10usart_sendPc>
     a0a:	ef 85       	ldd	r30, Y+15	; 0x0f
     a0c:	f8 89       	ldd	r31, Y+16	; 0x10
     a0e:	85 81       	ldd	r24, Z+5	; 0x05
     a10:	96 81       	ldd	r25, Z+6	; 0x06
     a12:	0e 94 77 06 	call	0xcee	; 0xcee <_Z12usart_sendlni>
		usart_send("t0 ");usart_sendln((int)t0); 			
     a16:	8b e5       	ldi	r24, 0x5B	; 91
     a18:	91 e0       	ldi	r25, 0x01	; 1
     a1a:	0e 94 68 06 	call	0xcd0	; 0xcd0 <_Z10usart_sendPc>
     a1e:	af 85       	ldd	r26, Y+15	; 0x0f
     a20:	b8 89       	ldd	r27, Y+16	; 0x10
     a22:	17 96       	adiw	r26, 0x07	; 7
     a24:	8d 91       	ld	r24, X+
     a26:	9c 91       	ld	r25, X
     a28:	18 97       	sbiw	r26, 0x08	; 8
     a2a:	0e 94 77 06 	call	0xcee	; 0xcee <_Z12usart_sendlni>
		usart_send("t1 ");usart_sendln((int)t1); 			
     a2e:	8f e5       	ldi	r24, 0x5F	; 95
     a30:	91 e0       	ldi	r25, 0x01	; 1
     a32:	0e 94 68 06 	call	0xcd0	; 0xcd0 <_Z10usart_sendPc>
     a36:	ef 85       	ldd	r30, Y+15	; 0x0f
     a38:	f8 89       	ldd	r31, Y+16	; 0x10
     a3a:	81 85       	ldd	r24, Z+9	; 0x09
     a3c:	92 85       	ldd	r25, Z+10	; 0x0a
     a3e:	0e 94 77 06 	call	0xcee	; 0xcee <_Z12usart_sendlni>
		usart_send("Long Step time ");usart_sendln(long_pulse_width);
     a42:	83 e6       	ldi	r24, 0x63	; 99
     a44:	91 e0       	ldi	r25, 0x01	; 1
     a46:	0e 94 68 06 	call	0xcd0	; 0xcd0 <_Z10usart_sendPc>
     a4a:	af 85       	ldd	r26, Y+15	; 0x0f
     a4c:	b8 89       	ldd	r27, Y+16	; 0x10
     a4e:	1f 96       	adiw	r26, 0x0f	; 15
     a50:	6d 91       	ld	r22, X+
     a52:	7d 91       	ld	r23, X+
     a54:	8d 91       	ld	r24, X+
     a56:	9c 91       	ld	r25, X
     a58:	52 97       	sbiw	r26, 0x12	; 18
     a5a:	0e 94 86 06 	call	0xd0c	; 0xd0c <_Z12usart_sendlnl>
		usart_send("Step time ");usart_sendln(pulse_width);
     a5e:	88 e6       	ldi	r24, 0x68	; 104
     a60:	91 e0       	ldi	r25, 0x01	; 1
     a62:	0e 94 68 06 	call	0xcd0	; 0xcd0 <_Z10usart_sendPc>
     a66:	ef 85       	ldd	r30, Y+15	; 0x0f
     a68:	f8 89       	ldd	r31, Y+16	; 0x10
     a6a:	63 89       	ldd	r22, Z+19	; 0x13
     a6c:	74 89       	ldd	r23, Z+20	; 0x14
     a6e:	85 89       	ldd	r24, Z+21	; 0x15
     a70:	96 89       	ldd	r25, Z+22	; 0x16
     a72:	0e 94 81 06 	call	0xd02	; 0xd02 <_Z12usart_sendlnm>
		usart_sendln("####################"); 		
     a76:	8d e1       	ldi	r24, 0x1D	; 29
     a78:	91 e0       	ldi	r25, 0x01	; 1
     a7a:	0e 94 7c 06 	call	0xcf8	; 0xcf8 <_Z12usart_sendlnPc>
		#endif // DEBUG
		stepper_time = current_time; 
     a7e:	af 85       	ldd	r26, Y+15	; 0x0f
     a80:	b8 89       	ldd	r27, Y+16	; 0x10
     a82:	5d 96       	adiw	r26, 0x1d	; 29
     a84:	4d 92       	st	X+, r4
     a86:	5d 92       	st	X+, r5
     a88:	6d 92       	st	X+, r6
     a8a:	7c 92       	st	X, r7
     a8c:	90 97       	sbiw	r26, 0x20	; 32
     a8e:	06 c0       	rjmp	.+12     	; 0xa9c <__stack+0x19d>
	}else if(start == 2){
     a90:	82 30       	cpi	r24, 0x02	; 2
     a92:	21 f4       	brne	.+8      	; 0xa9c <__stack+0x19d>
		fsm(current_time); 
     a94:	8f 85       	ldd	r24, Y+15	; 0x0f
     a96:	98 89       	ldd	r25, Y+16	; 0x10
     a98:	0e 94 a1 02 	call	0x542	; 0x542 <_ZN12StepperMotor3fsmEm>
	}

}
     a9c:	60 96       	adiw	r28, 0x10	; 16
     a9e:	0f b6       	in	r0, 0x3f	; 63
     aa0:	f8 94       	cli
     aa2:	de bf       	out	0x3e, r29	; 62
     aa4:	0f be       	out	0x3f, r0	; 63
     aa6:	cd bf       	out	0x3d, r28	; 61
     aa8:	df 91       	pop	r29
     aaa:	cf 91       	pop	r28
     aac:	1f 91       	pop	r17
     aae:	0f 91       	pop	r16
     ab0:	ff 90       	pop	r15
     ab2:	ef 90       	pop	r14
     ab4:	df 90       	pop	r13
     ab6:	cf 90       	pop	r12
     ab8:	bf 90       	pop	r11
     aba:	af 90       	pop	r10
     abc:	9f 90       	pop	r9
     abe:	8f 90       	pop	r8
     ac0:	7f 90       	pop	r7
     ac2:	6f 90       	pop	r6
     ac4:	5f 90       	pop	r5
     ac6:	4f 90       	pop	r4
     ac8:	3f 90       	pop	r3
     aca:	2f 90       	pop	r2
     acc:	08 95       	ret

00000ace <_Z12timer_enablev>:
	timer_counter = 0; 
}

//Reset the counter
void timer_reset(){
	timer_counter = 0; 
     ace:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
     ad2:	e1 e8       	ldi	r30, 0x81	; 129
     ad4:	f0 e0       	ldi	r31, 0x00	; 0
     ad6:	10 82       	st	Z, r1
     ad8:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
     adc:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
     ae0:	88 e1       	ldi	r24, 0x18	; 24
     ae2:	90 e0       	ldi	r25, 0x00	; 0
     ae4:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__DATA_REGION_ORIGIN__+0x29>
     ae8:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__DATA_REGION_ORIGIN__+0x28>
     aec:	80 81       	ld	r24, Z
     aee:	88 60       	ori	r24, 0x08	; 8
     af0:	80 83       	st	Z, r24
     af2:	80 81       	ld	r24, Z
     af4:	83 60       	ori	r24, 0x03	; 3
     af6:	80 83       	st	Z, r24
     af8:	ef e6       	ldi	r30, 0x6F	; 111
     afa:	f0 e0       	ldi	r31, 0x00	; 0
     afc:	80 81       	ld	r24, Z
     afe:	82 60       	ori	r24, 0x02	; 2
     b00:	80 83       	st	Z, r24
     b02:	10 92 8a 01 	sts	0x018A, r1	; 0x80018a <timer_counter>
     b06:	10 92 8b 01 	sts	0x018B, r1	; 0x80018b <timer_counter+0x1>
     b0a:	10 92 8c 01 	sts	0x018C, r1	; 0x80018c <timer_counter+0x2>
     b0e:	10 92 8d 01 	sts	0x018D, r1	; 0x80018d <timer_counter+0x3>
     b12:	08 95       	ret

00000b14 <_Z9timer_10kv>:
}

//Return the elapsed time since the counter was enable 
uint32_t timer_10k(){
	return timer_counter;
     b14:	60 91 8a 01 	lds	r22, 0x018A	; 0x80018a <timer_counter>
     b18:	70 91 8b 01 	lds	r23, 0x018B	; 0x80018b <timer_counter+0x1>
     b1c:	80 91 8c 01 	lds	r24, 0x018C	; 0x80018c <timer_counter+0x2>
     b20:	90 91 8d 01 	lds	r25, 0x018D	; 0x80018d <timer_counter+0x3>
}
     b24:	08 95       	ret

00000b26 <__vector_11>:

//interrupt vector 
ISR (TIMER1_COMPA_vect) {
     b26:	1f 92       	push	r1
     b28:	0f 92       	push	r0
     b2a:	0f b6       	in	r0, 0x3f	; 63
     b2c:	0f 92       	push	r0
     b2e:	11 24       	eor	r1, r1
     b30:	8f 93       	push	r24
     b32:	9f 93       	push	r25
     b34:	af 93       	push	r26
     b36:	bf 93       	push	r27
	timer_counter++;
     b38:	80 91 8a 01 	lds	r24, 0x018A	; 0x80018a <timer_counter>
     b3c:	90 91 8b 01 	lds	r25, 0x018B	; 0x80018b <timer_counter+0x1>
     b40:	a0 91 8c 01 	lds	r26, 0x018C	; 0x80018c <timer_counter+0x2>
     b44:	b0 91 8d 01 	lds	r27, 0x018D	; 0x80018d <timer_counter+0x3>
     b48:	01 96       	adiw	r24, 0x01	; 1
     b4a:	a1 1d       	adc	r26, r1
     b4c:	b1 1d       	adc	r27, r1
     b4e:	80 93 8a 01 	sts	0x018A, r24	; 0x80018a <timer_counter>
     b52:	90 93 8b 01 	sts	0x018B, r25	; 0x80018b <timer_counter+0x1>
     b56:	a0 93 8c 01 	sts	0x018C, r26	; 0x80018c <timer_counter+0x2>
     b5a:	b0 93 8d 01 	sts	0x018D, r27	; 0x80018d <timer_counter+0x3>
     b5e:	bf 91       	pop	r27
     b60:	af 91       	pop	r26
     b62:	9f 91       	pop	r25
     b64:	8f 91       	pop	r24
     b66:	0f 90       	pop	r0
     b68:	0f be       	out	0x3f, r0	; 63
     b6a:	0f 90       	pop	r0
     b6c:	1f 90       	pop	r1
     b6e:	18 95       	reti

00000b70 <_Z12usart_enablej>:
	usart_newline();
}

void usart_sendln(uint16_t number){
	usart_send(number);
	usart_newline();
     b70:	28 e9       	ldi	r18, 0x98	; 152
     b72:	20 93 c1 00 	sts	0x00C1, r18	; 0x8000c1 <__DATA_REGION_ORIGIN__+0x61>
     b76:	26 e0       	ldi	r18, 0x06	; 6
     b78:	20 93 c2 00 	sts	0x00C2, r18	; 0x8000c2 <__DATA_REGION_ORIGIN__+0x62>
     b7c:	bc 01       	movw	r22, r24
     b7e:	80 e0       	ldi	r24, 0x00	; 0
     b80:	90 e0       	ldi	r25, 0x00	; 0
     b82:	0e 94 a0 07 	call	0xf40	; 0xf40 <__floatunsisf>
     b86:	20 e0       	ldi	r18, 0x00	; 0
     b88:	30 e0       	ldi	r19, 0x00	; 0
     b8a:	40 e8       	ldi	r20, 0x80	; 128
     b8c:	51 e4       	ldi	r21, 0x41	; 65
     b8e:	0e 94 2e 08 	call	0x105c	; 0x105c <__mulsf3>
     b92:	9b 01       	movw	r18, r22
     b94:	ac 01       	movw	r20, r24
     b96:	60 e0       	ldi	r22, 0x00	; 0
     b98:	74 e2       	ldi	r23, 0x24	; 36
     b9a:	84 e7       	ldi	r24, 0x74	; 116
     b9c:	9b e4       	ldi	r25, 0x4B	; 75
     b9e:	0e 94 f8 06 	call	0xdf0	; 0xdf0 <__divsf3>
     ba2:	20 e0       	ldi	r18, 0x00	; 0
     ba4:	30 e0       	ldi	r19, 0x00	; 0
     ba6:	40 e8       	ldi	r20, 0x80	; 128
     ba8:	5f e3       	ldi	r21, 0x3F	; 63
     baa:	0e 94 8b 06 	call	0xd16	; 0xd16 <__subsf3>
     bae:	0e 94 71 07 	call	0xee2	; 0xee2 <__fixunssfsi>
     bb2:	70 93 c5 00 	sts	0x00C5, r23	; 0x8000c5 <__DATA_REGION_ORIGIN__+0x65>
     bb6:	60 93 c4 00 	sts	0x00C4, r22	; 0x8000c4 <__DATA_REGION_ORIGIN__+0x64>
     bba:	08 95       	ret

00000bbc <_Z10usart_sendc>:
     bbc:	e0 ec       	ldi	r30, 0xC0	; 192
     bbe:	f0 e0       	ldi	r31, 0x00	; 0
     bc0:	90 81       	ld	r25, Z
     bc2:	95 ff       	sbrs	r25, 5
     bc4:	fd cf       	rjmp	.-6      	; 0xbc0 <_Z10usart_sendc+0x4>
     bc6:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
     bca:	08 95       	ret

00000bcc <_Z13usart_newlinev>:
     bcc:	8a e0       	ldi	r24, 0x0A	; 10
     bce:	0e 94 de 05 	call	0xbbc	; 0xbbc <_Z10usart_sendc>
     bd2:	08 95       	ret

00000bd4 <_Z10usart_sendi>:
     bd4:	0f 93       	push	r16
     bd6:	1f 93       	push	r17
     bd8:	cf 93       	push	r28
     bda:	df 93       	push	r29
     bdc:	cd b7       	in	r28, 0x3d	; 61
     bde:	de b7       	in	r29, 0x3e	; 62
     be0:	2a 97       	sbiw	r28, 0x0a	; 10
     be2:	0f b6       	in	r0, 0x3f	; 63
     be4:	f8 94       	cli
     be6:	de bf       	out	0x3e, r29	; 62
     be8:	0f be       	out	0x3f, r0	; 63
     bea:	cd bf       	out	0x3d, r28	; 61
     bec:	4a e0       	ldi	r20, 0x0A	; 10
     bee:	be 01       	movw	r22, r28
     bf0:	6f 5f       	subi	r22, 0xFF	; 255
     bf2:	7f 4f       	sbci	r23, 0xFF	; 255
     bf4:	0e 94 4b 09 	call	0x1296	; 0x1296 <__itoa_ncheck>
     bf8:	89 81       	ldd	r24, Y+1	; 0x01
     bfa:	88 23       	and	r24, r24
     bfc:	51 f0       	breq	.+20     	; 0xc12 <_Z10usart_sendi+0x3e>
     bfe:	8e 01       	movw	r16, r28
     c00:	0e 5f       	subi	r16, 0xFE	; 254
     c02:	1f 4f       	sbci	r17, 0xFF	; 255
     c04:	0e 94 de 05 	call	0xbbc	; 0xbbc <_Z10usart_sendc>
     c08:	f8 01       	movw	r30, r16
     c0a:	81 91       	ld	r24, Z+
     c0c:	8f 01       	movw	r16, r30
     c0e:	81 11       	cpse	r24, r1
     c10:	f9 cf       	rjmp	.-14     	; 0xc04 <_Z10usart_sendi+0x30>
     c12:	2a 96       	adiw	r28, 0x0a	; 10
     c14:	0f b6       	in	r0, 0x3f	; 63
     c16:	f8 94       	cli
     c18:	de bf       	out	0x3e, r29	; 62
     c1a:	0f be       	out	0x3f, r0	; 63
     c1c:	cd bf       	out	0x3d, r28	; 61
     c1e:	df 91       	pop	r29
     c20:	cf 91       	pop	r28
     c22:	1f 91       	pop	r17
     c24:	0f 91       	pop	r16
     c26:	08 95       	ret

00000c28 <_Z10usart_sendl>:
     c28:	0f 93       	push	r16
     c2a:	1f 93       	push	r17
     c2c:	cf 93       	push	r28
     c2e:	df 93       	push	r29
     c30:	cd b7       	in	r28, 0x3d	; 61
     c32:	de b7       	in	r29, 0x3e	; 62
     c34:	2b 97       	sbiw	r28, 0x0b	; 11
     c36:	0f b6       	in	r0, 0x3f	; 63
     c38:	f8 94       	cli
     c3a:	de bf       	out	0x3e, r29	; 62
     c3c:	0f be       	out	0x3f, r0	; 63
     c3e:	cd bf       	out	0x3d, r28	; 61
     c40:	2a e0       	ldi	r18, 0x0A	; 10
     c42:	ae 01       	movw	r20, r28
     c44:	4f 5f       	subi	r20, 0xFF	; 255
     c46:	5f 4f       	sbci	r21, 0xFF	; 255
     c48:	0e 94 56 09 	call	0x12ac	; 0x12ac <__ltoa_ncheck>
     c4c:	89 81       	ldd	r24, Y+1	; 0x01
     c4e:	88 23       	and	r24, r24
     c50:	51 f0       	breq	.+20     	; 0xc66 <_Z10usart_sendl+0x3e>
     c52:	8e 01       	movw	r16, r28
     c54:	0e 5f       	subi	r16, 0xFE	; 254
     c56:	1f 4f       	sbci	r17, 0xFF	; 255
     c58:	0e 94 de 05 	call	0xbbc	; 0xbbc <_Z10usart_sendc>
     c5c:	f8 01       	movw	r30, r16
     c5e:	81 91       	ld	r24, Z+
     c60:	8f 01       	movw	r16, r30
     c62:	81 11       	cpse	r24, r1
     c64:	f9 cf       	rjmp	.-14     	; 0xc58 <_Z10usart_sendl+0x30>
     c66:	2b 96       	adiw	r28, 0x0b	; 11
     c68:	0f b6       	in	r0, 0x3f	; 63
     c6a:	f8 94       	cli
     c6c:	de bf       	out	0x3e, r29	; 62
     c6e:	0f be       	out	0x3f, r0	; 63
     c70:	cd bf       	out	0x3d, r28	; 61
     c72:	df 91       	pop	r29
     c74:	cf 91       	pop	r28
     c76:	1f 91       	pop	r17
     c78:	0f 91       	pop	r16
     c7a:	08 95       	ret

00000c7c <_Z10usart_sendm>:
     c7c:	0f 93       	push	r16
     c7e:	1f 93       	push	r17
     c80:	cf 93       	push	r28
     c82:	df 93       	push	r29
     c84:	cd b7       	in	r28, 0x3d	; 61
     c86:	de b7       	in	r29, 0x3e	; 62
     c88:	2b 97       	sbiw	r28, 0x0b	; 11
     c8a:	0f b6       	in	r0, 0x3f	; 63
     c8c:	f8 94       	cli
     c8e:	de bf       	out	0x3e, r29	; 62
     c90:	0f be       	out	0x3f, r0	; 63
     c92:	cd bf       	out	0x3d, r28	; 61
     c94:	2a e0       	ldi	r18, 0x0A	; 10
     c96:	ae 01       	movw	r20, r28
     c98:	4f 5f       	subi	r20, 0xFF	; 255
     c9a:	5f 4f       	sbci	r21, 0xFF	; 255
     c9c:	0e 94 65 09 	call	0x12ca	; 0x12ca <__ultoa_ncheck>
     ca0:	89 81       	ldd	r24, Y+1	; 0x01
     ca2:	88 23       	and	r24, r24
     ca4:	51 f0       	breq	.+20     	; 0xcba <_Z10usart_sendm+0x3e>
     ca6:	8e 01       	movw	r16, r28
     ca8:	0e 5f       	subi	r16, 0xFE	; 254
     caa:	1f 4f       	sbci	r17, 0xFF	; 255
     cac:	0e 94 de 05 	call	0xbbc	; 0xbbc <_Z10usart_sendc>
     cb0:	f8 01       	movw	r30, r16
     cb2:	81 91       	ld	r24, Z+
     cb4:	8f 01       	movw	r16, r30
     cb6:	81 11       	cpse	r24, r1
     cb8:	f9 cf       	rjmp	.-14     	; 0xcac <_Z10usart_sendm+0x30>
     cba:	2b 96       	adiw	r28, 0x0b	; 11
     cbc:	0f b6       	in	r0, 0x3f	; 63
     cbe:	f8 94       	cli
     cc0:	de bf       	out	0x3e, r29	; 62
     cc2:	0f be       	out	0x3f, r0	; 63
     cc4:	cd bf       	out	0x3d, r28	; 61
     cc6:	df 91       	pop	r29
     cc8:	cf 91       	pop	r28
     cca:	1f 91       	pop	r17
     ccc:	0f 91       	pop	r16
     cce:	08 95       	ret

00000cd0 <_Z10usart_sendPc>:
     cd0:	cf 93       	push	r28
     cd2:	df 93       	push	r29
     cd4:	ec 01       	movw	r28, r24
     cd6:	88 81       	ld	r24, Y
     cd8:	88 23       	and	r24, r24
     cda:	31 f0       	breq	.+12     	; 0xce8 <_Z10usart_sendPc+0x18>
     cdc:	21 96       	adiw	r28, 0x01	; 1
     cde:	0e 94 de 05 	call	0xbbc	; 0xbbc <_Z10usart_sendc>
     ce2:	89 91       	ld	r24, Y+
     ce4:	81 11       	cpse	r24, r1
     ce6:	fb cf       	rjmp	.-10     	; 0xcde <_Z10usart_sendPc+0xe>
     ce8:	df 91       	pop	r29
     cea:	cf 91       	pop	r28
     cec:	08 95       	ret

00000cee <_Z12usart_sendlni>:
     cee:	0e 94 ea 05 	call	0xbd4	; 0xbd4 <_Z10usart_sendi>
     cf2:	0e 94 e6 05 	call	0xbcc	; 0xbcc <_Z13usart_newlinev>
     cf6:	08 95       	ret

00000cf8 <_Z12usart_sendlnPc>:
     cf8:	0e 94 68 06 	call	0xcd0	; 0xcd0 <_Z10usart_sendPc>
     cfc:	0e 94 e6 05 	call	0xbcc	; 0xbcc <_Z13usart_newlinev>
     d00:	08 95       	ret

00000d02 <_Z12usart_sendlnm>:
     d02:	0e 94 3e 06 	call	0xc7c	; 0xc7c <_Z10usart_sendm>
     d06:	0e 94 e6 05 	call	0xbcc	; 0xbcc <_Z13usart_newlinev>
     d0a:	08 95       	ret

00000d0c <_Z12usart_sendlnl>:
}

void usart_sendln(int32_t number){
	usart_send(number);
     d0c:	0e 94 14 06 	call	0xc28	; 0xc28 <_Z10usart_sendl>
	usart_newline();
     d10:	0e 94 e6 05 	call	0xbcc	; 0xbcc <_Z13usart_newlinev>
     d14:	08 95       	ret

00000d16 <__subsf3>:
     d16:	50 58       	subi	r21, 0x80	; 128

00000d18 <__addsf3>:
     d18:	bb 27       	eor	r27, r27
     d1a:	aa 27       	eor	r26, r26
     d1c:	0e 94 a3 06 	call	0xd46	; 0xd46 <__addsf3x>
     d20:	0c 94 f4 07 	jmp	0xfe8	; 0xfe8 <__fp_round>
     d24:	0e 94 e6 07 	call	0xfcc	; 0xfcc <__fp_pscA>
     d28:	38 f0       	brcs	.+14     	; 0xd38 <__addsf3+0x20>
     d2a:	0e 94 ed 07 	call	0xfda	; 0xfda <__fp_pscB>
     d2e:	20 f0       	brcs	.+8      	; 0xd38 <__addsf3+0x20>
     d30:	39 f4       	brne	.+14     	; 0xd40 <__addsf3+0x28>
     d32:	9f 3f       	cpi	r25, 0xFF	; 255
     d34:	19 f4       	brne	.+6      	; 0xd3c <__addsf3+0x24>
     d36:	26 f4       	brtc	.+8      	; 0xd40 <__addsf3+0x28>
     d38:	0c 94 e3 07 	jmp	0xfc6	; 0xfc6 <__fp_nan>
     d3c:	0e f4       	brtc	.+2      	; 0xd40 <__addsf3+0x28>
     d3e:	e0 95       	com	r30
     d40:	e7 fb       	bst	r30, 7
     d42:	0c 94 dd 07 	jmp	0xfba	; 0xfba <__fp_inf>

00000d46 <__addsf3x>:
     d46:	e9 2f       	mov	r30, r25
     d48:	0e 94 05 08 	call	0x100a	; 0x100a <__fp_split3>
     d4c:	58 f3       	brcs	.-42     	; 0xd24 <__addsf3+0xc>
     d4e:	ba 17       	cp	r27, r26
     d50:	62 07       	cpc	r22, r18
     d52:	73 07       	cpc	r23, r19
     d54:	84 07       	cpc	r24, r20
     d56:	95 07       	cpc	r25, r21
     d58:	20 f0       	brcs	.+8      	; 0xd62 <__addsf3x+0x1c>
     d5a:	79 f4       	brne	.+30     	; 0xd7a <__addsf3x+0x34>
     d5c:	a6 f5       	brtc	.+104    	; 0xdc6 <__addsf3x+0x80>
     d5e:	0c 94 27 08 	jmp	0x104e	; 0x104e <__fp_zero>
     d62:	0e f4       	brtc	.+2      	; 0xd66 <__addsf3x+0x20>
     d64:	e0 95       	com	r30
     d66:	0b 2e       	mov	r0, r27
     d68:	ba 2f       	mov	r27, r26
     d6a:	a0 2d       	mov	r26, r0
     d6c:	0b 01       	movw	r0, r22
     d6e:	b9 01       	movw	r22, r18
     d70:	90 01       	movw	r18, r0
     d72:	0c 01       	movw	r0, r24
     d74:	ca 01       	movw	r24, r20
     d76:	a0 01       	movw	r20, r0
     d78:	11 24       	eor	r1, r1
     d7a:	ff 27       	eor	r31, r31
     d7c:	59 1b       	sub	r21, r25
     d7e:	99 f0       	breq	.+38     	; 0xda6 <__addsf3x+0x60>
     d80:	59 3f       	cpi	r21, 0xF9	; 249
     d82:	50 f4       	brcc	.+20     	; 0xd98 <__addsf3x+0x52>
     d84:	50 3e       	cpi	r21, 0xE0	; 224
     d86:	68 f1       	brcs	.+90     	; 0xde2 <__addsf3x+0x9c>
     d88:	1a 16       	cp	r1, r26
     d8a:	f0 40       	sbci	r31, 0x00	; 0
     d8c:	a2 2f       	mov	r26, r18
     d8e:	23 2f       	mov	r18, r19
     d90:	34 2f       	mov	r19, r20
     d92:	44 27       	eor	r20, r20
     d94:	58 5f       	subi	r21, 0xF8	; 248
     d96:	f3 cf       	rjmp	.-26     	; 0xd7e <__addsf3x+0x38>
     d98:	46 95       	lsr	r20
     d9a:	37 95       	ror	r19
     d9c:	27 95       	ror	r18
     d9e:	a7 95       	ror	r26
     da0:	f0 40       	sbci	r31, 0x00	; 0
     da2:	53 95       	inc	r21
     da4:	c9 f7       	brne	.-14     	; 0xd98 <__addsf3x+0x52>
     da6:	7e f4       	brtc	.+30     	; 0xdc6 <__addsf3x+0x80>
     da8:	1f 16       	cp	r1, r31
     daa:	ba 0b       	sbc	r27, r26
     dac:	62 0b       	sbc	r22, r18
     dae:	73 0b       	sbc	r23, r19
     db0:	84 0b       	sbc	r24, r20
     db2:	ba f0       	brmi	.+46     	; 0xde2 <__addsf3x+0x9c>
     db4:	91 50       	subi	r25, 0x01	; 1
     db6:	a1 f0       	breq	.+40     	; 0xde0 <__addsf3x+0x9a>
     db8:	ff 0f       	add	r31, r31
     dba:	bb 1f       	adc	r27, r27
     dbc:	66 1f       	adc	r22, r22
     dbe:	77 1f       	adc	r23, r23
     dc0:	88 1f       	adc	r24, r24
     dc2:	c2 f7       	brpl	.-16     	; 0xdb4 <__addsf3x+0x6e>
     dc4:	0e c0       	rjmp	.+28     	; 0xde2 <__addsf3x+0x9c>
     dc6:	ba 0f       	add	r27, r26
     dc8:	62 1f       	adc	r22, r18
     dca:	73 1f       	adc	r23, r19
     dcc:	84 1f       	adc	r24, r20
     dce:	48 f4       	brcc	.+18     	; 0xde2 <__addsf3x+0x9c>
     dd0:	87 95       	ror	r24
     dd2:	77 95       	ror	r23
     dd4:	67 95       	ror	r22
     dd6:	b7 95       	ror	r27
     dd8:	f7 95       	ror	r31
     dda:	9e 3f       	cpi	r25, 0xFE	; 254
     ddc:	08 f0       	brcs	.+2      	; 0xde0 <__addsf3x+0x9a>
     dde:	b0 cf       	rjmp	.-160    	; 0xd40 <__addsf3+0x28>
     de0:	93 95       	inc	r25
     de2:	88 0f       	add	r24, r24
     de4:	08 f0       	brcs	.+2      	; 0xde8 <__addsf3x+0xa2>
     de6:	99 27       	eor	r25, r25
     de8:	ee 0f       	add	r30, r30
     dea:	97 95       	ror	r25
     dec:	87 95       	ror	r24
     dee:	08 95       	ret

00000df0 <__divsf3>:
     df0:	0e 94 0c 07 	call	0xe18	; 0xe18 <__divsf3x>
     df4:	0c 94 f4 07 	jmp	0xfe8	; 0xfe8 <__fp_round>
     df8:	0e 94 ed 07 	call	0xfda	; 0xfda <__fp_pscB>
     dfc:	58 f0       	brcs	.+22     	; 0xe14 <__divsf3+0x24>
     dfe:	0e 94 e6 07 	call	0xfcc	; 0xfcc <__fp_pscA>
     e02:	40 f0       	brcs	.+16     	; 0xe14 <__divsf3+0x24>
     e04:	29 f4       	brne	.+10     	; 0xe10 <__divsf3+0x20>
     e06:	5f 3f       	cpi	r21, 0xFF	; 255
     e08:	29 f0       	breq	.+10     	; 0xe14 <__divsf3+0x24>
     e0a:	0c 94 dd 07 	jmp	0xfba	; 0xfba <__fp_inf>
     e0e:	51 11       	cpse	r21, r1
     e10:	0c 94 28 08 	jmp	0x1050	; 0x1050 <__fp_szero>
     e14:	0c 94 e3 07 	jmp	0xfc6	; 0xfc6 <__fp_nan>

00000e18 <__divsf3x>:
     e18:	0e 94 05 08 	call	0x100a	; 0x100a <__fp_split3>
     e1c:	68 f3       	brcs	.-38     	; 0xdf8 <__divsf3+0x8>

00000e1e <__divsf3_pse>:
     e1e:	99 23       	and	r25, r25
     e20:	b1 f3       	breq	.-20     	; 0xe0e <__divsf3+0x1e>
     e22:	55 23       	and	r21, r21
     e24:	91 f3       	breq	.-28     	; 0xe0a <__divsf3+0x1a>
     e26:	95 1b       	sub	r25, r21
     e28:	55 0b       	sbc	r21, r21
     e2a:	bb 27       	eor	r27, r27
     e2c:	aa 27       	eor	r26, r26
     e2e:	62 17       	cp	r22, r18
     e30:	73 07       	cpc	r23, r19
     e32:	84 07       	cpc	r24, r20
     e34:	38 f0       	brcs	.+14     	; 0xe44 <__divsf3_pse+0x26>
     e36:	9f 5f       	subi	r25, 0xFF	; 255
     e38:	5f 4f       	sbci	r21, 0xFF	; 255
     e3a:	22 0f       	add	r18, r18
     e3c:	33 1f       	adc	r19, r19
     e3e:	44 1f       	adc	r20, r20
     e40:	aa 1f       	adc	r26, r26
     e42:	a9 f3       	breq	.-22     	; 0xe2e <__divsf3_pse+0x10>
     e44:	35 d0       	rcall	.+106    	; 0xeb0 <__divsf3_pse+0x92>
     e46:	0e 2e       	mov	r0, r30
     e48:	3a f0       	brmi	.+14     	; 0xe58 <__divsf3_pse+0x3a>
     e4a:	e0 e8       	ldi	r30, 0x80	; 128
     e4c:	32 d0       	rcall	.+100    	; 0xeb2 <__divsf3_pse+0x94>
     e4e:	91 50       	subi	r25, 0x01	; 1
     e50:	50 40       	sbci	r21, 0x00	; 0
     e52:	e6 95       	lsr	r30
     e54:	00 1c       	adc	r0, r0
     e56:	ca f7       	brpl	.-14     	; 0xe4a <__divsf3_pse+0x2c>
     e58:	2b d0       	rcall	.+86     	; 0xeb0 <__divsf3_pse+0x92>
     e5a:	fe 2f       	mov	r31, r30
     e5c:	29 d0       	rcall	.+82     	; 0xeb0 <__divsf3_pse+0x92>
     e5e:	66 0f       	add	r22, r22
     e60:	77 1f       	adc	r23, r23
     e62:	88 1f       	adc	r24, r24
     e64:	bb 1f       	adc	r27, r27
     e66:	26 17       	cp	r18, r22
     e68:	37 07       	cpc	r19, r23
     e6a:	48 07       	cpc	r20, r24
     e6c:	ab 07       	cpc	r26, r27
     e6e:	b0 e8       	ldi	r27, 0x80	; 128
     e70:	09 f0       	breq	.+2      	; 0xe74 <__divsf3_pse+0x56>
     e72:	bb 0b       	sbc	r27, r27
     e74:	80 2d       	mov	r24, r0
     e76:	bf 01       	movw	r22, r30
     e78:	ff 27       	eor	r31, r31
     e7a:	93 58       	subi	r25, 0x83	; 131
     e7c:	5f 4f       	sbci	r21, 0xFF	; 255
     e7e:	3a f0       	brmi	.+14     	; 0xe8e <__divsf3_pse+0x70>
     e80:	9e 3f       	cpi	r25, 0xFE	; 254
     e82:	51 05       	cpc	r21, r1
     e84:	78 f0       	brcs	.+30     	; 0xea4 <__divsf3_pse+0x86>
     e86:	0c 94 dd 07 	jmp	0xfba	; 0xfba <__fp_inf>
     e8a:	0c 94 28 08 	jmp	0x1050	; 0x1050 <__fp_szero>
     e8e:	5f 3f       	cpi	r21, 0xFF	; 255
     e90:	e4 f3       	brlt	.-8      	; 0xe8a <__divsf3_pse+0x6c>
     e92:	98 3e       	cpi	r25, 0xE8	; 232
     e94:	d4 f3       	brlt	.-12     	; 0xe8a <__divsf3_pse+0x6c>
     e96:	86 95       	lsr	r24
     e98:	77 95       	ror	r23
     e9a:	67 95       	ror	r22
     e9c:	b7 95       	ror	r27
     e9e:	f7 95       	ror	r31
     ea0:	9f 5f       	subi	r25, 0xFF	; 255
     ea2:	c9 f7       	brne	.-14     	; 0xe96 <__divsf3_pse+0x78>
     ea4:	88 0f       	add	r24, r24
     ea6:	91 1d       	adc	r25, r1
     ea8:	96 95       	lsr	r25
     eaa:	87 95       	ror	r24
     eac:	97 f9       	bld	r25, 7
     eae:	08 95       	ret
     eb0:	e1 e0       	ldi	r30, 0x01	; 1
     eb2:	66 0f       	add	r22, r22
     eb4:	77 1f       	adc	r23, r23
     eb6:	88 1f       	adc	r24, r24
     eb8:	bb 1f       	adc	r27, r27
     eba:	62 17       	cp	r22, r18
     ebc:	73 07       	cpc	r23, r19
     ebe:	84 07       	cpc	r24, r20
     ec0:	ba 07       	cpc	r27, r26
     ec2:	20 f0       	brcs	.+8      	; 0xecc <__divsf3_pse+0xae>
     ec4:	62 1b       	sub	r22, r18
     ec6:	73 0b       	sbc	r23, r19
     ec8:	84 0b       	sbc	r24, r20
     eca:	ba 0b       	sbc	r27, r26
     ecc:	ee 1f       	adc	r30, r30
     ece:	88 f7       	brcc	.-30     	; 0xeb2 <__divsf3_pse+0x94>
     ed0:	e0 95       	com	r30
     ed2:	08 95       	ret

00000ed4 <__fixsfsi>:
     ed4:	0e 94 71 07 	call	0xee2	; 0xee2 <__fixunssfsi>
     ed8:	68 94       	set
     eda:	b1 11       	cpse	r27, r1
     edc:	0c 94 28 08 	jmp	0x1050	; 0x1050 <__fp_szero>
     ee0:	08 95       	ret

00000ee2 <__fixunssfsi>:
     ee2:	0e 94 0d 08 	call	0x101a	; 0x101a <__fp_splitA>
     ee6:	88 f0       	brcs	.+34     	; 0xf0a <__fixunssfsi+0x28>
     ee8:	9f 57       	subi	r25, 0x7F	; 127
     eea:	98 f0       	brcs	.+38     	; 0xf12 <__fixunssfsi+0x30>
     eec:	b9 2f       	mov	r27, r25
     eee:	99 27       	eor	r25, r25
     ef0:	b7 51       	subi	r27, 0x17	; 23
     ef2:	b0 f0       	brcs	.+44     	; 0xf20 <__fixunssfsi+0x3e>
     ef4:	e1 f0       	breq	.+56     	; 0xf2e <__fixunssfsi+0x4c>
     ef6:	66 0f       	add	r22, r22
     ef8:	77 1f       	adc	r23, r23
     efa:	88 1f       	adc	r24, r24
     efc:	99 1f       	adc	r25, r25
     efe:	1a f0       	brmi	.+6      	; 0xf06 <__fixunssfsi+0x24>
     f00:	ba 95       	dec	r27
     f02:	c9 f7       	brne	.-14     	; 0xef6 <__fixunssfsi+0x14>
     f04:	14 c0       	rjmp	.+40     	; 0xf2e <__fixunssfsi+0x4c>
     f06:	b1 30       	cpi	r27, 0x01	; 1
     f08:	91 f0       	breq	.+36     	; 0xf2e <__fixunssfsi+0x4c>
     f0a:	0e 94 27 08 	call	0x104e	; 0x104e <__fp_zero>
     f0e:	b1 e0       	ldi	r27, 0x01	; 1
     f10:	08 95       	ret
     f12:	0c 94 27 08 	jmp	0x104e	; 0x104e <__fp_zero>
     f16:	67 2f       	mov	r22, r23
     f18:	78 2f       	mov	r23, r24
     f1a:	88 27       	eor	r24, r24
     f1c:	b8 5f       	subi	r27, 0xF8	; 248
     f1e:	39 f0       	breq	.+14     	; 0xf2e <__fixunssfsi+0x4c>
     f20:	b9 3f       	cpi	r27, 0xF9	; 249
     f22:	cc f3       	brlt	.-14     	; 0xf16 <__fixunssfsi+0x34>
     f24:	86 95       	lsr	r24
     f26:	77 95       	ror	r23
     f28:	67 95       	ror	r22
     f2a:	b3 95       	inc	r27
     f2c:	d9 f7       	brne	.-10     	; 0xf24 <__fixunssfsi+0x42>
     f2e:	3e f4       	brtc	.+14     	; 0xf3e <__fixunssfsi+0x5c>
     f30:	90 95       	com	r25
     f32:	80 95       	com	r24
     f34:	70 95       	com	r23
     f36:	61 95       	neg	r22
     f38:	7f 4f       	sbci	r23, 0xFF	; 255
     f3a:	8f 4f       	sbci	r24, 0xFF	; 255
     f3c:	9f 4f       	sbci	r25, 0xFF	; 255
     f3e:	08 95       	ret

00000f40 <__floatunsisf>:
     f40:	e8 94       	clt
     f42:	09 c0       	rjmp	.+18     	; 0xf56 <__floatsisf+0x12>

00000f44 <__floatsisf>:
     f44:	97 fb       	bst	r25, 7
     f46:	3e f4       	brtc	.+14     	; 0xf56 <__floatsisf+0x12>
     f48:	90 95       	com	r25
     f4a:	80 95       	com	r24
     f4c:	70 95       	com	r23
     f4e:	61 95       	neg	r22
     f50:	7f 4f       	sbci	r23, 0xFF	; 255
     f52:	8f 4f       	sbci	r24, 0xFF	; 255
     f54:	9f 4f       	sbci	r25, 0xFF	; 255
     f56:	99 23       	and	r25, r25
     f58:	a9 f0       	breq	.+42     	; 0xf84 <__floatsisf+0x40>
     f5a:	f9 2f       	mov	r31, r25
     f5c:	96 e9       	ldi	r25, 0x96	; 150
     f5e:	bb 27       	eor	r27, r27
     f60:	93 95       	inc	r25
     f62:	f6 95       	lsr	r31
     f64:	87 95       	ror	r24
     f66:	77 95       	ror	r23
     f68:	67 95       	ror	r22
     f6a:	b7 95       	ror	r27
     f6c:	f1 11       	cpse	r31, r1
     f6e:	f8 cf       	rjmp	.-16     	; 0xf60 <__floatsisf+0x1c>
     f70:	fa f4       	brpl	.+62     	; 0xfb0 <__floatsisf+0x6c>
     f72:	bb 0f       	add	r27, r27
     f74:	11 f4       	brne	.+4      	; 0xf7a <__floatsisf+0x36>
     f76:	60 ff       	sbrs	r22, 0
     f78:	1b c0       	rjmp	.+54     	; 0xfb0 <__floatsisf+0x6c>
     f7a:	6f 5f       	subi	r22, 0xFF	; 255
     f7c:	7f 4f       	sbci	r23, 0xFF	; 255
     f7e:	8f 4f       	sbci	r24, 0xFF	; 255
     f80:	9f 4f       	sbci	r25, 0xFF	; 255
     f82:	16 c0       	rjmp	.+44     	; 0xfb0 <__floatsisf+0x6c>
     f84:	88 23       	and	r24, r24
     f86:	11 f0       	breq	.+4      	; 0xf8c <__floatsisf+0x48>
     f88:	96 e9       	ldi	r25, 0x96	; 150
     f8a:	11 c0       	rjmp	.+34     	; 0xfae <__floatsisf+0x6a>
     f8c:	77 23       	and	r23, r23
     f8e:	21 f0       	breq	.+8      	; 0xf98 <__floatsisf+0x54>
     f90:	9e e8       	ldi	r25, 0x8E	; 142
     f92:	87 2f       	mov	r24, r23
     f94:	76 2f       	mov	r23, r22
     f96:	05 c0       	rjmp	.+10     	; 0xfa2 <__floatsisf+0x5e>
     f98:	66 23       	and	r22, r22
     f9a:	71 f0       	breq	.+28     	; 0xfb8 <__floatsisf+0x74>
     f9c:	96 e8       	ldi	r25, 0x86	; 134
     f9e:	86 2f       	mov	r24, r22
     fa0:	70 e0       	ldi	r23, 0x00	; 0
     fa2:	60 e0       	ldi	r22, 0x00	; 0
     fa4:	2a f0       	brmi	.+10     	; 0xfb0 <__floatsisf+0x6c>
     fa6:	9a 95       	dec	r25
     fa8:	66 0f       	add	r22, r22
     faa:	77 1f       	adc	r23, r23
     fac:	88 1f       	adc	r24, r24
     fae:	da f7       	brpl	.-10     	; 0xfa6 <__floatsisf+0x62>
     fb0:	88 0f       	add	r24, r24
     fb2:	96 95       	lsr	r25
     fb4:	87 95       	ror	r24
     fb6:	97 f9       	bld	r25, 7
     fb8:	08 95       	ret

00000fba <__fp_inf>:
     fba:	97 f9       	bld	r25, 7
     fbc:	9f 67       	ori	r25, 0x7F	; 127
     fbe:	80 e8       	ldi	r24, 0x80	; 128
     fc0:	70 e0       	ldi	r23, 0x00	; 0
     fc2:	60 e0       	ldi	r22, 0x00	; 0
     fc4:	08 95       	ret

00000fc6 <__fp_nan>:
     fc6:	9f ef       	ldi	r25, 0xFF	; 255
     fc8:	80 ec       	ldi	r24, 0xC0	; 192
     fca:	08 95       	ret

00000fcc <__fp_pscA>:
     fcc:	00 24       	eor	r0, r0
     fce:	0a 94       	dec	r0
     fd0:	16 16       	cp	r1, r22
     fd2:	17 06       	cpc	r1, r23
     fd4:	18 06       	cpc	r1, r24
     fd6:	09 06       	cpc	r0, r25
     fd8:	08 95       	ret

00000fda <__fp_pscB>:
     fda:	00 24       	eor	r0, r0
     fdc:	0a 94       	dec	r0
     fde:	12 16       	cp	r1, r18
     fe0:	13 06       	cpc	r1, r19
     fe2:	14 06       	cpc	r1, r20
     fe4:	05 06       	cpc	r0, r21
     fe6:	08 95       	ret

00000fe8 <__fp_round>:
     fe8:	09 2e       	mov	r0, r25
     fea:	03 94       	inc	r0
     fec:	00 0c       	add	r0, r0
     fee:	11 f4       	brne	.+4      	; 0xff4 <__fp_round+0xc>
     ff0:	88 23       	and	r24, r24
     ff2:	52 f0       	brmi	.+20     	; 0x1008 <__fp_round+0x20>
     ff4:	bb 0f       	add	r27, r27
     ff6:	40 f4       	brcc	.+16     	; 0x1008 <__fp_round+0x20>
     ff8:	bf 2b       	or	r27, r31
     ffa:	11 f4       	brne	.+4      	; 0x1000 <__fp_round+0x18>
     ffc:	60 ff       	sbrs	r22, 0
     ffe:	04 c0       	rjmp	.+8      	; 0x1008 <__fp_round+0x20>
    1000:	6f 5f       	subi	r22, 0xFF	; 255
    1002:	7f 4f       	sbci	r23, 0xFF	; 255
    1004:	8f 4f       	sbci	r24, 0xFF	; 255
    1006:	9f 4f       	sbci	r25, 0xFF	; 255
    1008:	08 95       	ret

0000100a <__fp_split3>:
    100a:	57 fd       	sbrc	r21, 7
    100c:	90 58       	subi	r25, 0x80	; 128
    100e:	44 0f       	add	r20, r20
    1010:	55 1f       	adc	r21, r21
    1012:	59 f0       	breq	.+22     	; 0x102a <__fp_splitA+0x10>
    1014:	5f 3f       	cpi	r21, 0xFF	; 255
    1016:	71 f0       	breq	.+28     	; 0x1034 <__fp_splitA+0x1a>
    1018:	47 95       	ror	r20

0000101a <__fp_splitA>:
    101a:	88 0f       	add	r24, r24
    101c:	97 fb       	bst	r25, 7
    101e:	99 1f       	adc	r25, r25
    1020:	61 f0       	breq	.+24     	; 0x103a <__fp_splitA+0x20>
    1022:	9f 3f       	cpi	r25, 0xFF	; 255
    1024:	79 f0       	breq	.+30     	; 0x1044 <__fp_splitA+0x2a>
    1026:	87 95       	ror	r24
    1028:	08 95       	ret
    102a:	12 16       	cp	r1, r18
    102c:	13 06       	cpc	r1, r19
    102e:	14 06       	cpc	r1, r20
    1030:	55 1f       	adc	r21, r21
    1032:	f2 cf       	rjmp	.-28     	; 0x1018 <__fp_split3+0xe>
    1034:	46 95       	lsr	r20
    1036:	f1 df       	rcall	.-30     	; 0x101a <__fp_splitA>
    1038:	08 c0       	rjmp	.+16     	; 0x104a <__fp_splitA+0x30>
    103a:	16 16       	cp	r1, r22
    103c:	17 06       	cpc	r1, r23
    103e:	18 06       	cpc	r1, r24
    1040:	99 1f       	adc	r25, r25
    1042:	f1 cf       	rjmp	.-30     	; 0x1026 <__fp_splitA+0xc>
    1044:	86 95       	lsr	r24
    1046:	71 05       	cpc	r23, r1
    1048:	61 05       	cpc	r22, r1
    104a:	08 94       	sec
    104c:	08 95       	ret

0000104e <__fp_zero>:
    104e:	e8 94       	clt

00001050 <__fp_szero>:
    1050:	bb 27       	eor	r27, r27
    1052:	66 27       	eor	r22, r22
    1054:	77 27       	eor	r23, r23
    1056:	cb 01       	movw	r24, r22
    1058:	97 f9       	bld	r25, 7
    105a:	08 95       	ret

0000105c <__mulsf3>:
    105c:	0e 94 41 08 	call	0x1082	; 0x1082 <__mulsf3x>
    1060:	0c 94 f4 07 	jmp	0xfe8	; 0xfe8 <__fp_round>
    1064:	0e 94 e6 07 	call	0xfcc	; 0xfcc <__fp_pscA>
    1068:	38 f0       	brcs	.+14     	; 0x1078 <__mulsf3+0x1c>
    106a:	0e 94 ed 07 	call	0xfda	; 0xfda <__fp_pscB>
    106e:	20 f0       	brcs	.+8      	; 0x1078 <__mulsf3+0x1c>
    1070:	95 23       	and	r25, r21
    1072:	11 f0       	breq	.+4      	; 0x1078 <__mulsf3+0x1c>
    1074:	0c 94 dd 07 	jmp	0xfba	; 0xfba <__fp_inf>
    1078:	0c 94 e3 07 	jmp	0xfc6	; 0xfc6 <__fp_nan>
    107c:	11 24       	eor	r1, r1
    107e:	0c 94 28 08 	jmp	0x1050	; 0x1050 <__fp_szero>

00001082 <__mulsf3x>:
    1082:	0e 94 05 08 	call	0x100a	; 0x100a <__fp_split3>
    1086:	70 f3       	brcs	.-36     	; 0x1064 <__mulsf3+0x8>

00001088 <__mulsf3_pse>:
    1088:	95 9f       	mul	r25, r21
    108a:	c1 f3       	breq	.-16     	; 0x107c <__mulsf3+0x20>
    108c:	95 0f       	add	r25, r21
    108e:	50 e0       	ldi	r21, 0x00	; 0
    1090:	55 1f       	adc	r21, r21
    1092:	62 9f       	mul	r22, r18
    1094:	f0 01       	movw	r30, r0
    1096:	72 9f       	mul	r23, r18
    1098:	bb 27       	eor	r27, r27
    109a:	f0 0d       	add	r31, r0
    109c:	b1 1d       	adc	r27, r1
    109e:	63 9f       	mul	r22, r19
    10a0:	aa 27       	eor	r26, r26
    10a2:	f0 0d       	add	r31, r0
    10a4:	b1 1d       	adc	r27, r1
    10a6:	aa 1f       	adc	r26, r26
    10a8:	64 9f       	mul	r22, r20
    10aa:	66 27       	eor	r22, r22
    10ac:	b0 0d       	add	r27, r0
    10ae:	a1 1d       	adc	r26, r1
    10b0:	66 1f       	adc	r22, r22
    10b2:	82 9f       	mul	r24, r18
    10b4:	22 27       	eor	r18, r18
    10b6:	b0 0d       	add	r27, r0
    10b8:	a1 1d       	adc	r26, r1
    10ba:	62 1f       	adc	r22, r18
    10bc:	73 9f       	mul	r23, r19
    10be:	b0 0d       	add	r27, r0
    10c0:	a1 1d       	adc	r26, r1
    10c2:	62 1f       	adc	r22, r18
    10c4:	83 9f       	mul	r24, r19
    10c6:	a0 0d       	add	r26, r0
    10c8:	61 1d       	adc	r22, r1
    10ca:	22 1f       	adc	r18, r18
    10cc:	74 9f       	mul	r23, r20
    10ce:	33 27       	eor	r19, r19
    10d0:	a0 0d       	add	r26, r0
    10d2:	61 1d       	adc	r22, r1
    10d4:	23 1f       	adc	r18, r19
    10d6:	84 9f       	mul	r24, r20
    10d8:	60 0d       	add	r22, r0
    10da:	21 1d       	adc	r18, r1
    10dc:	82 2f       	mov	r24, r18
    10de:	76 2f       	mov	r23, r22
    10e0:	6a 2f       	mov	r22, r26
    10e2:	11 24       	eor	r1, r1
    10e4:	9f 57       	subi	r25, 0x7F	; 127
    10e6:	50 40       	sbci	r21, 0x00	; 0
    10e8:	9a f0       	brmi	.+38     	; 0x1110 <__mulsf3_pse+0x88>
    10ea:	f1 f0       	breq	.+60     	; 0x1128 <__mulsf3_pse+0xa0>
    10ec:	88 23       	and	r24, r24
    10ee:	4a f0       	brmi	.+18     	; 0x1102 <__mulsf3_pse+0x7a>
    10f0:	ee 0f       	add	r30, r30
    10f2:	ff 1f       	adc	r31, r31
    10f4:	bb 1f       	adc	r27, r27
    10f6:	66 1f       	adc	r22, r22
    10f8:	77 1f       	adc	r23, r23
    10fa:	88 1f       	adc	r24, r24
    10fc:	91 50       	subi	r25, 0x01	; 1
    10fe:	50 40       	sbci	r21, 0x00	; 0
    1100:	a9 f7       	brne	.-22     	; 0x10ec <__mulsf3_pse+0x64>
    1102:	9e 3f       	cpi	r25, 0xFE	; 254
    1104:	51 05       	cpc	r21, r1
    1106:	80 f0       	brcs	.+32     	; 0x1128 <__mulsf3_pse+0xa0>
    1108:	0c 94 dd 07 	jmp	0xfba	; 0xfba <__fp_inf>
    110c:	0c 94 28 08 	jmp	0x1050	; 0x1050 <__fp_szero>
    1110:	5f 3f       	cpi	r21, 0xFF	; 255
    1112:	e4 f3       	brlt	.-8      	; 0x110c <__mulsf3_pse+0x84>
    1114:	98 3e       	cpi	r25, 0xE8	; 232
    1116:	d4 f3       	brlt	.-12     	; 0x110c <__mulsf3_pse+0x84>
    1118:	86 95       	lsr	r24
    111a:	77 95       	ror	r23
    111c:	67 95       	ror	r22
    111e:	b7 95       	ror	r27
    1120:	f7 95       	ror	r31
    1122:	e7 95       	ror	r30
    1124:	9f 5f       	subi	r25, 0xFF	; 255
    1126:	c1 f7       	brne	.-16     	; 0x1118 <__mulsf3_pse+0x90>
    1128:	fe 2b       	or	r31, r30
    112a:	88 0f       	add	r24, r24
    112c:	91 1d       	adc	r25, r1
    112e:	96 95       	lsr	r25
    1130:	87 95       	ror	r24
    1132:	97 f9       	bld	r25, 7
    1134:	08 95       	ret
    1136:	19 f4       	brne	.+6      	; 0x113e <__mulsf3_pse+0xb6>
    1138:	16 f4       	brtc	.+4      	; 0x113e <__mulsf3_pse+0xb6>
    113a:	0c 94 e3 07 	jmp	0xfc6	; 0xfc6 <__fp_nan>
    113e:	0c 94 e1 08 	jmp	0x11c2	; 0x11c2 <__fp_mpack>

00001142 <sqrt>:
    1142:	0e 94 0d 08 	call	0x101a	; 0x101a <__fp_splitA>
    1146:	b8 f3       	brcs	.-18     	; 0x1136 <__mulsf3_pse+0xae>
    1148:	99 23       	and	r25, r25
    114a:	c9 f3       	breq	.-14     	; 0x113e <__mulsf3_pse+0xb6>
    114c:	b6 f3       	brts	.-20     	; 0x113a <__mulsf3_pse+0xb2>
    114e:	9f 57       	subi	r25, 0x7F	; 127
    1150:	55 0b       	sbc	r21, r21
    1152:	87 ff       	sbrs	r24, 7
    1154:	0e 94 ef 08 	call	0x11de	; 0x11de <__fp_norm2>
    1158:	00 24       	eor	r0, r0
    115a:	a0 e6       	ldi	r26, 0x60	; 96
    115c:	40 ea       	ldi	r20, 0xA0	; 160
    115e:	90 01       	movw	r18, r0
    1160:	80 58       	subi	r24, 0x80	; 128
    1162:	56 95       	lsr	r21
    1164:	97 95       	ror	r25
    1166:	28 f4       	brcc	.+10     	; 0x1172 <sqrt+0x30>
    1168:	80 5c       	subi	r24, 0xC0	; 192
    116a:	66 0f       	add	r22, r22
    116c:	77 1f       	adc	r23, r23
    116e:	88 1f       	adc	r24, r24
    1170:	20 f0       	brcs	.+8      	; 0x117a <sqrt+0x38>
    1172:	26 17       	cp	r18, r22
    1174:	37 07       	cpc	r19, r23
    1176:	48 07       	cpc	r20, r24
    1178:	30 f4       	brcc	.+12     	; 0x1186 <sqrt+0x44>
    117a:	62 1b       	sub	r22, r18
    117c:	73 0b       	sbc	r23, r19
    117e:	84 0b       	sbc	r24, r20
    1180:	20 29       	or	r18, r0
    1182:	31 29       	or	r19, r1
    1184:	4a 2b       	or	r20, r26
    1186:	a6 95       	lsr	r26
    1188:	17 94       	ror	r1
    118a:	07 94       	ror	r0
    118c:	20 25       	eor	r18, r0
    118e:	31 25       	eor	r19, r1
    1190:	4a 27       	eor	r20, r26
    1192:	58 f7       	brcc	.-42     	; 0x116a <sqrt+0x28>
    1194:	66 0f       	add	r22, r22
    1196:	77 1f       	adc	r23, r23
    1198:	88 1f       	adc	r24, r24
    119a:	20 f0       	brcs	.+8      	; 0x11a4 <sqrt+0x62>
    119c:	26 17       	cp	r18, r22
    119e:	37 07       	cpc	r19, r23
    11a0:	48 07       	cpc	r20, r24
    11a2:	30 f4       	brcc	.+12     	; 0x11b0 <sqrt+0x6e>
    11a4:	62 0b       	sbc	r22, r18
    11a6:	73 0b       	sbc	r23, r19
    11a8:	84 0b       	sbc	r24, r20
    11aa:	20 0d       	add	r18, r0
    11ac:	31 1d       	adc	r19, r1
    11ae:	41 1d       	adc	r20, r1
    11b0:	a0 95       	com	r26
    11b2:	81 f7       	brne	.-32     	; 0x1194 <sqrt+0x52>
    11b4:	b9 01       	movw	r22, r18
    11b6:	84 2f       	mov	r24, r20
    11b8:	91 58       	subi	r25, 0x81	; 129
    11ba:	88 0f       	add	r24, r24
    11bc:	96 95       	lsr	r25
    11be:	87 95       	ror	r24
    11c0:	08 95       	ret

000011c2 <__fp_mpack>:
    11c2:	9f 3f       	cpi	r25, 0xFF	; 255
    11c4:	31 f0       	breq	.+12     	; 0x11d2 <__fp_mpack_finite+0xc>

000011c6 <__fp_mpack_finite>:
    11c6:	91 50       	subi	r25, 0x01	; 1
    11c8:	20 f4       	brcc	.+8      	; 0x11d2 <__fp_mpack_finite+0xc>
    11ca:	87 95       	ror	r24
    11cc:	77 95       	ror	r23
    11ce:	67 95       	ror	r22
    11d0:	b7 95       	ror	r27
    11d2:	88 0f       	add	r24, r24
    11d4:	91 1d       	adc	r25, r1
    11d6:	96 95       	lsr	r25
    11d8:	87 95       	ror	r24
    11da:	97 f9       	bld	r25, 7
    11dc:	08 95       	ret

000011de <__fp_norm2>:
    11de:	91 50       	subi	r25, 0x01	; 1
    11e0:	50 40       	sbci	r21, 0x00	; 0
    11e2:	66 0f       	add	r22, r22
    11e4:	77 1f       	adc	r23, r23
    11e6:	88 1f       	adc	r24, r24
    11e8:	d2 f7       	brpl	.-12     	; 0x11de <__fp_norm2>
    11ea:	08 95       	ret

000011ec <__udivmodhi4>:
    11ec:	aa 1b       	sub	r26, r26
    11ee:	bb 1b       	sub	r27, r27
    11f0:	51 e1       	ldi	r21, 0x11	; 17
    11f2:	07 c0       	rjmp	.+14     	; 0x1202 <__udivmodhi4_ep>

000011f4 <__udivmodhi4_loop>:
    11f4:	aa 1f       	adc	r26, r26
    11f6:	bb 1f       	adc	r27, r27
    11f8:	a6 17       	cp	r26, r22
    11fa:	b7 07       	cpc	r27, r23
    11fc:	10 f0       	brcs	.+4      	; 0x1202 <__udivmodhi4_ep>
    11fe:	a6 1b       	sub	r26, r22
    1200:	b7 0b       	sbc	r27, r23

00001202 <__udivmodhi4_ep>:
    1202:	88 1f       	adc	r24, r24
    1204:	99 1f       	adc	r25, r25
    1206:	5a 95       	dec	r21
    1208:	a9 f7       	brne	.-22     	; 0x11f4 <__udivmodhi4_loop>
    120a:	80 95       	com	r24
    120c:	90 95       	com	r25
    120e:	bc 01       	movw	r22, r24
    1210:	cd 01       	movw	r24, r26
    1212:	08 95       	ret

00001214 <__udivmodsi4>:
    1214:	a1 e2       	ldi	r26, 0x21	; 33
    1216:	1a 2e       	mov	r1, r26
    1218:	aa 1b       	sub	r26, r26
    121a:	bb 1b       	sub	r27, r27
    121c:	fd 01       	movw	r30, r26
    121e:	0d c0       	rjmp	.+26     	; 0x123a <__udivmodsi4_ep>

00001220 <__udivmodsi4_loop>:
    1220:	aa 1f       	adc	r26, r26
    1222:	bb 1f       	adc	r27, r27
    1224:	ee 1f       	adc	r30, r30
    1226:	ff 1f       	adc	r31, r31
    1228:	a2 17       	cp	r26, r18
    122a:	b3 07       	cpc	r27, r19
    122c:	e4 07       	cpc	r30, r20
    122e:	f5 07       	cpc	r31, r21
    1230:	20 f0       	brcs	.+8      	; 0x123a <__udivmodsi4_ep>
    1232:	a2 1b       	sub	r26, r18
    1234:	b3 0b       	sbc	r27, r19
    1236:	e4 0b       	sbc	r30, r20
    1238:	f5 0b       	sbc	r31, r21

0000123a <__udivmodsi4_ep>:
    123a:	66 1f       	adc	r22, r22
    123c:	77 1f       	adc	r23, r23
    123e:	88 1f       	adc	r24, r24
    1240:	99 1f       	adc	r25, r25
    1242:	1a 94       	dec	r1
    1244:	69 f7       	brne	.-38     	; 0x1220 <__udivmodsi4_loop>
    1246:	60 95       	com	r22
    1248:	70 95       	com	r23
    124a:	80 95       	com	r24
    124c:	90 95       	com	r25
    124e:	9b 01       	movw	r18, r22
    1250:	ac 01       	movw	r20, r24
    1252:	bd 01       	movw	r22, r26
    1254:	cf 01       	movw	r24, r30
    1256:	08 95       	ret

00001258 <__divmodsi4>:
    1258:	05 2e       	mov	r0, r21
    125a:	97 fb       	bst	r25, 7
    125c:	1e f4       	brtc	.+6      	; 0x1264 <__divmodsi4+0xc>
    125e:	00 94       	com	r0
    1260:	0e 94 43 09 	call	0x1286	; 0x1286 <__negsi2>
    1264:	57 fd       	sbrc	r21, 7
    1266:	07 d0       	rcall	.+14     	; 0x1276 <__divmodsi4_neg2>
    1268:	0e 94 0a 09 	call	0x1214	; 0x1214 <__udivmodsi4>
    126c:	07 fc       	sbrc	r0, 7
    126e:	03 d0       	rcall	.+6      	; 0x1276 <__divmodsi4_neg2>
    1270:	4e f4       	brtc	.+18     	; 0x1284 <__divmodsi4_exit>
    1272:	0c 94 43 09 	jmp	0x1286	; 0x1286 <__negsi2>

00001276 <__divmodsi4_neg2>:
    1276:	50 95       	com	r21
    1278:	40 95       	com	r20
    127a:	30 95       	com	r19
    127c:	21 95       	neg	r18
    127e:	3f 4f       	sbci	r19, 0xFF	; 255
    1280:	4f 4f       	sbci	r20, 0xFF	; 255
    1282:	5f 4f       	sbci	r21, 0xFF	; 255

00001284 <__divmodsi4_exit>:
    1284:	08 95       	ret

00001286 <__negsi2>:
    1286:	90 95       	com	r25
    1288:	80 95       	com	r24
    128a:	70 95       	com	r23
    128c:	61 95       	neg	r22
    128e:	7f 4f       	sbci	r23, 0xFF	; 255
    1290:	8f 4f       	sbci	r24, 0xFF	; 255
    1292:	9f 4f       	sbci	r25, 0xFF	; 255
    1294:	08 95       	ret

00001296 <__itoa_ncheck>:
    1296:	bb 27       	eor	r27, r27
    1298:	4a 30       	cpi	r20, 0x0A	; 10
    129a:	31 f4       	brne	.+12     	; 0x12a8 <__itoa_ncheck+0x12>
    129c:	99 23       	and	r25, r25
    129e:	22 f4       	brpl	.+8      	; 0x12a8 <__itoa_ncheck+0x12>
    12a0:	bd e2       	ldi	r27, 0x2D	; 45
    12a2:	90 95       	com	r25
    12a4:	81 95       	neg	r24
    12a6:	9f 4f       	sbci	r25, 0xFF	; 255
    12a8:	0c 94 88 09 	jmp	0x1310	; 0x1310 <__utoa_common>

000012ac <__ltoa_ncheck>:
    12ac:	bb 27       	eor	r27, r27
    12ae:	2a 30       	cpi	r18, 0x0A	; 10
    12b0:	51 f4       	brne	.+20     	; 0x12c6 <__ltoa_ncheck+0x1a>
    12b2:	99 23       	and	r25, r25
    12b4:	42 f4       	brpl	.+16     	; 0x12c6 <__ltoa_ncheck+0x1a>
    12b6:	bd e2       	ldi	r27, 0x2D	; 45
    12b8:	90 95       	com	r25
    12ba:	80 95       	com	r24
    12bc:	70 95       	com	r23
    12be:	61 95       	neg	r22
    12c0:	7f 4f       	sbci	r23, 0xFF	; 255
    12c2:	8f 4f       	sbci	r24, 0xFF	; 255
    12c4:	9f 4f       	sbci	r25, 0xFF	; 255
    12c6:	0c 94 66 09 	jmp	0x12cc	; 0x12cc <__ultoa_common>

000012ca <__ultoa_ncheck>:
    12ca:	bb 27       	eor	r27, r27

000012cc <__ultoa_common>:
    12cc:	fa 01       	movw	r30, r20
    12ce:	a6 2f       	mov	r26, r22
    12d0:	62 17       	cp	r22, r18
    12d2:	71 05       	cpc	r23, r1
    12d4:	81 05       	cpc	r24, r1
    12d6:	91 05       	cpc	r25, r1
    12d8:	33 0b       	sbc	r19, r19
    12da:	30 fb       	bst	r19, 0
    12dc:	66 f0       	brts	.+24     	; 0x12f6 <__ultoa_common+0x2a>
    12de:	aa 27       	eor	r26, r26
    12e0:	66 0f       	add	r22, r22
    12e2:	77 1f       	adc	r23, r23
    12e4:	88 1f       	adc	r24, r24
    12e6:	99 1f       	adc	r25, r25
    12e8:	aa 1f       	adc	r26, r26
    12ea:	a2 17       	cp	r26, r18
    12ec:	10 f0       	brcs	.+4      	; 0x12f2 <__ultoa_common+0x26>
    12ee:	a2 1b       	sub	r26, r18
    12f0:	63 95       	inc	r22
    12f2:	38 50       	subi	r19, 0x08	; 8
    12f4:	a9 f7       	brne	.-22     	; 0x12e0 <__ultoa_common+0x14>
    12f6:	a0 5d       	subi	r26, 0xD0	; 208
    12f8:	aa 33       	cpi	r26, 0x3A	; 58
    12fa:	08 f0       	brcs	.+2      	; 0x12fe <__ultoa_common+0x32>
    12fc:	a9 5d       	subi	r26, 0xD9	; 217
    12fe:	a1 93       	st	Z+, r26
    1300:	36 f7       	brtc	.-52     	; 0x12ce <__ultoa_common+0x2>
    1302:	b1 11       	cpse	r27, r1
    1304:	b1 93       	st	Z+, r27
    1306:	10 82       	st	Z, r1
    1308:	ca 01       	movw	r24, r20
    130a:	0c 94 a1 09 	jmp	0x1342	; 0x1342 <strrev>

0000130e <__utoa_ncheck>:
    130e:	bb 27       	eor	r27, r27

00001310 <__utoa_common>:
    1310:	fb 01       	movw	r30, r22
    1312:	55 27       	eor	r21, r21
    1314:	aa 27       	eor	r26, r26
    1316:	88 0f       	add	r24, r24
    1318:	99 1f       	adc	r25, r25
    131a:	aa 1f       	adc	r26, r26
    131c:	a4 17       	cp	r26, r20
    131e:	10 f0       	brcs	.+4      	; 0x1324 <__utoa_common+0x14>
    1320:	a4 1b       	sub	r26, r20
    1322:	83 95       	inc	r24
    1324:	50 51       	subi	r21, 0x10	; 16
    1326:	b9 f7       	brne	.-18     	; 0x1316 <__utoa_common+0x6>
    1328:	a0 5d       	subi	r26, 0xD0	; 208
    132a:	aa 33       	cpi	r26, 0x3A	; 58
    132c:	08 f0       	brcs	.+2      	; 0x1330 <__utoa_common+0x20>
    132e:	a9 5d       	subi	r26, 0xD9	; 217
    1330:	a1 93       	st	Z+, r26
    1332:	00 97       	sbiw	r24, 0x00	; 0
    1334:	79 f7       	brne	.-34     	; 0x1314 <__utoa_common+0x4>
    1336:	b1 11       	cpse	r27, r1
    1338:	b1 93       	st	Z+, r27
    133a:	11 92       	st	Z+, r1
    133c:	cb 01       	movw	r24, r22
    133e:	0c 94 a1 09 	jmp	0x1342	; 0x1342 <strrev>

00001342 <strrev>:
    1342:	dc 01       	movw	r26, r24
    1344:	fc 01       	movw	r30, r24
    1346:	67 2f       	mov	r22, r23
    1348:	71 91       	ld	r23, Z+
    134a:	77 23       	and	r23, r23
    134c:	e1 f7       	brne	.-8      	; 0x1346 <strrev+0x4>
    134e:	32 97       	sbiw	r30, 0x02	; 2
    1350:	04 c0       	rjmp	.+8      	; 0x135a <strrev+0x18>
    1352:	7c 91       	ld	r23, X
    1354:	6d 93       	st	X+, r22
    1356:	70 83       	st	Z, r23
    1358:	62 91       	ld	r22, -Z
    135a:	ae 17       	cp	r26, r30
    135c:	bf 07       	cpc	r27, r31
    135e:	c8 f3       	brcs	.-14     	; 0x1352 <strrev+0x10>
    1360:	08 95       	ret

00001362 <_exit>:
    1362:	f8 94       	cli

00001364 <__stop_program>:
    1364:	ff cf       	rjmp	.-2      	; 0x1364 <__stop_program>
