
RobotArm.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000fc2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000f4e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000001a  00800100  00800100  00000fc2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000fc2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000ff4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000188  00000000  00000000  00001034  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000211b  00000000  00000000  000011bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000f83  00000000  00000000  000032d7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000c1b  00000000  00000000  0000425a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000045c  00000000  00000000  00004e78  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000bfe  00000000  00000000  000052d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000e84  00000000  00000000  00005ed2  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000150  00000000  00000000  00006d56  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 c7 04 	jmp	0x98e	; 0x98e <__vector_11>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 5d 00 	jmp	0xba	; 0xba <__vector_18>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__vector_20>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	aa 31       	cpi	r26, 0x1A	; 26
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>

00000084 <__do_copy_data>:
  84:	11 e0       	ldi	r17, 0x01	; 1
  86:	a0 e0       	ldi	r26, 0x00	; 0
  88:	b1 e0       	ldi	r27, 0x01	; 1
  8a:	ee e4       	ldi	r30, 0x4E	; 78
  8c:	ff e0       	ldi	r31, 0x0F	; 15
  8e:	02 c0       	rjmp	.+4      	; 0x94 <__do_copy_data+0x10>
  90:	05 90       	lpm	r0, Z+
  92:	0d 92       	st	X+, r0
  94:	a0 30       	cpi	r26, 0x00	; 0
  96:	b1 07       	cpc	r27, r17
  98:	d9 f7       	brne	.-10     	; 0x90 <__do_copy_data+0xc>
  9a:	0e 94 b5 00 	call	0x16a	; 0x16a <main>
  9e:	0c 94 a5 07 	jmp	0xf4a	; 0xf4a <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <__vector_20>:
		SERVO_REGISTER &= ~dir_a;
		SERVO_REGISTER |= dir_b;
		speed *= -1;
	}
	*pwm = speed;
}
  a6:	1f 92       	push	r1
  a8:	0f 92       	push	r0
  aa:	0f b6       	in	r0, 0x3f	; 63
  ac:	0f 92       	push	r0
  ae:	11 24       	eor	r1, r1
  b0:	0f 90       	pop	r0
  b2:	0f be       	out	0x3f, r0	; 63
  b4:	0f 90       	pop	r0
  b6:	1f 90       	pop	r1
  b8:	18 95       	reti

000000ba <__vector_18>:
  ba:	1f 92       	push	r1
  bc:	0f 92       	push	r0
  be:	0f b6       	in	r0, 0x3f	; 63
  c0:	0f 92       	push	r0
  c2:	11 24       	eor	r1, r1
  c4:	2f 93       	push	r18
  c6:	3f 93       	push	r19
  c8:	8f 93       	push	r24
  ca:	9f 93       	push	r25
  cc:	ef 93       	push	r30
  ce:	ff 93       	push	r31
  d0:	10 92 14 01 	sts	0x0114, r1	; 0x800114 <motor_status+0x12>
  d4:	10 92 13 01 	sts	0x0113, r1	; 0x800113 <motor_status+0x11>
  d8:	90 91 c6 00 	lds	r25, 0x00C6	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
  dc:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <parse_state>
  e0:	81 30       	cpi	r24, 0x01	; 1
  e2:	61 f0       	breq	.+24     	; 0xfc <__vector_18+0x42>
  e4:	28 f0       	brcs	.+10     	; 0xf0 <__vector_18+0x36>
  e6:	82 30       	cpi	r24, 0x02	; 2
  e8:	a9 f0       	breq	.+42     	; 0x114 <__vector_18+0x5a>
  ea:	83 30       	cpi	r24, 0x03	; 3
  ec:	89 f1       	breq	.+98     	; 0x150 <__vector_18+0x96>
  ee:	32 c0       	rjmp	.+100    	; 0x154 <__vector_18+0x9a>
  f0:	9d 34       	cpi	r25, 0x4D	; 77
  f2:	81 f5       	brne	.+96     	; 0x154 <__vector_18+0x9a>
  f4:	81 e0       	ldi	r24, 0x01	; 1
  f6:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <parse_state>
  fa:	2c c0       	rjmp	.+88     	; 0x154 <__vector_18+0x9a>
  fc:	80 ed       	ldi	r24, 0xD0	; 208
  fe:	89 0f       	add	r24, r25
 100:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <motor_status>
 104:	82 e0       	ldi	r24, 0x02	; 2
 106:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <parse_state>
 10a:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <__data_end+0x1>
 10e:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__data_end>
 112:	20 c0       	rjmp	.+64     	; 0x154 <__vector_18+0x9a>
 114:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_end>
 118:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_end+0x1>
 11c:	f9 01       	movw	r30, r18
 11e:	ee 0f       	add	r30, r30
 120:	ff 1f       	adc	r31, r31
 122:	ee 5f       	subi	r30, 0xFE	; 254
 124:	fe 4f       	sbci	r31, 0xFE	; 254
 126:	89 2f       	mov	r24, r25
 128:	90 e0       	ldi	r25, 0x00	; 0
 12a:	92 83       	std	Z+2, r25	; 0x02
 12c:	81 83       	std	Z+1, r24	; 0x01
 12e:	c9 01       	movw	r24, r18
 130:	01 96       	adiw	r24, 0x01	; 1
 132:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_end+0x1>
 136:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_end>
 13a:	08 97       	sbiw	r24, 0x08	; 8
 13c:	59 f4       	brne	.+22     	; 0x154 <__vector_18+0x9a>
 13e:	10 92 15 01 	sts	0x0115, r1	; 0x800115 <parse_state>
 142:	81 e0       	ldi	r24, 0x01	; 1
 144:	90 e0       	ldi	r25, 0x00	; 0
 146:	90 93 14 01 	sts	0x0114, r25	; 0x800114 <motor_status+0x12>
 14a:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <motor_status+0x11>
 14e:	02 c0       	rjmp	.+4      	; 0x154 <__vector_18+0x9a>
 150:	10 92 15 01 	sts	0x0115, r1	; 0x800115 <parse_state>
 154:	ff 91       	pop	r31
 156:	ef 91       	pop	r30
 158:	9f 91       	pop	r25
 15a:	8f 91       	pop	r24
 15c:	3f 91       	pop	r19
 15e:	2f 91       	pop	r18
 160:	0f 90       	pop	r0
 162:	0f be       	out	0x3f, r0	; 63
 164:	0f 90       	pop	r0
 166:	1f 90       	pop	r1
 168:	18 95       	reti

0000016a <main>:

/*some comment*/
int main(void)
{
 16a:	cf 93       	push	r28
 16c:	df 93       	push	r29
 16e:	cd b7       	in	r28, 0x3d	; 61
 170:	de b7       	in	r29, 0x3e	; 62
 172:	ca 56       	subi	r28, 0x6A	; 106
 174:	d1 09       	sbc	r29, r1
 176:	0f b6       	in	r0, 0x3f	; 63
 178:	f8 94       	cli
 17a:	de bf       	out	0x3e, r29	; 62
 17c:	0f be       	out	0x3f, r0	; 63
 17e:	cd bf       	out	0x3d, r28	; 61

	
	/* initialize component */ 
	sei();
 180:	78 94       	sei
	timer_enable();	
 182:	0e 94 9b 04 	call	0x936	; 0x936 <_Z12timer_enablev>
	usart_enable(9600);
 186:	80 e8       	ldi	r24, 0x80	; 128
 188:	95 e2       	ldi	r25, 0x25	; 37
 18a:	0e 94 ec 04 	call	0x9d8	; 0x9d8 <_Z12usart_enablej>
	/* Initialize motors */ 
	
    /* Replace with your application code */
	uint8_t tacho_values;
	uint8_t old_tacho_values;
	DDRD &= ~SERVO_TACHO_0_M;
 18e:	55 98       	cbi	0x0a, 5	; 10
	DDRD &= ~SERVO_TACHO_0_P; 
 190:	52 98       	cbi	0x0a, 2	; 10

	/* Initialize servo motors */
	DDRD |= SERVO_0_EN | SERVO_0_DIR_A | SERVO_0_DIR_B;
 192:	8a b1       	in	r24, 0x0a	; 10
 194:	88 6c       	ori	r24, 0xC8	; 200
 196:	8a b9       	out	0x0a, r24	; 10
	TCCR2A |= (1 << COM2B1 ) | (1 << WGM21) | (1 << WGM20); /*Fast PWM */
 198:	e0 eb       	ldi	r30, 0xB0	; 176
 19a:	f0 e0       	ldi	r31, 0x00	; 0
 19c:	80 81       	ld	r24, Z
 19e:	83 62       	ori	r24, 0x23	; 35
 1a0:	80 83       	st	Z, r24
	TCCR2B |= (1 << CS20); /*No prescaling */
 1a2:	e1 eb       	ldi	r30, 0xB1	; 177
 1a4:	f0 e0       	ldi	r31, 0x00	; 0
 1a6:	80 81       	ld	r24, Z
 1a8:	81 60       	ori	r24, 0x01	; 1
 1aa:	80 83       	st	Z, r24
	/* PID */
		
	DDRB |= M0_DIR | M0_STEP | M1_STEP | M1_DIR;
 1ac:	84 b1       	in	r24, 0x04	; 4
 1ae:	8f 60       	ori	r24, 0x0F	; 15
 1b0:	84 b9       	out	0x04, r24	; 4
	StepperMotor stepper0(0,0.043182,M0_DIR,M0_STEP);
 1b2:	ee 24       	eor	r14, r14
 1b4:	e3 94       	inc	r14
 1b6:	02 e0       	ldi	r16, 0x02	; 2
 1b8:	2c e9       	ldi	r18, 0x9C	; 156
 1ba:	3f ed       	ldi	r19, 0xDF	; 223
 1bc:	40 e3       	ldi	r20, 0x30	; 48
 1be:	5d e3       	ldi	r21, 0x3D	; 61
 1c0:	60 e0       	ldi	r22, 0x00	; 0
 1c2:	70 e0       	ldi	r23, 0x00	; 0
 1c4:	ce 01       	movw	r24, r28
 1c6:	01 96       	adiw	r24, 0x01	; 1
 1c8:	0e 94 80 02 	call	0x500	; 0x500 <_ZN12StepperMotorC1Eifhh>
	StepperMotor stepper1(0,0.2571426, M1_DIR,M1_STEP); 
 1cc:	68 94       	set
 1ce:	ee 24       	eor	r14, r14
 1d0:	e2 f8       	bld	r14, 2
 1d2:	08 e0       	ldi	r16, 0x08	; 8
 1d4:	22 e3       	ldi	r18, 0x32	; 50
 1d6:	38 ea       	ldi	r19, 0xA8	; 168
 1d8:	43 e8       	ldi	r20, 0x83	; 131
 1da:	5e e3       	ldi	r21, 0x3E	; 62
 1dc:	60 e0       	ldi	r22, 0x00	; 0
 1de:	70 e0       	ldi	r23, 0x00	; 0
 1e0:	ce 01       	movw	r24, r28
 1e2:	83 96       	adiw	r24, 0x23	; 35
 1e4:	0e 94 80 02 	call	0x500	; 0x500 <_ZN12StepperMotorC1Eifhh>
	ServoMotor  servo0(&SERVO0_PWM,&SERVO_REGISTER,SERVO_0_DIR_A,SERVO_0_DIR_B);
 1e8:	00 e8       	ldi	r16, 0x80	; 128
 1ea:	20 e4       	ldi	r18, 0x40	; 64
 1ec:	4b e2       	ldi	r20, 0x2B	; 43
 1ee:	50 e0       	ldi	r21, 0x00	; 0
 1f0:	64 eb       	ldi	r22, 0xB4	; 180
 1f2:	70 e0       	ldi	r23, 0x00	; 0
 1f4:	ce 01       	movw	r24, r28
 1f6:	8b 5b       	subi	r24, 0xBB	; 187
 1f8:	9f 4f       	sbci	r25, 0xFF	; 255
 1fa:	0e 94 c2 01 	call	0x384	; 0x384 <_ZN10ServoMotorC1EPVhS1_hh>
	servo0.target_pos = 0;
 1fe:	60 96       	adiw	r28, 0x10	; 16
 200:	1f ae       	std	Y+63, r1	; 0x3f
 202:	1e ae       	std	Y+62, r1	; 0x3e
 204:	60 97       	sbiw	r28, 0x10	; 16
	servo0.set_pid(10,0,0);
 206:	20 e0       	ldi	r18, 0x00	; 0
 208:	30 e0       	ldi	r19, 0x00	; 0
 20a:	40 e0       	ldi	r20, 0x00	; 0
 20c:	50 e0       	ldi	r21, 0x00	; 0
 20e:	6a e0       	ldi	r22, 0x0A	; 10
 210:	70 e0       	ldi	r23, 0x00	; 0
 212:	ce 01       	movw	r24, r28
 214:	8b 5b       	subi	r24, 0xBB	; 187
 216:	9f 4f       	sbci	r25, 0xFF	; 255
 218:	0e 94 d7 01 	call	0x3ae	; 0x3ae <_ZN10ServoMotor7set_pidEjjj>
    while (1) 
    {
		
		/*character FSM */ 
		char buff[50]; 
		if(motor_status.done == 1){
 21c:	02 e0       	ldi	r16, 0x02	; 2
 21e:	11 e0       	ldi	r17, 0x01	; 1
	//		sprintf(buff,"Motor %d, angle =  %d\n",motor_status.motor_select,motor_status.angle);
	//		usart_send(buff);
			motor_status.done = 0; 
			uint16_t duration = (motor_status.data[0]-48)*10 + (motor_status.data[1]-48);
			uint16_t acceleration = (motor_status.data[2]-48)*10 + (motor_status.data[3]-48);
			int16_t angle = (motor_status.data[5]-48)*100 + (motor_status.data[6]-48)*10 + (motor_status.data[7]-48);
 220:	0f 2e       	mov	r0, r31
 222:	f4 e6       	ldi	r31, 0x64	; 100
 224:	ff 2e       	mov	r15, r31
 226:	f0 2d       	mov	r31, r0
					break;
				case 1 :
					stepper0.target_pos = angle; 
					stepper0.duration = duration;
					stepper0.acceleration = acceleration;
					stepper0.start = 1; 
 228:	ee 24       	eor	r14, r14
 22a:	e3 94       	inc	r14
    while (1) 
    {
		
		/*character FSM */ 
		char buff[50]; 
		if(motor_status.done == 1){
 22c:	d8 01       	movw	r26, r16
 22e:	51 96       	adiw	r26, 0x11	; 17
 230:	8d 91       	ld	r24, X+
 232:	9c 91       	ld	r25, X
 234:	52 97       	sbiw	r26, 0x12	; 18
 236:	01 97       	sbiw	r24, 0x01	; 1
 238:	09 f0       	breq	.+2      	; 0x23c <main+0xd2>
 23a:	7e c0       	rjmp	.+252    	; 0x338 <main+0x1ce>
	//		sprintf(buff,"Motor %d, angle =  %d\n",motor_status.motor_select,motor_status.angle);
	//		usart_send(buff);
			motor_status.done = 0; 
 23c:	52 96       	adiw	r26, 0x12	; 18
 23e:	1c 92       	st	X, r1
 240:	1e 92       	st	-X, r1
 242:	51 97       	sbiw	r26, 0x11	; 17
			uint16_t duration = (motor_status.data[0]-48)*10 + (motor_status.data[1]-48);
 244:	11 96       	adiw	r26, 0x01	; 1
 246:	8d 91       	ld	r24, X+
 248:	9c 91       	ld	r25, X
 24a:	12 97       	sbiw	r26, 0x02	; 2
 24c:	c0 97       	sbiw	r24, 0x30	; 48
 24e:	ac 01       	movw	r20, r24
 250:	44 0f       	add	r20, r20
 252:	55 1f       	adc	r21, r21
 254:	88 0f       	add	r24, r24
 256:	99 1f       	adc	r25, r25
 258:	88 0f       	add	r24, r24
 25a:	99 1f       	adc	r25, r25
 25c:	88 0f       	add	r24, r24
 25e:	99 1f       	adc	r25, r25
 260:	84 0f       	add	r24, r20
 262:	95 1f       	adc	r25, r21
 264:	13 96       	adiw	r26, 0x03	; 3
 266:	4d 91       	ld	r20, X+
 268:	5c 91       	ld	r21, X
 26a:	14 97       	sbiw	r26, 0x04	; 4
 26c:	40 53       	subi	r20, 0x30	; 48
 26e:	51 09       	sbc	r21, r1
 270:	48 0f       	add	r20, r24
 272:	59 1f       	adc	r21, r25
			uint16_t acceleration = (motor_status.data[2]-48)*10 + (motor_status.data[3]-48);
 274:	15 96       	adiw	r26, 0x05	; 5
 276:	8d 91       	ld	r24, X+
 278:	9c 91       	ld	r25, X
 27a:	16 97       	sbiw	r26, 0x06	; 6
 27c:	c0 97       	sbiw	r24, 0x30	; 48
 27e:	9c 01       	movw	r18, r24
 280:	22 0f       	add	r18, r18
 282:	33 1f       	adc	r19, r19
 284:	88 0f       	add	r24, r24
 286:	99 1f       	adc	r25, r25
 288:	88 0f       	add	r24, r24
 28a:	99 1f       	adc	r25, r25
 28c:	88 0f       	add	r24, r24
 28e:	99 1f       	adc	r25, r25
 290:	82 0f       	add	r24, r18
 292:	93 1f       	adc	r25, r19
 294:	17 96       	adiw	r26, 0x07	; 7
 296:	6d 91       	ld	r22, X+
 298:	7c 91       	ld	r23, X
 29a:	18 97       	sbiw	r26, 0x08	; 8
 29c:	60 53       	subi	r22, 0x30	; 48
 29e:	71 09       	sbc	r23, r1
 2a0:	68 0f       	add	r22, r24
 2a2:	79 1f       	adc	r23, r25
			int16_t angle = (motor_status.data[5]-48)*100 + (motor_status.data[6]-48)*10 + (motor_status.data[7]-48);
 2a4:	1b 96       	adiw	r26, 0x0b	; 11
 2a6:	8d 91       	ld	r24, X+
 2a8:	9c 91       	ld	r25, X
 2aa:	1c 97       	sbiw	r26, 0x0c	; 12
 2ac:	c0 97       	sbiw	r24, 0x30	; 48
 2ae:	f8 9e       	mul	r15, r24
 2b0:	f0 01       	movw	r30, r0
 2b2:	f9 9e       	mul	r15, r25
 2b4:	f0 0d       	add	r31, r0
 2b6:	11 24       	eor	r1, r1
 2b8:	1d 96       	adiw	r26, 0x0d	; 13
 2ba:	2d 91       	ld	r18, X+
 2bc:	3c 91       	ld	r19, X
 2be:	1e 97       	sbiw	r26, 0x0e	; 14
 2c0:	c9 01       	movw	r24, r18
 2c2:	c0 97       	sbiw	r24, 0x30	; 48
 2c4:	dc 01       	movw	r26, r24
 2c6:	aa 0f       	add	r26, r26
 2c8:	bb 1f       	adc	r27, r27
 2ca:	9c 01       	movw	r18, r24
 2cc:	22 0f       	add	r18, r18
 2ce:	33 1f       	adc	r19, r19
 2d0:	22 0f       	add	r18, r18
 2d2:	33 1f       	adc	r19, r19
 2d4:	22 0f       	add	r18, r18
 2d6:	33 1f       	adc	r19, r19
 2d8:	cd 01       	movw	r24, r26
 2da:	82 0f       	add	r24, r18
 2dc:	93 1f       	adc	r25, r19
 2de:	8e 0f       	add	r24, r30
 2e0:	9f 1f       	adc	r25, r31
 2e2:	f8 01       	movw	r30, r16
 2e4:	27 85       	ldd	r18, Z+15	; 0x0f
 2e6:	30 89       	ldd	r19, Z+16	; 0x10
 2e8:	20 53       	subi	r18, 0x30	; 48
 2ea:	31 09       	sbc	r19, r1
 2ec:	82 0f       	add	r24, r18
 2ee:	93 1f       	adc	r25, r19

			if(motor_status.data[4] == '-'){
 2f0:	21 85       	ldd	r18, Z+9	; 0x09
 2f2:	32 85       	ldd	r19, Z+10	; 0x0a
 2f4:	2d 32       	cpi	r18, 0x2D	; 45
 2f6:	31 05       	cpc	r19, r1
 2f8:	19 f4       	brne	.+6      	; 0x300 <main+0x196>
				angle = angle * -1;
 2fa:	91 95       	neg	r25
 2fc:	81 95       	neg	r24
 2fe:	91 09       	sbc	r25, r1
			}
			switch(motor_status.motor_select){
 300:	d8 01       	movw	r26, r16
 302:	2c 91       	ld	r18, X
 304:	21 30       	cpi	r18, 0x01	; 1
 306:	49 f0       	breq	.+18     	; 0x31a <main+0x1b0>
 308:	18 f0       	brcs	.+6      	; 0x310 <main+0x1a6>
 30a:	22 30       	cpi	r18, 0x02	; 2
 30c:	71 f0       	breq	.+28     	; 0x32a <main+0x1c0>
 30e:	14 c0       	rjmp	.+40     	; 0x338 <main+0x1ce>
				case 0 : 
					//usart_send("hello");
					servo0.target_pos = angle; 
 310:	60 96       	adiw	r28, 0x10	; 16
 312:	9f af       	std	Y+63, r25	; 0x3f
 314:	8e af       	std	Y+62, r24	; 0x3e
 316:	60 97       	sbiw	r28, 0x10	; 16
					break;
 318:	0f c0       	rjmp	.+30     	; 0x338 <main+0x1ce>
				case 1 :
					stepper0.target_pos = angle; 
 31a:	9d 83       	std	Y+5, r25	; 0x05
 31c:	8c 83       	std	Y+4, r24	; 0x04
					stepper0.duration = duration;
 31e:	5f 87       	std	Y+15, r21	; 0x0f
 320:	4e 87       	std	Y+14, r20	; 0x0e
					stepper0.acceleration = acceleration;
 322:	7d 87       	std	Y+13, r23	; 0x0d
 324:	6c 87       	std	Y+12, r22	; 0x0c
					stepper0.start = 1; 
 326:	e9 82       	std	Y+1, r14	; 0x01
					break; 
 328:	07 c0       	rjmp	.+14     	; 0x338 <main+0x1ce>
				case 2 : 
					stepper1.target_pos = angle; 
 32a:	9f a3       	std	Y+39, r25	; 0x27
 32c:	8e a3       	std	Y+38, r24	; 0x26
					stepper1.duration = duration;
 32e:	59 ab       	std	Y+49, r21	; 0x31
 330:	48 ab       	std	Y+48, r20	; 0x30
					stepper1.acceleration = acceleration;
 332:	7f a7       	std	Y+47, r23	; 0x2f
 334:	6e a7       	std	Y+46, r22	; 0x2e
					stepper1.start = 1;
 336:	eb a2       	std	Y+35, r14	; 0x23
			}
		}

			//usart_sendln(temp);	
		
		stepper0.rotate(timer_10k());
 338:	0e 94 be 04 	call	0x97c	; 0x97c <_Z9timer_10kv>
 33c:	ab 01       	movw	r20, r22
 33e:	bc 01       	movw	r22, r24
 340:	ce 01       	movw	r24, r28
 342:	01 96       	adiw	r24, 0x01	; 1
 344:	0e 94 74 03 	call	0x6e8	; 0x6e8 <_ZN12StepperMotor6rotateEm>
		stepper1.rotate(timer_10k());
 348:	0e 94 be 04 	call	0x97c	; 0x97c <_Z9timer_10kv>
 34c:	ab 01       	movw	r20, r22
 34e:	bc 01       	movw	r22, r24
 350:	ce 01       	movw	r24, r28
 352:	83 96       	adiw	r24, 0x23	; 35
 354:	0e 94 74 03 	call	0x6e8	; 0x6e8 <_ZN12StepperMotor6rotateEm>
		servo0.rotate(timer_10k());
 358:	0e 94 be 04 	call	0x97c	; 0x97c <_Z9timer_10kv>
 35c:	ab 01       	movw	r20, r22
 35e:	bc 01       	movw	r22, r24
 360:	ce 01       	movw	r24, r28
 362:	8b 5b       	subi	r24, 0xBB	; 187
 364:	9f 4f       	sbci	r25, 0xFF	; 255
 366:	0e 94 18 02 	call	0x430	; 0x430 <_ZN10ServoMotor6rotateEm>
	
		tacho_values= PIND; 
 36a:	89 b1       	in	r24, 0x09	; 9
		servo0.tacho(PIND & SERVO_TACHO_0_P, PIND & SERVO_TACHO_0_M);
 36c:	49 b1       	in	r20, 0x09	; 9
 36e:	69 b1       	in	r22, 0x09	; 9
 370:	40 72       	andi	r20, 0x20	; 32
 372:	64 70       	andi	r22, 0x04	; 4
 374:	ce 01       	movw	r24, r28
 376:	8b 5b       	subi	r24, 0xBB	; 187
 378:	9f 4f       	sbci	r25, 0xFF	; 255
 37a:	0e 94 66 02 	call	0x4cc	; 0x4cc <_ZN10ServoMotor5tachoEhh>
		/*Check if any bits have toggled */
		if(tacho_values ^ old_tacho_values){
			old_tacho_values = tacho_values;
			
		}
		if(timer_10k()-temp > 100){
 37e:	0e 94 be 04 	call	0x97c	; 0x97c <_Z9timer_10kv>
	StepperMotor stepper1(0,0.2571426, M1_DIR,M1_STEP); 
	ServoMotor  servo0(&SERVO0_PWM,&SERVO_REGISTER,SERVO_0_DIR_A,SERVO_0_DIR_B);
	servo0.target_pos = 0;
	servo0.set_pid(10,0,0);
	uint32_t temp = 0 ;
    while (1) 
 382:	54 cf       	rjmp	.-344    	; 0x22c <main+0xc2>

00000384 <_ZN10ServoMotorC1EPVhS1_hh>:
#include "Usart.h"
#include <avr/io.h>	
// default constructor
#define MAX_INT 100
#define MAX_SUMMATION 100
ServoMotor::ServoMotor(volatile uint8_t * pwm,volatile uint8_t * servo_register ,uint8_t dir_a,uint8_t dir_b)
 384:	0f 93       	push	r16
 386:	fc 01       	movw	r30, r24
{
	this->tacho_state = 0;
 388:	13 a2       	std	Z+35, r1	; 0x23
	this->target_pos = 0; 
 38a:	12 86       	std	Z+10, r1	; 0x0a
 38c:	11 86       	std	Z+9, r1	; 0x09
	this->integral_term = 0; 
 38e:	11 8a       	std	Z+17, r1	; 0x11
 390:	12 8a       	std	Z+18, r1	; 0x12
 392:	13 8a       	std	Z+19, r1	; 0x13
 394:	14 8a       	std	Z+20, r1	; 0x14
	this->old_error = 0; 
 396:	17 8a       	std	Z+23, r1	; 0x17
 398:	10 8e       	std	Z+24, r1	; 0x18
 39a:	11 8e       	std	Z+25, r1	; 0x19
 39c:	12 8e       	std	Z+26, r1	; 0x1a
	this->dir_a = dir_a;
 39e:	24 a3       	std	Z+36, r18	; 0x24
	this->dir_b = dir_b;
 3a0:	05 a3       	std	Z+37, r16	; 0x25
	this->servo_register = servo_register;
 3a2:	50 a3       	std	Z+32, r21	; 0x20
 3a4:	47 8f       	std	Z+31, r20	; 0x1f
	this->servo_pwm = pwm; 
 3a6:	72 a3       	std	Z+34, r23	; 0x22
 3a8:	61 a3       	std	Z+33, r22	; 0x21
	

} //ServoMotor
 3aa:	0f 91       	pop	r16
 3ac:	08 95       	ret

000003ae <_ZN10ServoMotor7set_pidEjjj>:
void ServoMotor::set_pid(uint16_t P, uint16_t I, uint16_t D){
 3ae:	cf 93       	push	r28
 3b0:	df 93       	push	r29
 3b2:	fc 01       	movw	r30, r24
 3b4:	ea 01       	movw	r28, r20
	P_factor = P;
 3b6:	71 83       	std	Z+1, r23	; 0x01
 3b8:	60 83       	st	Z, r22
	I_factor = I; 
 3ba:	53 83       	std	Z+3, r21	; 0x03
 3bc:	42 83       	std	Z+2, r20	; 0x02
	D_factor = D; 
 3be:	35 83       	std	Z+5, r19	; 0x05
 3c0:	24 83       	std	Z+4, r18	; 0x04
	
	max_error = MAX_INT / (P_factor + 1);
 3c2:	6f 5f       	subi	r22, 0xFF	; 255
 3c4:	7f 4f       	sbci	r23, 0xFF	; 255
 3c6:	24 e6       	ldi	r18, 0x64	; 100
 3c8:	30 e0       	ldi	r19, 0x00	; 0
 3ca:	c9 01       	movw	r24, r18
 3cc:	0e 94 7d 07 	call	0xefa	; 0xefa <__udivmodhi4>
 3d0:	60 87       	std	Z+8, r22	; 0x08
	max_summation = MAX_SUMMATION /(I_factor +1); 
 3d2:	be 01       	movw	r22, r28
 3d4:	6f 5f       	subi	r22, 0xFF	; 255
 3d6:	7f 4f       	sbci	r23, 0xFF	; 255
 3d8:	c9 01       	movw	r24, r18
 3da:	0e 94 7d 07 	call	0xefa	; 0xefa <__udivmodhi4>
 3de:	77 83       	std	Z+7, r23	; 0x07
 3e0:	66 83       	std	Z+6, r22	; 0x06
}
 3e2:	df 91       	pop	r29
 3e4:	cf 91       	pop	r28
 3e6:	08 95       	ret

000003e8 <_ZN10ServoMotor3pidEv>:

/* this function is called at fixed intervals and computes the 
 * output of the transfer function */
int16_t ServoMotor::pid(){
 3e8:	fc 01       	movw	r30, r24
	error = (target_pos -absolute_position);
 3ea:	21 85       	ldd	r18, Z+9	; 0x09
 3ec:	32 85       	ldd	r19, Z+10	; 0x0a
 3ee:	83 85       	ldd	r24, Z+11	; 0x0b
 3f0:	94 85       	ldd	r25, Z+12	; 0x0c
 3f2:	28 1b       	sub	r18, r24
 3f4:	39 0b       	sbc	r19, r25
 3f6:	36 8b       	std	Z+22, r19	; 0x16
 3f8:	25 8b       	std	Z+21, r18	; 0x15
	uint16_t pterm;
	if(error > max_error){
 3fa:	40 85       	ldd	r20, Z+8	; 0x08
 3fc:	50 e0       	ldi	r21, 0x00	; 0
 3fe:	42 17       	cp	r20, r18
 400:	53 07       	cpc	r21, r19
 402:	84 f0       	brlt	.+32     	; 0x424 <__LOCK_REGION_LENGTH__+0x24>
		pterm = MAX_INT;
	}else if(error < -max_error){
 404:	51 95       	neg	r21
 406:	41 95       	neg	r20
 408:	51 09       	sbc	r21, r1
 40a:	24 17       	cp	r18, r20
 40c:	35 07       	cpc	r19, r21
 40e:	6c f0       	brlt	.+26     	; 0x42a <__LOCK_REGION_LENGTH__+0x2a>
		pterm = -MAX_INT;	
	}else{
		pterm = P_factor * error;		
 410:	40 81       	ld	r20, Z
 412:	51 81       	ldd	r21, Z+1	; 0x01
 414:	24 9f       	mul	r18, r20
 416:	c0 01       	movw	r24, r0
 418:	25 9f       	mul	r18, r21
 41a:	90 0d       	add	r25, r0
 41c:	34 9f       	mul	r19, r20
 41e:	90 0d       	add	r25, r0
 420:	11 24       	eor	r1, r1
 422:	08 95       	ret
 * output of the transfer function */
int16_t ServoMotor::pid(){
	error = (target_pos -absolute_position);
	uint16_t pterm;
	if(error > max_error){
		pterm = MAX_INT;
 424:	84 e6       	ldi	r24, 0x64	; 100
 426:	90 e0       	ldi	r25, 0x00	; 0
 428:	08 95       	ret
	}else if(error < -max_error){
		pterm = -MAX_INT;	
 42a:	8c e9       	ldi	r24, 0x9C	; 156
 42c:	9f ef       	ldi	r25, 0xFF	; 255
	}else{
		pterm = P_factor * error;		
	}
	return pterm;
}
 42e:	08 95       	ret

00000430 <_ZN10ServoMotor6rotateEm>:

void ServoMotor::rotate(uint32_t current_time){
 430:	cf 92       	push	r12
 432:	df 92       	push	r13
 434:	ef 92       	push	r14
 436:	ff 92       	push	r15
 438:	0f 93       	push	r16
 43a:	1f 93       	push	r17
 43c:	cf 93       	push	r28
 43e:	df 93       	push	r29
	int16_t output;
	/*Update the PID at a frequency of 1khz */
	if(current_time - old_time > 10){
 440:	fc 01       	movw	r30, r24
 442:	03 8d       	ldd	r16, Z+27	; 0x1b
 444:	14 8d       	ldd	r17, Z+28	; 0x1c
 446:	25 8d       	ldd	r18, Z+29	; 0x1d
 448:	36 8d       	ldd	r19, Z+30	; 0x1e
 44a:	6a 01       	movw	r12, r20
 44c:	7b 01       	movw	r14, r22
 44e:	c0 1a       	sub	r12, r16
 450:	d1 0a       	sbc	r13, r17
 452:	e2 0a       	sbc	r14, r18
 454:	f3 0a       	sbc	r15, r19
 456:	97 01       	movw	r18, r14
 458:	86 01       	movw	r16, r12
 45a:	0b 30       	cpi	r16, 0x0B	; 11
 45c:	11 05       	cpc	r17, r1
 45e:	21 05       	cpc	r18, r1
 460:	31 05       	cpc	r19, r1
 462:	58 f1       	brcs	.+86     	; 0x4ba <_ZN10ServoMotor6rotateEm+0x8a>
 464:	ec 01       	movw	r28, r24
		old_time = current_time;
 466:	43 8f       	std	Z+27, r20	; 0x1b
 468:	54 8f       	std	Z+28, r21	; 0x1c
 46a:	65 8f       	std	Z+29, r22	; 0x1d
 46c:	76 8f       	std	Z+30, r23	; 0x1e
		output = pid(); 
 46e:	0e 94 f4 01 	call	0x3e8	; 0x3e8 <_ZN10ServoMotor3pidEv>
	
		/*Change direction if output is less than zero */
	//	usart_sendln(output);
		if(output > 0){
 472:	18 16       	cp	r1, r24
 474:	19 06       	cpc	r1, r25
 476:	74 f4       	brge	.+28     	; 0x494 <_ZN10ServoMotor6rotateEm+0x64>
			*servo_register |= dir_a  ;
 478:	ef 8d       	ldd	r30, Y+31	; 0x1f
 47a:	f8 a1       	ldd	r31, Y+32	; 0x20
 47c:	30 81       	ld	r19, Z
 47e:	2c a1       	ldd	r18, Y+36	; 0x24
 480:	23 2b       	or	r18, r19
 482:	20 83       	st	Z, r18
			*servo_register &= ~dir_b;
 484:	ef 8d       	ldd	r30, Y+31	; 0x1f
 486:	f8 a1       	ldd	r31, Y+32	; 0x20
 488:	30 81       	ld	r19, Z
 48a:	2d a1       	ldd	r18, Y+37	; 0x25
 48c:	20 95       	com	r18
 48e:	23 23       	and	r18, r19
 490:	20 83       	st	Z, r18
 492:	10 c0       	rjmp	.+32     	; 0x4b4 <_ZN10ServoMotor6rotateEm+0x84>
		}else{
			*servo_register &= ~dir_a;
 494:	ef 8d       	ldd	r30, Y+31	; 0x1f
 496:	f8 a1       	ldd	r31, Y+32	; 0x20
 498:	30 81       	ld	r19, Z
 49a:	2c a1       	ldd	r18, Y+36	; 0x24
 49c:	20 95       	com	r18
 49e:	23 23       	and	r18, r19
 4a0:	20 83       	st	Z, r18
			*servo_register |= dir_b;
 4a2:	ef 8d       	ldd	r30, Y+31	; 0x1f
 4a4:	f8 a1       	ldd	r31, Y+32	; 0x20
 4a6:	30 81       	ld	r19, Z
 4a8:	2d a1       	ldd	r18, Y+37	; 0x25
 4aa:	23 2b       	or	r18, r19
 4ac:	20 83       	st	Z, r18
			output = output * -1;
 4ae:	91 95       	neg	r25
 4b0:	81 95       	neg	r24
 4b2:	91 09       	sbc	r25, r1
		}
		/* Limit the maximum output */ 	
	
		*servo_pwm = output;
 4b4:	e9 a1       	ldd	r30, Y+33	; 0x21
 4b6:	fa a1       	ldd	r31, Y+34	; 0x22
 4b8:	80 83       	st	Z, r24
		
		
	}
}
 4ba:	df 91       	pop	r29
 4bc:	cf 91       	pop	r28
 4be:	1f 91       	pop	r17
 4c0:	0f 91       	pop	r16
 4c2:	ff 90       	pop	r15
 4c4:	ef 90       	pop	r14
 4c6:	df 90       	pop	r13
 4c8:	cf 90       	pop	r12
 4ca:	08 95       	ret

000004cc <_ZN10ServoMotor5tachoEhh>:
/*Updates the absolute position from the tachometer in the motor*/
void ServoMotor::tacho(uint8_t plus, uint8_t min){
 4cc:	fc 01       	movw	r30, r24
	if(tacho_state == 0){
 4ce:	83 a1       	ldd	r24, Z+35	; 0x23
 4d0:	81 11       	cpse	r24, r1
 4d2:	12 c0       	rjmp	.+36     	; 0x4f8 <_ZN10ServoMotor5tachoEhh+0x2c>
		/* If plus goes high and min is also high it went fowards 
		 * else it went backwards */
		if(plus){
 4d4:	66 23       	and	r22, r22
 4d6:	99 f0       	breq	.+38     	; 0x4fe <_ZN10ServoMotor5tachoEhh+0x32>
			if(min){
 4d8:	44 23       	and	r20, r20
 4da:	31 f0       	breq	.+12     	; 0x4e8 <_ZN10ServoMotor5tachoEhh+0x1c>
				absolute_position++;
 4dc:	83 85       	ldd	r24, Z+11	; 0x0b
 4de:	94 85       	ldd	r25, Z+12	; 0x0c
 4e0:	01 96       	adiw	r24, 0x01	; 1
 4e2:	94 87       	std	Z+12, r25	; 0x0c
 4e4:	83 87       	std	Z+11, r24	; 0x0b
 4e6:	05 c0       	rjmp	.+10     	; 0x4f2 <_ZN10ServoMotor5tachoEhh+0x26>
			}else{
				absolute_position--;
 4e8:	83 85       	ldd	r24, Z+11	; 0x0b
 4ea:	94 85       	ldd	r25, Z+12	; 0x0c
 4ec:	01 97       	sbiw	r24, 0x01	; 1
 4ee:	94 87       	std	Z+12, r25	; 0x0c
 4f0:	83 87       	std	Z+11, r24	; 0x0b
			}
			tacho_state=1; 
 4f2:	81 e0       	ldi	r24, 0x01	; 1
 4f4:	83 a3       	std	Z+35, r24	; 0x23
 4f6:	08 95       	ret
		}
	}else{
		if(!plus){
 4f8:	61 11       	cpse	r22, r1
 4fa:	01 c0       	rjmp	.+2      	; 0x4fe <_ZN10ServoMotor5tachoEhh+0x32>
			tacho_state = 0; 
 4fc:	13 a2       	std	Z+35, r1	; 0x23
 4fe:	08 95       	ret

00000500 <_ZN12StepperMotorC1Eifhh>:
#include <math.h>
#include "Usart.h"
#include "StepperMotor.h"

/* Iniatialize the stepper motor */
StepperMotor::StepperMotor(int16_t current_pos, float step_to_angle, uint8_t dir_pin, uint8_t step_pin)
 500:	ef 92       	push	r14
 502:	0f 93       	push	r16
 504:	cf 93       	push	r28
 506:	df 93       	push	r29
 508:	ec 01       	movw	r28, r24
{
	state = S_WAIT; 
 50a:	19 a2       	std	Y+33, r1	; 0x21
	this->current_pos	= current_pos;
 50c:	7a 83       	std	Y+2, r23	; 0x02
 50e:	69 83       	std	Y+1, r22	; 0x01
	/*this value should ideally be an integer */
	this->step_to_angle	= 1.0f/step_to_angle; 
 510:	60 e0       	ldi	r22, 0x00	; 0
 512:	70 e0       	ldi	r23, 0x00	; 0
 514:	80 e8       	ldi	r24, 0x80	; 128
 516:	9f e3       	ldi	r25, 0x3F	; 63
 518:	0e 94 7f 05 	call	0xafe	; 0xafe <__divsf3>
 51c:	6d 8f       	std	Y+29, r22	; 0x1d
 51e:	7e 8f       	std	Y+30, r23	; 0x1e
 520:	8f 8f       	std	Y+31, r24	; 0x1f
 522:	98 a3       	std	Y+32, r25	; 0x20
	this->dir_pin		= dir_pin;
 524:	0b 8f       	std	Y+27, r16	; 0x1b
	this->step_pin		= step_pin;		
 526:	ec 8e       	std	Y+28, r14	; 0x1c
	stepper_time = 0;
 528:	1f 8a       	std	Y+23, r1	; 0x17
 52a:	18 8e       	std	Y+24, r1	; 0x18
 52c:	19 8e       	std	Y+25, r1	; 0x19
 52e:	1a 8e       	std	Y+26, r1	; 0x1a
	pulse_width = 0;
 530:	18 8a       	std	Y+16, r1	; 0x10
 532:	1f 86       	std	Y+15, r1	; 0x0f
} 
 534:	df 91       	pop	r29
 536:	cf 91       	pop	r28
 538:	0f 91       	pop	r16
 53a:	ef 90       	pop	r14
 53c:	08 95       	ret

0000053e <_ZN12StepperMotor3fsmEm>:
		fsm(current_time); 
	}

}
stepper_fsm StepperMotor::fsm(uint32_t current_time)
{
 53e:	4f 92       	push	r4
 540:	5f 92       	push	r5
 542:	6f 92       	push	r6
 544:	7f 92       	push	r7
 546:	8f 92       	push	r8
 548:	9f 92       	push	r9
 54a:	af 92       	push	r10
 54c:	bf 92       	push	r11
 54e:	cf 92       	push	r12
 550:	df 92       	push	r13
 552:	ef 92       	push	r14
 554:	ff 92       	push	r15
 556:	0f 93       	push	r16
 558:	1f 93       	push	r17
 55a:	cf 93       	push	r28
 55c:	df 93       	push	r29
 55e:	ec 01       	movw	r28, r24
	STEPPER_REGISTER |= step_pin;
 560:	95 b1       	in	r25, 0x05	; 5
 562:	8c 8d       	ldd	r24, Y+28	; 0x1c
 564:	89 2b       	or	r24, r25
 566:	85 b9       	out	0x05, r24	; 5
	/*Generate pulses at a frequency of step time*/
	if(current_time - stepper_time > pulse_width){
 568:	0f 85       	ldd	r16, Y+15	; 0x0f
 56a:	18 89       	ldd	r17, Y+16	; 0x10
 56c:	8f 89       	ldd	r24, Y+23	; 0x17
 56e:	98 8d       	ldd	r25, Y+24	; 0x18
 570:	a9 8d       	ldd	r26, Y+25	; 0x19
 572:	ba 8d       	ldd	r27, Y+26	; 0x1a
 574:	6a 01       	movw	r12, r20
 576:	7b 01       	movw	r14, r22
 578:	c8 1a       	sub	r12, r24
 57a:	d9 0a       	sbc	r13, r25
 57c:	ea 0a       	sbc	r14, r26
 57e:	fb 0a       	sbc	r15, r27
 580:	c8 01       	movw	r24, r16
 582:	01 2e       	mov	r0, r17
 584:	00 0c       	add	r0, r0
 586:	aa 0b       	sbc	r26, r26
 588:	bb 0b       	sbc	r27, r27
 58a:	8c 15       	cp	r24, r12
 58c:	9d 05       	cpc	r25, r13
 58e:	ae 05       	cpc	r26, r14
 590:	bf 05       	cpc	r27, r15
 592:	08 f0       	brcs	.+2      	; 0x596 <_ZN12StepperMotor3fsmEm+0x58>
 594:	97 c0       	rjmp	.+302    	; 0x6c4 <_ZN12StepperMotor3fsmEm+0x186>
		stepper_time = current_time;
 596:	4f 8b       	std	Y+23, r20	; 0x17
 598:	58 8f       	std	Y+24, r21	; 0x18
 59a:	69 8f       	std	Y+25, r22	; 0x19
 59c:	7a 8f       	std	Y+26, r23	; 0x1a
		switch(state){
 59e:	89 a1       	ldd	r24, Y+33	; 0x21
 5a0:	83 30       	cpi	r24, 0x03	; 3
 5a2:	09 f4       	brne	.+2      	; 0x5a6 <_ZN12StepperMotor3fsmEm+0x68>
 5a4:	56 c0       	rjmp	.+172    	; 0x652 <_ZN12StepperMotor3fsmEm+0x114>
 5a6:	84 30       	cpi	r24, 0x04	; 4
 5a8:	09 f4       	brne	.+2      	; 0x5ac <_ZN12StepperMotor3fsmEm+0x6e>
 5aa:	64 c0       	rjmp	.+200    	; 0x674 <_ZN12StepperMotor3fsmEm+0x136>
 5ac:	82 30       	cpi	r24, 0x02	; 2
 5ae:	09 f0       	breq	.+2      	; 0x5b2 <_ZN12StepperMotor3fsmEm+0x74>
 5b0:	7f c0       	rjmp	.+254    	; 0x6b0 <_ZN12StepperMotor3fsmEm+0x172>
			case S_ACCEL:
				pulse_width=(int)pulse_width-(2*(int)pulse_width)/(4.0*pulse_width_counter  +1);	
 5b2:	e9 88       	ldd	r14, Y+17	; 0x11
 5b4:	fa 88       	ldd	r15, Y+18	; 0x12
 5b6:	b8 01       	movw	r22, r16
 5b8:	01 2e       	mov	r0, r17
 5ba:	00 0c       	add	r0, r0
 5bc:	88 0b       	sbc	r24, r24
 5be:	99 0b       	sbc	r25, r25
 5c0:	0e 94 29 06 	call	0xc52	; 0xc52 <__floatsisf>
 5c4:	4b 01       	movw	r8, r22
 5c6:	5c 01       	movw	r10, r24
 5c8:	b8 01       	movw	r22, r16
 5ca:	66 0f       	add	r22, r22
 5cc:	77 1f       	adc	r23, r23
 5ce:	07 2e       	mov	r0, r23
 5d0:	00 0c       	add	r0, r0
 5d2:	88 0b       	sbc	r24, r24
 5d4:	99 0b       	sbc	r25, r25
 5d6:	0e 94 29 06 	call	0xc52	; 0xc52 <__floatsisf>
 5da:	2b 01       	movw	r4, r22
 5dc:	3c 01       	movw	r6, r24
 5de:	b7 01       	movw	r22, r14
 5e0:	0f 2c       	mov	r0, r15
 5e2:	00 0c       	add	r0, r0
 5e4:	88 0b       	sbc	r24, r24
 5e6:	99 0b       	sbc	r25, r25
 5e8:	0e 94 29 06 	call	0xc52	; 0xc52 <__floatsisf>
 5ec:	20 e0       	ldi	r18, 0x00	; 0
 5ee:	30 e0       	ldi	r19, 0x00	; 0
 5f0:	40 e8       	ldi	r20, 0x80	; 128
 5f2:	50 e4       	ldi	r21, 0x40	; 64
 5f4:	0e 94 b5 06 	call	0xd6a	; 0xd6a <__mulsf3>
 5f8:	20 e0       	ldi	r18, 0x00	; 0
 5fa:	30 e0       	ldi	r19, 0x00	; 0
 5fc:	40 e8       	ldi	r20, 0x80	; 128
 5fe:	5f e3       	ldi	r21, 0x3F	; 63
 600:	0e 94 13 05 	call	0xa26	; 0xa26 <__addsf3>
 604:	9b 01       	movw	r18, r22
 606:	ac 01       	movw	r20, r24
 608:	c3 01       	movw	r24, r6
 60a:	b2 01       	movw	r22, r4
 60c:	0e 94 7f 05 	call	0xafe	; 0xafe <__divsf3>
 610:	9b 01       	movw	r18, r22
 612:	ac 01       	movw	r20, r24
 614:	c5 01       	movw	r24, r10
 616:	b4 01       	movw	r22, r8
 618:	0e 94 12 05 	call	0xa24	; 0xa24 <__subsf3>
 61c:	0e 94 f1 05 	call	0xbe2	; 0xbe2 <__fixsfsi>
					
				if (pulse_width <= 10){
 620:	6b 30       	cpi	r22, 0x0B	; 11
 622:	71 05       	cpc	r23, r1
 624:	1c f0       	brlt	.+6      	; 0x62c <_ZN12StepperMotor3fsmEm+0xee>
	/*Generate pulses at a frequency of step time*/
	if(current_time - stepper_time > pulse_width){
		stepper_time = current_time;
		switch(state){
			case S_ACCEL:
				pulse_width=(int)pulse_width-(2*(int)pulse_width)/(4.0*pulse_width_counter  +1);	
 626:	78 8b       	std	Y+16, r23	; 0x10
 628:	6f 87       	std	Y+15, r22	; 0x0f
 62a:	04 c0       	rjmp	.+8      	; 0x634 <_ZN12StepperMotor3fsmEm+0xf6>
					
				if (pulse_width <= 10){
					pulse_width = 10;
 62c:	8a e0       	ldi	r24, 0x0A	; 10
 62e:	90 e0       	ldi	r25, 0x00	; 0
 630:	98 8b       	std	Y+16, r25	; 0x10
 632:	8f 87       	std	Y+15, r24	; 0x0f
				}
				if( step_counter >=  t0){
 634:	2b 89       	ldd	r18, Y+19	; 0x13
 636:	3c 89       	ldd	r19, Y+20	; 0x14
 638:	8f 81       	ldd	r24, Y+7	; 0x07
 63a:	98 85       	ldd	r25, Y+8	; 0x08
 63c:	28 17       	cp	r18, r24
 63e:	39 07       	cpc	r19, r25
 640:	10 f0       	brcs	.+4      	; 0x646 <_ZN12StepperMotor3fsmEm+0x108>
					state = S_CONSTANT;
 642:	83 e0       	ldi	r24, 0x03	; 3
 644:	89 a3       	std	Y+33, r24	; 0x21
				}	
				pulse_width_counter ++;
 646:	8f ef       	ldi	r24, 0xFF	; 255
 648:	e8 1a       	sub	r14, r24
 64a:	f8 0a       	sbc	r15, r24
 64c:	fa 8a       	std	Y+18, r15	; 0x12
 64e:	e9 8a       	std	Y+17, r14	; 0x11
				break; 
 650:	2f c0       	rjmp	.+94     	; 0x6b0 <_ZN12StepperMotor3fsmEm+0x172>
			case S_CONSTANT:
				if(step_counter >= t1){
 652:	2b 89       	ldd	r18, Y+19	; 0x13
 654:	3c 89       	ldd	r19, Y+20	; 0x14
 656:	89 85       	ldd	r24, Y+9	; 0x09
 658:	9a 85       	ldd	r25, Y+10	; 0x0a
 65a:	28 17       	cp	r18, r24
 65c:	39 07       	cpc	r19, r25
 65e:	40 f1       	brcs	.+80     	; 0x6b0 <_ZN12StepperMotor3fsmEm+0x172>
					state = S_DECEL;
 660:	84 e0       	ldi	r24, 0x04	; 4
 662:	89 a3       	std	Y+33, r24	; 0x21
					pulse_width_counter =pulse_width_counter *-1; 
 664:	89 89       	ldd	r24, Y+17	; 0x11
 666:	9a 89       	ldd	r25, Y+18	; 0x12
 668:	91 95       	neg	r25
 66a:	81 95       	neg	r24
 66c:	91 09       	sbc	r25, r1
 66e:	9a 8b       	std	Y+18, r25	; 0x12
 670:	89 8b       	std	Y+17, r24	; 0x11
 672:	1e c0       	rjmp	.+60     	; 0x6b0 <_ZN12StepperMotor3fsmEm+0x172>
					}
				break;
			case S_DECEL:
				pulse_width=(pulse_width-(2*pulse_width)/(4*pulse_width_counter  +1));		
 674:	29 89       	ldd	r18, Y+17	; 0x11
 676:	3a 89       	ldd	r19, Y+18	; 0x12
 678:	c8 01       	movw	r24, r16
 67a:	88 0f       	add	r24, r24
 67c:	99 1f       	adc	r25, r25
 67e:	b9 01       	movw	r22, r18
 680:	66 0f       	add	r22, r22
 682:	77 1f       	adc	r23, r23
 684:	66 0f       	add	r22, r22
 686:	77 1f       	adc	r23, r23
 688:	6f 5f       	subi	r22, 0xFF	; 255
 68a:	7f 4f       	sbci	r23, 0xFF	; 255
 68c:	0e 94 91 07 	call	0xf22	; 0xf22 <__divmodhi4>
 690:	06 1b       	sub	r16, r22
 692:	17 0b       	sbc	r17, r23
 694:	18 8b       	std	Y+16, r17	; 0x10
 696:	0f 87       	std	Y+15, r16	; 0x0f
				if(step_counter >= num_steps){
 698:	4b 89       	ldd	r20, Y+19	; 0x13
 69a:	5c 89       	ldd	r21, Y+20	; 0x14
 69c:	8d 81       	ldd	r24, Y+5	; 0x05
 69e:	9e 81       	ldd	r25, Y+6	; 0x06
 6a0:	48 17       	cp	r20, r24
 6a2:	59 07       	cpc	r21, r25
 6a4:	08 f0       	brcs	.+2      	; 0x6a8 <_ZN12StepperMotor3fsmEm+0x16a>
							start = 0; 
 6a6:	18 82       	st	Y, r1
				}
				pulse_width_counter ++;
 6a8:	2f 5f       	subi	r18, 0xFF	; 255
 6aa:	3f 4f       	sbci	r19, 0xFF	; 255
 6ac:	3a 8b       	std	Y+18, r19	; 0x12
 6ae:	29 8b       	std	Y+17, r18	; 0x11
				break;
		}	
		STEPPER_REGISTER &= ~step_pin;
 6b0:	95 b1       	in	r25, 0x05	; 5
 6b2:	8c 8d       	ldd	r24, Y+28	; 0x1c
 6b4:	80 95       	com	r24
 6b6:	89 23       	and	r24, r25
 6b8:	85 b9       	out	0x05, r24	; 5
		step_counter++; 
 6ba:	8b 89       	ldd	r24, Y+19	; 0x13
 6bc:	9c 89       	ldd	r25, Y+20	; 0x14
 6be:	01 96       	adiw	r24, 0x01	; 1
 6c0:	9c 8b       	std	Y+20, r25	; 0x14
 6c2:	8b 8b       	std	Y+19, r24	; 0x13
	}
	
	
	return state;
}
 6c4:	89 a1       	ldd	r24, Y+33	; 0x21
 6c6:	df 91       	pop	r29
 6c8:	cf 91       	pop	r28
 6ca:	1f 91       	pop	r17
 6cc:	0f 91       	pop	r16
 6ce:	ff 90       	pop	r15
 6d0:	ef 90       	pop	r14
 6d2:	df 90       	pop	r13
 6d4:	cf 90       	pop	r12
 6d6:	bf 90       	pop	r11
 6d8:	af 90       	pop	r10
 6da:	9f 90       	pop	r9
 6dc:	8f 90       	pop	r8
 6de:	7f 90       	pop	r7
 6e0:	6f 90       	pop	r6
 6e2:	5f 90       	pop	r5
 6e4:	4f 90       	pop	r4
 6e6:	08 95       	ret

000006e8 <_ZN12StepperMotor6rotateEm>:
} 




int StepperMotor::rotate(uint32_t current_time){
 6e8:	2f 92       	push	r2
 6ea:	3f 92       	push	r3
 6ec:	4f 92       	push	r4
 6ee:	5f 92       	push	r5
 6f0:	6f 92       	push	r6
 6f2:	7f 92       	push	r7
 6f4:	8f 92       	push	r8
 6f6:	9f 92       	push	r9
 6f8:	af 92       	push	r10
 6fa:	bf 92       	push	r11
 6fc:	cf 92       	push	r12
 6fe:	df 92       	push	r13
 700:	ef 92       	push	r14
 702:	ff 92       	push	r15
 704:	0f 93       	push	r16
 706:	1f 93       	push	r17
 708:	cf 93       	push	r28
 70a:	df 93       	push	r29
 70c:	cd b7       	in	r28, 0x3d	; 61
 70e:	de b7       	in	r29, 0x3e	; 62
 710:	2a 97       	sbiw	r28, 0x0a	; 10
 712:	0f b6       	in	r0, 0x3f	; 63
 714:	f8 94       	cli
 716:	de bf       	out	0x3e, r29	; 62
 718:	0f be       	out	0x3f, r0	; 63
 71a:	cd bf       	out	0x3d, r28	; 61
 71c:	9a 87       	std	Y+10, r25	; 0x0a
 71e:	89 87       	std	Y+9, r24	; 0x09
	if(start == 1){
 720:	fc 01       	movw	r30, r24
 722:	80 81       	ld	r24, Z
 724:	81 30       	cpi	r24, 0x01	; 1
 726:	09 f0       	breq	.+2      	; 0x72a <_ZN12StepperMotor6rotateEm+0x42>
 728:	e7 c0       	rjmp	.+462    	; 0x8f8 <_ZN12StepperMotor6rotateEm+0x210>
		state = S_ACCEL;
 72a:	82 e0       	ldi	r24, 0x02	; 2
 72c:	81 a3       	std	Z+33, r24	; 0x21
		int16_t angle=(target_pos - current_pos);
 72e:	83 81       	ldd	r24, Z+3	; 0x03
 730:	94 81       	ldd	r25, Z+4	; 0x04
 732:	21 81       	ldd	r18, Z+1	; 0x01
 734:	32 81       	ldd	r19, Z+2	; 0x02
 736:	5c 01       	movw	r10, r24
 738:	a2 1a       	sub	r10, r18
 73a:	b3 0a       	sbc	r11, r19
		current_pos = target_pos;
 73c:	92 83       	std	Z+2, r25	; 0x02
 73e:	81 83       	std	Z+1, r24	; 0x01
		if(angle> 0){
 740:	1a 14       	cp	r1, r10
 742:	1b 04       	cpc	r1, r11
 744:	2c f4       	brge	.+10     	; 0x750 <_ZN12StepperMotor6rotateEm+0x68>
			STEPPER_REGISTER |= dir_pin; 
 746:	95 b1       	in	r25, 0x05	; 5
 748:	83 8d       	ldd	r24, Z+27	; 0x1b
 74a:	89 2b       	or	r24, r25
 74c:	85 b9       	out	0x05, r24	; 5
 74e:	13 c0       	rjmp	.+38     	; 0x776 <_ZN12StepperMotor6rotateEm+0x8e>
		}else if(angle <0){
 750:	bb 20       	and	r11, r11
 752:	5c f4       	brge	.+22     	; 0x76a <_ZN12StepperMotor6rotateEm+0x82>
			STEPPER_REGISTER &= ~dir_pin; 
 754:	95 b1       	in	r25, 0x05	; 5
 756:	e9 85       	ldd	r30, Y+9	; 0x09
 758:	fa 85       	ldd	r31, Y+10	; 0x0a
 75a:	83 8d       	ldd	r24, Z+27	; 0x1b
 75c:	80 95       	com	r24
 75e:	89 23       	and	r24, r25
 760:	85 b9       	out	0x05, r24	; 5
			angle = angle * -1;
 762:	b1 94       	neg	r11
 764:	a1 94       	neg	r10
 766:	b1 08       	sbc	r11, r1
 768:	06 c0       	rjmp	.+12     	; 0x776 <_ZN12StepperMotor6rotateEm+0x8e>
		}else if(angle == 0){
 76a:	a1 14       	cp	r10, r1
 76c:	b1 04       	cpc	r11, r1
 76e:	19 f4       	brne	.+6      	; 0x776 <_ZN12StepperMotor6rotateEm+0x8e>
			state = S_WAIT;
 770:	e9 85       	ldd	r30, Y+9	; 0x09
 772:	fa 85       	ldd	r31, Y+10	; 0x0a
 774:	11 a2       	std	Z+33, r1	; 0x21
			start = 0; 
		}

		/* Compute parameters */
		num_steps = angle*step_to_angle;
 776:	e9 85       	ldd	r30, Y+9	; 0x09
 778:	fa 85       	ldd	r31, Y+10	; 0x0a
 77a:	45 8c       	ldd	r4, Z+29	; 0x1d
 77c:	56 8c       	ldd	r5, Z+30	; 0x1e
 77e:	67 8c       	ldd	r6, Z+31	; 0x1f
 780:	70 a0       	ldd	r7, Z+32	; 0x20
 782:	b5 01       	movw	r22, r10
 784:	0b 2c       	mov	r0, r11
 786:	00 0c       	add	r0, r0
 788:	88 0b       	sbc	r24, r24
 78a:	99 0b       	sbc	r25, r25
 78c:	0e 94 29 06 	call	0xc52	; 0xc52 <__floatsisf>
 790:	a3 01       	movw	r20, r6
 792:	92 01       	movw	r18, r4
 794:	0e 94 b5 06 	call	0xd6a	; 0xd6a <__mulsf3>
 798:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <__fixunssfsi>
 79c:	6b 01       	movw	r12, r22
 79e:	7c 01       	movw	r14, r24
 7a0:	e9 85       	ldd	r30, Y+9	; 0x09
 7a2:	fa 85       	ldd	r31, Y+10	; 0x0a
 7a4:	76 83       	std	Z+6, r23	; 0x06
 7a6:	65 83       	std	Z+5, r22	; 0x05
		uint16_t vmax= 0.5*(acceleration*duration-sqrt(pow(acceleration*duration,2)-(angle*acceleration*4)));
 7a8:	03 85       	ldd	r16, Z+11	; 0x0b
 7aa:	14 85       	ldd	r17, Z+12	; 0x0c
 7ac:	85 85       	ldd	r24, Z+13	; 0x0d
 7ae:	96 85       	ldd	r25, Z+14	; 0x0e
 7b0:	08 9f       	mul	r16, r24
 7b2:	b0 01       	movw	r22, r0
 7b4:	09 9f       	mul	r16, r25
 7b6:	70 0d       	add	r23, r0
 7b8:	18 9f       	mul	r17, r24
 7ba:	70 0d       	add	r23, r0
 7bc:	11 24       	eor	r1, r1
 7be:	80 e0       	ldi	r24, 0x00	; 0
 7c0:	90 e0       	ldi	r25, 0x00	; 0
 7c2:	0e 94 27 06 	call	0xc4e	; 0xc4e <__floatunsisf>
 7c6:	69 83       	std	Y+1, r22	; 0x01
 7c8:	7a 83       	std	Y+2, r23	; 0x02
 7ca:	8b 83       	std	Y+3, r24	; 0x03
 7cc:	9c 83       	std	Y+4, r25	; 0x04
 7ce:	a0 9e       	mul	r10, r16
 7d0:	10 01       	movw	r2, r0
 7d2:	a1 9e       	mul	r10, r17
 7d4:	30 0c       	add	r3, r0
 7d6:	b0 9e       	mul	r11, r16
 7d8:	30 0c       	add	r3, r0
 7da:	11 24       	eor	r1, r1
 7dc:	9b 01       	movw	r18, r22
 7de:	ac 01       	movw	r20, r24
 7e0:	0e 94 b5 06 	call	0xd6a	; 0xd6a <__mulsf3>
 7e4:	6d 83       	std	Y+5, r22	; 0x05
 7e6:	7e 83       	std	Y+6, r23	; 0x06
 7e8:	8f 83       	std	Y+7, r24	; 0x07
 7ea:	98 87       	std	Y+8, r25	; 0x08
 7ec:	41 01       	movw	r8, r2
 7ee:	88 0c       	add	r8, r8
 7f0:	99 1c       	adc	r9, r9
 7f2:	88 0c       	add	r8, r8
 7f4:	99 1c       	adc	r9, r9
 7f6:	a1 2c       	mov	r10, r1
 7f8:	b1 2c       	mov	r11, r1
 7fa:	c5 01       	movw	r24, r10
 7fc:	b4 01       	movw	r22, r8
 7fe:	0e 94 27 06 	call	0xc4e	; 0xc4e <__floatunsisf>
 802:	9b 01       	movw	r18, r22
 804:	ac 01       	movw	r20, r24
 806:	6d 81       	ldd	r22, Y+5	; 0x05
 808:	7e 81       	ldd	r23, Y+6	; 0x06
 80a:	8f 81       	ldd	r24, Y+7	; 0x07
 80c:	98 85       	ldd	r25, Y+8	; 0x08
 80e:	0e 94 12 05 	call	0xa24	; 0xa24 <__subsf3>
 812:	0e 94 28 07 	call	0xe50	; 0xe50 <sqrt>
 816:	9b 01       	movw	r18, r22
 818:	ac 01       	movw	r20, r24
		t0=(pow(vmax,2)*num_steps)/(2*angle*acceleration);
 81a:	69 81       	ldd	r22, Y+1	; 0x01
 81c:	7a 81       	ldd	r23, Y+2	; 0x02
 81e:	8b 81       	ldd	r24, Y+3	; 0x03
 820:	9c 81       	ldd	r25, Y+4	; 0x04
 822:	0e 94 12 05 	call	0xa24	; 0xa24 <__subsf3>
 826:	20 e0       	ldi	r18, 0x00	; 0
 828:	30 e0       	ldi	r19, 0x00	; 0
 82a:	40 e0       	ldi	r20, 0x00	; 0
 82c:	5f e3       	ldi	r21, 0x3F	; 63
 82e:	0e 94 b5 06 	call	0xd6a	; 0xd6a <__mulsf3>
 832:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <__fixunssfsi>
 836:	80 e0       	ldi	r24, 0x00	; 0
 838:	90 e0       	ldi	r25, 0x00	; 0
 83a:	0e 94 27 06 	call	0xc4e	; 0xc4e <__floatunsisf>
 83e:	4b 01       	movw	r8, r22
 840:	5c 01       	movw	r10, r24
 842:	b6 01       	movw	r22, r12
 844:	80 e0       	ldi	r24, 0x00	; 0
 846:	90 e0       	ldi	r25, 0x00	; 0
 848:	0e 94 27 06 	call	0xc4e	; 0xc4e <__floatunsisf>
 84c:	69 83       	std	Y+1, r22	; 0x01
 84e:	7a 83       	std	Y+2, r23	; 0x02
 850:	8b 83       	std	Y+3, r24	; 0x03
 852:	9c 83       	std	Y+4, r25	; 0x04
 854:	a5 01       	movw	r20, r10
 856:	94 01       	movw	r18, r8
 858:	c5 01       	movw	r24, r10
 85a:	b4 01       	movw	r22, r8
 85c:	0e 94 b5 06 	call	0xd6a	; 0xd6a <__mulsf3>
 860:	9b 01       	movw	r18, r22
 862:	ac 01       	movw	r20, r24
 864:	69 81       	ldd	r22, Y+1	; 0x01
 866:	7a 81       	ldd	r23, Y+2	; 0x02
 868:	8b 81       	ldd	r24, Y+3	; 0x03
 86a:	9c 81       	ldd	r25, Y+4	; 0x04
 86c:	0e 94 b5 06 	call	0xd6a	; 0xd6a <__mulsf3>
 870:	4b 01       	movw	r8, r22
 872:	5c 01       	movw	r10, r24
 874:	b1 01       	movw	r22, r2
 876:	66 0f       	add	r22, r22
 878:	77 1f       	adc	r23, r23
 87a:	80 e0       	ldi	r24, 0x00	; 0
 87c:	90 e0       	ldi	r25, 0x00	; 0
 87e:	0e 94 27 06 	call	0xc4e	; 0xc4e <__floatunsisf>
 882:	9b 01       	movw	r18, r22
 884:	ac 01       	movw	r20, r24
 886:	c5 01       	movw	r24, r10
 888:	b4 01       	movw	r22, r8
 88a:	0e 94 7f 05 	call	0xafe	; 0xafe <__divsf3>
 88e:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <__fixunssfsi>
 892:	e9 85       	ldd	r30, Y+9	; 0x09
 894:	fa 85       	ldd	r31, Y+10	; 0x0a
 896:	70 87       	std	Z+8, r23	; 0x08
 898:	67 83       	std	Z+7, r22	; 0x07
		t1 =num_steps-t0;
 89a:	c6 01       	movw	r24, r12
 89c:	86 1b       	sub	r24, r22
 89e:	97 0b       	sbc	r25, r23
 8a0:	92 87       	std	Z+10, r25	; 0x0a
 8a2:	81 87       	std	Z+9, r24	; 0x09
		pulse_width =10000* sqrt(2/(acceleration*step_to_angle));
 8a4:	68 01       	movw	r12, r16
 8a6:	e1 2c       	mov	r14, r1
 8a8:	f1 2c       	mov	r15, r1
 8aa:	c7 01       	movw	r24, r14
 8ac:	b6 01       	movw	r22, r12
 8ae:	0e 94 27 06 	call	0xc4e	; 0xc4e <__floatunsisf>
 8b2:	a3 01       	movw	r20, r6
 8b4:	92 01       	movw	r18, r4
 8b6:	0e 94 b5 06 	call	0xd6a	; 0xd6a <__mulsf3>
 8ba:	9b 01       	movw	r18, r22
 8bc:	ac 01       	movw	r20, r24
 8be:	60 e0       	ldi	r22, 0x00	; 0
 8c0:	70 e0       	ldi	r23, 0x00	; 0
 8c2:	80 e0       	ldi	r24, 0x00	; 0
 8c4:	90 e4       	ldi	r25, 0x40	; 64
 8c6:	0e 94 7f 05 	call	0xafe	; 0xafe <__divsf3>
 8ca:	0e 94 28 07 	call	0xe50	; 0xe50 <sqrt>
 8ce:	20 e0       	ldi	r18, 0x00	; 0
 8d0:	30 e4       	ldi	r19, 0x40	; 64
 8d2:	4c e1       	ldi	r20, 0x1C	; 28
 8d4:	56 e4       	ldi	r21, 0x46	; 70
 8d6:	0e 94 b5 06 	call	0xd6a	; 0xd6a <__mulsf3>
 8da:	0e 94 f1 05 	call	0xbe2	; 0xbe2 <__fixsfsi>
 8de:	e9 85       	ldd	r30, Y+9	; 0x09
 8e0:	fa 85       	ldd	r31, Y+10	; 0x0a
 8e2:	70 8b       	std	Z+16, r23	; 0x10
 8e4:	67 87       	std	Z+15, r22	; 0x0f
		/* End  computations */

		step_counter  = 0;
 8e6:	14 8a       	std	Z+20, r1	; 0x14
 8e8:	13 8a       	std	Z+19, r1	; 0x13
		pulse_width_counter  = 1; 
 8ea:	81 e0       	ldi	r24, 0x01	; 1
 8ec:	90 e0       	ldi	r25, 0x00	; 0
 8ee:	92 8b       	std	Z+18, r25	; 0x12
 8f0:	81 8b       	std	Z+17, r24	; 0x11
		start = 2; 
 8f2:	82 e0       	ldi	r24, 0x02	; 2
 8f4:	80 83       	st	Z, r24
 8f6:	06 c0       	rjmp	.+12     	; 0x904 <__stack+0x5>
		usart_send("t0 ");usart_sendln((int)t1); 			
		usart_send("Step time ");usart_sendln((int)pulse_width);
		usart_sendln("####################"); 		
		#endif // DEBUG
	
	}else if(start == 2){
 8f8:	82 30       	cpi	r24, 0x02	; 2
 8fa:	21 f4       	brne	.+8      	; 0x904 <__stack+0x5>
		fsm(current_time); 
 8fc:	89 85       	ldd	r24, Y+9	; 0x09
 8fe:	9a 85       	ldd	r25, Y+10	; 0x0a
 900:	0e 94 9f 02 	call	0x53e	; 0x53e <_ZN12StepperMotor3fsmEm>
	}

}
 904:	2a 96       	adiw	r28, 0x0a	; 10
 906:	0f b6       	in	r0, 0x3f	; 63
 908:	f8 94       	cli
 90a:	de bf       	out	0x3e, r29	; 62
 90c:	0f be       	out	0x3f, r0	; 63
 90e:	cd bf       	out	0x3d, r28	; 61
 910:	df 91       	pop	r29
 912:	cf 91       	pop	r28
 914:	1f 91       	pop	r17
 916:	0f 91       	pop	r16
 918:	ff 90       	pop	r15
 91a:	ef 90       	pop	r14
 91c:	df 90       	pop	r13
 91e:	cf 90       	pop	r12
 920:	bf 90       	pop	r11
 922:	af 90       	pop	r10
 924:	9f 90       	pop	r9
 926:	8f 90       	pop	r8
 928:	7f 90       	pop	r7
 92a:	6f 90       	pop	r6
 92c:	5f 90       	pop	r5
 92e:	4f 90       	pop	r4
 930:	3f 90       	pop	r3
 932:	2f 90       	pop	r2
 934:	08 95       	ret

00000936 <_Z12timer_enablev>:
	timer_counter = 0; 
}

//Reset the counter
void timer_reset(){
	timer_counter = 0; 
 936:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
 93a:	e1 e8       	ldi	r30, 0x81	; 129
 93c:	f0 e0       	ldi	r31, 0x00	; 0
 93e:	10 82       	st	Z, r1
 940:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
 944:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
 948:	88 e1       	ldi	r24, 0x18	; 24
 94a:	90 e0       	ldi	r25, 0x00	; 0
 94c:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__DATA_REGION_ORIGIN__+0x29>
 950:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__DATA_REGION_ORIGIN__+0x28>
 954:	80 81       	ld	r24, Z
 956:	88 60       	ori	r24, 0x08	; 8
 958:	80 83       	st	Z, r24
 95a:	80 81       	ld	r24, Z
 95c:	83 60       	ori	r24, 0x03	; 3
 95e:	80 83       	st	Z, r24
 960:	ef e6       	ldi	r30, 0x6F	; 111
 962:	f0 e0       	ldi	r31, 0x00	; 0
 964:	80 81       	ld	r24, Z
 966:	82 60       	ori	r24, 0x02	; 2
 968:	80 83       	st	Z, r24
 96a:	10 92 16 01 	sts	0x0116, r1	; 0x800116 <timer_counter>
 96e:	10 92 17 01 	sts	0x0117, r1	; 0x800117 <timer_counter+0x1>
 972:	10 92 18 01 	sts	0x0118, r1	; 0x800118 <timer_counter+0x2>
 976:	10 92 19 01 	sts	0x0119, r1	; 0x800119 <timer_counter+0x3>
 97a:	08 95       	ret

0000097c <_Z9timer_10kv>:
}

//Return the elapsed time since the counter was enable 
uint32_t timer_10k(){
	return timer_counter;
 97c:	60 91 16 01 	lds	r22, 0x0116	; 0x800116 <timer_counter>
 980:	70 91 17 01 	lds	r23, 0x0117	; 0x800117 <timer_counter+0x1>
 984:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <timer_counter+0x2>
 988:	90 91 19 01 	lds	r25, 0x0119	; 0x800119 <timer_counter+0x3>
}
 98c:	08 95       	ret

0000098e <__vector_11>:

//interrupt vector 
ISR (TIMER1_COMPA_vect) {
 98e:	1f 92       	push	r1
 990:	0f 92       	push	r0
 992:	0f b6       	in	r0, 0x3f	; 63
 994:	0f 92       	push	r0
 996:	11 24       	eor	r1, r1
 998:	8f 93       	push	r24
 99a:	9f 93       	push	r25
 99c:	af 93       	push	r26
 99e:	bf 93       	push	r27
	timer_counter++;
 9a0:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <timer_counter>
 9a4:	90 91 17 01 	lds	r25, 0x0117	; 0x800117 <timer_counter+0x1>
 9a8:	a0 91 18 01 	lds	r26, 0x0118	; 0x800118 <timer_counter+0x2>
 9ac:	b0 91 19 01 	lds	r27, 0x0119	; 0x800119 <timer_counter+0x3>
 9b0:	01 96       	adiw	r24, 0x01	; 1
 9b2:	a1 1d       	adc	r26, r1
 9b4:	b1 1d       	adc	r27, r1
 9b6:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <timer_counter>
 9ba:	90 93 17 01 	sts	0x0117, r25	; 0x800117 <timer_counter+0x1>
 9be:	a0 93 18 01 	sts	0x0118, r26	; 0x800118 <timer_counter+0x2>
 9c2:	b0 93 19 01 	sts	0x0119, r27	; 0x800119 <timer_counter+0x3>
 9c6:	bf 91       	pop	r27
 9c8:	af 91       	pop	r26
 9ca:	9f 91       	pop	r25
 9cc:	8f 91       	pop	r24
 9ce:	0f 90       	pop	r0
 9d0:	0f be       	out	0x3f, r0	; 63
 9d2:	0f 90       	pop	r0
 9d4:	1f 90       	pop	r1
 9d6:	18 95       	reti

000009d8 <_Z12usart_enablej>:
volatile uint8_t usart_buffer_counter = 0; 
volatile uint8_t fifo_counter = 0;
bool usart_interrupt = false; 

void usart_enable(uint16_t baudrate){
	UCSR0B = (1 << TXEN0) | (1 << RXEN0) | (1 << RXCIE0); // Enable the USART Transmitter and  receive interrupt
 9d8:	28 e9       	ldi	r18, 0x98	; 152
 9da:	20 93 c1 00 	sts	0x00C1, r18	; 0x8000c1 <__DATA_REGION_ORIGIN__+0x61>
	UCSR0C = (1 << UCSZ01) | (1 << UCSZ00); /* 8 data bits, 1 stop bit */
 9de:	26 e0       	ldi	r18, 0x06	; 6
 9e0:	20 93 c2 00 	sts	0x00C2, r18	; 0x8000c2 <__DATA_REGION_ORIGIN__+0x62>
	
	baudrate = F_CPU/(16.0*baudrate) -1;	
 9e4:	bc 01       	movw	r22, r24
 9e6:	80 e0       	ldi	r24, 0x00	; 0
 9e8:	90 e0       	ldi	r25, 0x00	; 0
 9ea:	0e 94 27 06 	call	0xc4e	; 0xc4e <__floatunsisf>
 9ee:	20 e0       	ldi	r18, 0x00	; 0
 9f0:	30 e0       	ldi	r19, 0x00	; 0
 9f2:	40 e8       	ldi	r20, 0x80	; 128
 9f4:	51 e4       	ldi	r21, 0x41	; 65
 9f6:	0e 94 b5 06 	call	0xd6a	; 0xd6a <__mulsf3>
 9fa:	9b 01       	movw	r18, r22
 9fc:	ac 01       	movw	r20, r24
 9fe:	60 e0       	ldi	r22, 0x00	; 0
 a00:	74 e2       	ldi	r23, 0x24	; 36
 a02:	84 e7       	ldi	r24, 0x74	; 116
 a04:	9b e4       	ldi	r25, 0x4B	; 75
 a06:	0e 94 7f 05 	call	0xafe	; 0xafe <__divsf3>
 a0a:	20 e0       	ldi	r18, 0x00	; 0
 a0c:	30 e0       	ldi	r19, 0x00	; 0
 a0e:	40 e8       	ldi	r20, 0x80	; 128
 a10:	5f e3       	ldi	r21, 0x3F	; 63
 a12:	0e 94 12 05 	call	0xa24	; 0xa24 <__subsf3>
 a16:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <__fixunssfsi>
	UBRR0H=baudrate >> 8;
 a1a:	70 93 c5 00 	sts	0x00C5, r23	; 0x8000c5 <__DATA_REGION_ORIGIN__+0x65>
	UBRR0L=baudrate & 0xFF; 
 a1e:	60 93 c4 00 	sts	0x00C4, r22	; 0x8000c4 <__DATA_REGION_ORIGIN__+0x64>
 a22:	08 95       	ret

00000a24 <__subsf3>:
 a24:	50 58       	subi	r21, 0x80	; 128

00000a26 <__addsf3>:
 a26:	bb 27       	eor	r27, r27
 a28:	aa 27       	eor	r26, r26
 a2a:	0e 94 2a 05 	call	0xa54	; 0xa54 <__addsf3x>
 a2e:	0c 94 7b 06 	jmp	0xcf6	; 0xcf6 <__fp_round>
 a32:	0e 94 6d 06 	call	0xcda	; 0xcda <__fp_pscA>
 a36:	38 f0       	brcs	.+14     	; 0xa46 <__addsf3+0x20>
 a38:	0e 94 74 06 	call	0xce8	; 0xce8 <__fp_pscB>
 a3c:	20 f0       	brcs	.+8      	; 0xa46 <__addsf3+0x20>
 a3e:	39 f4       	brne	.+14     	; 0xa4e <__addsf3+0x28>
 a40:	9f 3f       	cpi	r25, 0xFF	; 255
 a42:	19 f4       	brne	.+6      	; 0xa4a <__addsf3+0x24>
 a44:	26 f4       	brtc	.+8      	; 0xa4e <__addsf3+0x28>
 a46:	0c 94 6a 06 	jmp	0xcd4	; 0xcd4 <__fp_nan>
 a4a:	0e f4       	brtc	.+2      	; 0xa4e <__addsf3+0x28>
 a4c:	e0 95       	com	r30
 a4e:	e7 fb       	bst	r30, 7
 a50:	0c 94 64 06 	jmp	0xcc8	; 0xcc8 <__fp_inf>

00000a54 <__addsf3x>:
 a54:	e9 2f       	mov	r30, r25
 a56:	0e 94 8c 06 	call	0xd18	; 0xd18 <__fp_split3>
 a5a:	58 f3       	brcs	.-42     	; 0xa32 <__addsf3+0xc>
 a5c:	ba 17       	cp	r27, r26
 a5e:	62 07       	cpc	r22, r18
 a60:	73 07       	cpc	r23, r19
 a62:	84 07       	cpc	r24, r20
 a64:	95 07       	cpc	r25, r21
 a66:	20 f0       	brcs	.+8      	; 0xa70 <__addsf3x+0x1c>
 a68:	79 f4       	brne	.+30     	; 0xa88 <__addsf3x+0x34>
 a6a:	a6 f5       	brtc	.+104    	; 0xad4 <__addsf3x+0x80>
 a6c:	0c 94 ae 06 	jmp	0xd5c	; 0xd5c <__fp_zero>
 a70:	0e f4       	brtc	.+2      	; 0xa74 <__addsf3x+0x20>
 a72:	e0 95       	com	r30
 a74:	0b 2e       	mov	r0, r27
 a76:	ba 2f       	mov	r27, r26
 a78:	a0 2d       	mov	r26, r0
 a7a:	0b 01       	movw	r0, r22
 a7c:	b9 01       	movw	r22, r18
 a7e:	90 01       	movw	r18, r0
 a80:	0c 01       	movw	r0, r24
 a82:	ca 01       	movw	r24, r20
 a84:	a0 01       	movw	r20, r0
 a86:	11 24       	eor	r1, r1
 a88:	ff 27       	eor	r31, r31
 a8a:	59 1b       	sub	r21, r25
 a8c:	99 f0       	breq	.+38     	; 0xab4 <__addsf3x+0x60>
 a8e:	59 3f       	cpi	r21, 0xF9	; 249
 a90:	50 f4       	brcc	.+20     	; 0xaa6 <__addsf3x+0x52>
 a92:	50 3e       	cpi	r21, 0xE0	; 224
 a94:	68 f1       	brcs	.+90     	; 0xaf0 <__addsf3x+0x9c>
 a96:	1a 16       	cp	r1, r26
 a98:	f0 40       	sbci	r31, 0x00	; 0
 a9a:	a2 2f       	mov	r26, r18
 a9c:	23 2f       	mov	r18, r19
 a9e:	34 2f       	mov	r19, r20
 aa0:	44 27       	eor	r20, r20
 aa2:	58 5f       	subi	r21, 0xF8	; 248
 aa4:	f3 cf       	rjmp	.-26     	; 0xa8c <__addsf3x+0x38>
 aa6:	46 95       	lsr	r20
 aa8:	37 95       	ror	r19
 aaa:	27 95       	ror	r18
 aac:	a7 95       	ror	r26
 aae:	f0 40       	sbci	r31, 0x00	; 0
 ab0:	53 95       	inc	r21
 ab2:	c9 f7       	brne	.-14     	; 0xaa6 <__addsf3x+0x52>
 ab4:	7e f4       	brtc	.+30     	; 0xad4 <__addsf3x+0x80>
 ab6:	1f 16       	cp	r1, r31
 ab8:	ba 0b       	sbc	r27, r26
 aba:	62 0b       	sbc	r22, r18
 abc:	73 0b       	sbc	r23, r19
 abe:	84 0b       	sbc	r24, r20
 ac0:	ba f0       	brmi	.+46     	; 0xaf0 <__addsf3x+0x9c>
 ac2:	91 50       	subi	r25, 0x01	; 1
 ac4:	a1 f0       	breq	.+40     	; 0xaee <__addsf3x+0x9a>
 ac6:	ff 0f       	add	r31, r31
 ac8:	bb 1f       	adc	r27, r27
 aca:	66 1f       	adc	r22, r22
 acc:	77 1f       	adc	r23, r23
 ace:	88 1f       	adc	r24, r24
 ad0:	c2 f7       	brpl	.-16     	; 0xac2 <__addsf3x+0x6e>
 ad2:	0e c0       	rjmp	.+28     	; 0xaf0 <__addsf3x+0x9c>
 ad4:	ba 0f       	add	r27, r26
 ad6:	62 1f       	adc	r22, r18
 ad8:	73 1f       	adc	r23, r19
 ada:	84 1f       	adc	r24, r20
 adc:	48 f4       	brcc	.+18     	; 0xaf0 <__addsf3x+0x9c>
 ade:	87 95       	ror	r24
 ae0:	77 95       	ror	r23
 ae2:	67 95       	ror	r22
 ae4:	b7 95       	ror	r27
 ae6:	f7 95       	ror	r31
 ae8:	9e 3f       	cpi	r25, 0xFE	; 254
 aea:	08 f0       	brcs	.+2      	; 0xaee <__addsf3x+0x9a>
 aec:	b0 cf       	rjmp	.-160    	; 0xa4e <__addsf3+0x28>
 aee:	93 95       	inc	r25
 af0:	88 0f       	add	r24, r24
 af2:	08 f0       	brcs	.+2      	; 0xaf6 <__addsf3x+0xa2>
 af4:	99 27       	eor	r25, r25
 af6:	ee 0f       	add	r30, r30
 af8:	97 95       	ror	r25
 afa:	87 95       	ror	r24
 afc:	08 95       	ret

00000afe <__divsf3>:
 afe:	0e 94 93 05 	call	0xb26	; 0xb26 <__divsf3x>
 b02:	0c 94 7b 06 	jmp	0xcf6	; 0xcf6 <__fp_round>
 b06:	0e 94 74 06 	call	0xce8	; 0xce8 <__fp_pscB>
 b0a:	58 f0       	brcs	.+22     	; 0xb22 <__divsf3+0x24>
 b0c:	0e 94 6d 06 	call	0xcda	; 0xcda <__fp_pscA>
 b10:	40 f0       	brcs	.+16     	; 0xb22 <__divsf3+0x24>
 b12:	29 f4       	brne	.+10     	; 0xb1e <__divsf3+0x20>
 b14:	5f 3f       	cpi	r21, 0xFF	; 255
 b16:	29 f0       	breq	.+10     	; 0xb22 <__divsf3+0x24>
 b18:	0c 94 64 06 	jmp	0xcc8	; 0xcc8 <__fp_inf>
 b1c:	51 11       	cpse	r21, r1
 b1e:	0c 94 af 06 	jmp	0xd5e	; 0xd5e <__fp_szero>
 b22:	0c 94 6a 06 	jmp	0xcd4	; 0xcd4 <__fp_nan>

00000b26 <__divsf3x>:
 b26:	0e 94 8c 06 	call	0xd18	; 0xd18 <__fp_split3>
 b2a:	68 f3       	brcs	.-38     	; 0xb06 <__divsf3+0x8>

00000b2c <__divsf3_pse>:
 b2c:	99 23       	and	r25, r25
 b2e:	b1 f3       	breq	.-20     	; 0xb1c <__divsf3+0x1e>
 b30:	55 23       	and	r21, r21
 b32:	91 f3       	breq	.-28     	; 0xb18 <__divsf3+0x1a>
 b34:	95 1b       	sub	r25, r21
 b36:	55 0b       	sbc	r21, r21
 b38:	bb 27       	eor	r27, r27
 b3a:	aa 27       	eor	r26, r26
 b3c:	62 17       	cp	r22, r18
 b3e:	73 07       	cpc	r23, r19
 b40:	84 07       	cpc	r24, r20
 b42:	38 f0       	brcs	.+14     	; 0xb52 <__divsf3_pse+0x26>
 b44:	9f 5f       	subi	r25, 0xFF	; 255
 b46:	5f 4f       	sbci	r21, 0xFF	; 255
 b48:	22 0f       	add	r18, r18
 b4a:	33 1f       	adc	r19, r19
 b4c:	44 1f       	adc	r20, r20
 b4e:	aa 1f       	adc	r26, r26
 b50:	a9 f3       	breq	.-22     	; 0xb3c <__divsf3_pse+0x10>
 b52:	35 d0       	rcall	.+106    	; 0xbbe <__divsf3_pse+0x92>
 b54:	0e 2e       	mov	r0, r30
 b56:	3a f0       	brmi	.+14     	; 0xb66 <__divsf3_pse+0x3a>
 b58:	e0 e8       	ldi	r30, 0x80	; 128
 b5a:	32 d0       	rcall	.+100    	; 0xbc0 <__divsf3_pse+0x94>
 b5c:	91 50       	subi	r25, 0x01	; 1
 b5e:	50 40       	sbci	r21, 0x00	; 0
 b60:	e6 95       	lsr	r30
 b62:	00 1c       	adc	r0, r0
 b64:	ca f7       	brpl	.-14     	; 0xb58 <__divsf3_pse+0x2c>
 b66:	2b d0       	rcall	.+86     	; 0xbbe <__divsf3_pse+0x92>
 b68:	fe 2f       	mov	r31, r30
 b6a:	29 d0       	rcall	.+82     	; 0xbbe <__divsf3_pse+0x92>
 b6c:	66 0f       	add	r22, r22
 b6e:	77 1f       	adc	r23, r23
 b70:	88 1f       	adc	r24, r24
 b72:	bb 1f       	adc	r27, r27
 b74:	26 17       	cp	r18, r22
 b76:	37 07       	cpc	r19, r23
 b78:	48 07       	cpc	r20, r24
 b7a:	ab 07       	cpc	r26, r27
 b7c:	b0 e8       	ldi	r27, 0x80	; 128
 b7e:	09 f0       	breq	.+2      	; 0xb82 <__divsf3_pse+0x56>
 b80:	bb 0b       	sbc	r27, r27
 b82:	80 2d       	mov	r24, r0
 b84:	bf 01       	movw	r22, r30
 b86:	ff 27       	eor	r31, r31
 b88:	93 58       	subi	r25, 0x83	; 131
 b8a:	5f 4f       	sbci	r21, 0xFF	; 255
 b8c:	3a f0       	brmi	.+14     	; 0xb9c <__divsf3_pse+0x70>
 b8e:	9e 3f       	cpi	r25, 0xFE	; 254
 b90:	51 05       	cpc	r21, r1
 b92:	78 f0       	brcs	.+30     	; 0xbb2 <__divsf3_pse+0x86>
 b94:	0c 94 64 06 	jmp	0xcc8	; 0xcc8 <__fp_inf>
 b98:	0c 94 af 06 	jmp	0xd5e	; 0xd5e <__fp_szero>
 b9c:	5f 3f       	cpi	r21, 0xFF	; 255
 b9e:	e4 f3       	brlt	.-8      	; 0xb98 <__divsf3_pse+0x6c>
 ba0:	98 3e       	cpi	r25, 0xE8	; 232
 ba2:	d4 f3       	brlt	.-12     	; 0xb98 <__divsf3_pse+0x6c>
 ba4:	86 95       	lsr	r24
 ba6:	77 95       	ror	r23
 ba8:	67 95       	ror	r22
 baa:	b7 95       	ror	r27
 bac:	f7 95       	ror	r31
 bae:	9f 5f       	subi	r25, 0xFF	; 255
 bb0:	c9 f7       	brne	.-14     	; 0xba4 <__divsf3_pse+0x78>
 bb2:	88 0f       	add	r24, r24
 bb4:	91 1d       	adc	r25, r1
 bb6:	96 95       	lsr	r25
 bb8:	87 95       	ror	r24
 bba:	97 f9       	bld	r25, 7
 bbc:	08 95       	ret
 bbe:	e1 e0       	ldi	r30, 0x01	; 1
 bc0:	66 0f       	add	r22, r22
 bc2:	77 1f       	adc	r23, r23
 bc4:	88 1f       	adc	r24, r24
 bc6:	bb 1f       	adc	r27, r27
 bc8:	62 17       	cp	r22, r18
 bca:	73 07       	cpc	r23, r19
 bcc:	84 07       	cpc	r24, r20
 bce:	ba 07       	cpc	r27, r26
 bd0:	20 f0       	brcs	.+8      	; 0xbda <__divsf3_pse+0xae>
 bd2:	62 1b       	sub	r22, r18
 bd4:	73 0b       	sbc	r23, r19
 bd6:	84 0b       	sbc	r24, r20
 bd8:	ba 0b       	sbc	r27, r26
 bda:	ee 1f       	adc	r30, r30
 bdc:	88 f7       	brcc	.-30     	; 0xbc0 <__divsf3_pse+0x94>
 bde:	e0 95       	com	r30
 be0:	08 95       	ret

00000be2 <__fixsfsi>:
 be2:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <__fixunssfsi>
 be6:	68 94       	set
 be8:	b1 11       	cpse	r27, r1
 bea:	0c 94 af 06 	jmp	0xd5e	; 0xd5e <__fp_szero>
 bee:	08 95       	ret

00000bf0 <__fixunssfsi>:
 bf0:	0e 94 94 06 	call	0xd28	; 0xd28 <__fp_splitA>
 bf4:	88 f0       	brcs	.+34     	; 0xc18 <__fixunssfsi+0x28>
 bf6:	9f 57       	subi	r25, 0x7F	; 127
 bf8:	98 f0       	brcs	.+38     	; 0xc20 <__fixunssfsi+0x30>
 bfa:	b9 2f       	mov	r27, r25
 bfc:	99 27       	eor	r25, r25
 bfe:	b7 51       	subi	r27, 0x17	; 23
 c00:	b0 f0       	brcs	.+44     	; 0xc2e <__fixunssfsi+0x3e>
 c02:	e1 f0       	breq	.+56     	; 0xc3c <__fixunssfsi+0x4c>
 c04:	66 0f       	add	r22, r22
 c06:	77 1f       	adc	r23, r23
 c08:	88 1f       	adc	r24, r24
 c0a:	99 1f       	adc	r25, r25
 c0c:	1a f0       	brmi	.+6      	; 0xc14 <__fixunssfsi+0x24>
 c0e:	ba 95       	dec	r27
 c10:	c9 f7       	brne	.-14     	; 0xc04 <__fixunssfsi+0x14>
 c12:	14 c0       	rjmp	.+40     	; 0xc3c <__fixunssfsi+0x4c>
 c14:	b1 30       	cpi	r27, 0x01	; 1
 c16:	91 f0       	breq	.+36     	; 0xc3c <__fixunssfsi+0x4c>
 c18:	0e 94 ae 06 	call	0xd5c	; 0xd5c <__fp_zero>
 c1c:	b1 e0       	ldi	r27, 0x01	; 1
 c1e:	08 95       	ret
 c20:	0c 94 ae 06 	jmp	0xd5c	; 0xd5c <__fp_zero>
 c24:	67 2f       	mov	r22, r23
 c26:	78 2f       	mov	r23, r24
 c28:	88 27       	eor	r24, r24
 c2a:	b8 5f       	subi	r27, 0xF8	; 248
 c2c:	39 f0       	breq	.+14     	; 0xc3c <__fixunssfsi+0x4c>
 c2e:	b9 3f       	cpi	r27, 0xF9	; 249
 c30:	cc f3       	brlt	.-14     	; 0xc24 <__fixunssfsi+0x34>
 c32:	86 95       	lsr	r24
 c34:	77 95       	ror	r23
 c36:	67 95       	ror	r22
 c38:	b3 95       	inc	r27
 c3a:	d9 f7       	brne	.-10     	; 0xc32 <__fixunssfsi+0x42>
 c3c:	3e f4       	brtc	.+14     	; 0xc4c <__fixunssfsi+0x5c>
 c3e:	90 95       	com	r25
 c40:	80 95       	com	r24
 c42:	70 95       	com	r23
 c44:	61 95       	neg	r22
 c46:	7f 4f       	sbci	r23, 0xFF	; 255
 c48:	8f 4f       	sbci	r24, 0xFF	; 255
 c4a:	9f 4f       	sbci	r25, 0xFF	; 255
 c4c:	08 95       	ret

00000c4e <__floatunsisf>:
 c4e:	e8 94       	clt
 c50:	09 c0       	rjmp	.+18     	; 0xc64 <__floatsisf+0x12>

00000c52 <__floatsisf>:
 c52:	97 fb       	bst	r25, 7
 c54:	3e f4       	brtc	.+14     	; 0xc64 <__floatsisf+0x12>
 c56:	90 95       	com	r25
 c58:	80 95       	com	r24
 c5a:	70 95       	com	r23
 c5c:	61 95       	neg	r22
 c5e:	7f 4f       	sbci	r23, 0xFF	; 255
 c60:	8f 4f       	sbci	r24, 0xFF	; 255
 c62:	9f 4f       	sbci	r25, 0xFF	; 255
 c64:	99 23       	and	r25, r25
 c66:	a9 f0       	breq	.+42     	; 0xc92 <__floatsisf+0x40>
 c68:	f9 2f       	mov	r31, r25
 c6a:	96 e9       	ldi	r25, 0x96	; 150
 c6c:	bb 27       	eor	r27, r27
 c6e:	93 95       	inc	r25
 c70:	f6 95       	lsr	r31
 c72:	87 95       	ror	r24
 c74:	77 95       	ror	r23
 c76:	67 95       	ror	r22
 c78:	b7 95       	ror	r27
 c7a:	f1 11       	cpse	r31, r1
 c7c:	f8 cf       	rjmp	.-16     	; 0xc6e <__floatsisf+0x1c>
 c7e:	fa f4       	brpl	.+62     	; 0xcbe <__floatsisf+0x6c>
 c80:	bb 0f       	add	r27, r27
 c82:	11 f4       	brne	.+4      	; 0xc88 <__floatsisf+0x36>
 c84:	60 ff       	sbrs	r22, 0
 c86:	1b c0       	rjmp	.+54     	; 0xcbe <__floatsisf+0x6c>
 c88:	6f 5f       	subi	r22, 0xFF	; 255
 c8a:	7f 4f       	sbci	r23, 0xFF	; 255
 c8c:	8f 4f       	sbci	r24, 0xFF	; 255
 c8e:	9f 4f       	sbci	r25, 0xFF	; 255
 c90:	16 c0       	rjmp	.+44     	; 0xcbe <__floatsisf+0x6c>
 c92:	88 23       	and	r24, r24
 c94:	11 f0       	breq	.+4      	; 0xc9a <__floatsisf+0x48>
 c96:	96 e9       	ldi	r25, 0x96	; 150
 c98:	11 c0       	rjmp	.+34     	; 0xcbc <__floatsisf+0x6a>
 c9a:	77 23       	and	r23, r23
 c9c:	21 f0       	breq	.+8      	; 0xca6 <__floatsisf+0x54>
 c9e:	9e e8       	ldi	r25, 0x8E	; 142
 ca0:	87 2f       	mov	r24, r23
 ca2:	76 2f       	mov	r23, r22
 ca4:	05 c0       	rjmp	.+10     	; 0xcb0 <__floatsisf+0x5e>
 ca6:	66 23       	and	r22, r22
 ca8:	71 f0       	breq	.+28     	; 0xcc6 <__floatsisf+0x74>
 caa:	96 e8       	ldi	r25, 0x86	; 134
 cac:	86 2f       	mov	r24, r22
 cae:	70 e0       	ldi	r23, 0x00	; 0
 cb0:	60 e0       	ldi	r22, 0x00	; 0
 cb2:	2a f0       	brmi	.+10     	; 0xcbe <__floatsisf+0x6c>
 cb4:	9a 95       	dec	r25
 cb6:	66 0f       	add	r22, r22
 cb8:	77 1f       	adc	r23, r23
 cba:	88 1f       	adc	r24, r24
 cbc:	da f7       	brpl	.-10     	; 0xcb4 <__floatsisf+0x62>
 cbe:	88 0f       	add	r24, r24
 cc0:	96 95       	lsr	r25
 cc2:	87 95       	ror	r24
 cc4:	97 f9       	bld	r25, 7
 cc6:	08 95       	ret

00000cc8 <__fp_inf>:
 cc8:	97 f9       	bld	r25, 7
 cca:	9f 67       	ori	r25, 0x7F	; 127
 ccc:	80 e8       	ldi	r24, 0x80	; 128
 cce:	70 e0       	ldi	r23, 0x00	; 0
 cd0:	60 e0       	ldi	r22, 0x00	; 0
 cd2:	08 95       	ret

00000cd4 <__fp_nan>:
 cd4:	9f ef       	ldi	r25, 0xFF	; 255
 cd6:	80 ec       	ldi	r24, 0xC0	; 192
 cd8:	08 95       	ret

00000cda <__fp_pscA>:
 cda:	00 24       	eor	r0, r0
 cdc:	0a 94       	dec	r0
 cde:	16 16       	cp	r1, r22
 ce0:	17 06       	cpc	r1, r23
 ce2:	18 06       	cpc	r1, r24
 ce4:	09 06       	cpc	r0, r25
 ce6:	08 95       	ret

00000ce8 <__fp_pscB>:
 ce8:	00 24       	eor	r0, r0
 cea:	0a 94       	dec	r0
 cec:	12 16       	cp	r1, r18
 cee:	13 06       	cpc	r1, r19
 cf0:	14 06       	cpc	r1, r20
 cf2:	05 06       	cpc	r0, r21
 cf4:	08 95       	ret

00000cf6 <__fp_round>:
 cf6:	09 2e       	mov	r0, r25
 cf8:	03 94       	inc	r0
 cfa:	00 0c       	add	r0, r0
 cfc:	11 f4       	brne	.+4      	; 0xd02 <__fp_round+0xc>
 cfe:	88 23       	and	r24, r24
 d00:	52 f0       	brmi	.+20     	; 0xd16 <__fp_round+0x20>
 d02:	bb 0f       	add	r27, r27
 d04:	40 f4       	brcc	.+16     	; 0xd16 <__fp_round+0x20>
 d06:	bf 2b       	or	r27, r31
 d08:	11 f4       	brne	.+4      	; 0xd0e <__fp_round+0x18>
 d0a:	60 ff       	sbrs	r22, 0
 d0c:	04 c0       	rjmp	.+8      	; 0xd16 <__fp_round+0x20>
 d0e:	6f 5f       	subi	r22, 0xFF	; 255
 d10:	7f 4f       	sbci	r23, 0xFF	; 255
 d12:	8f 4f       	sbci	r24, 0xFF	; 255
 d14:	9f 4f       	sbci	r25, 0xFF	; 255
 d16:	08 95       	ret

00000d18 <__fp_split3>:
 d18:	57 fd       	sbrc	r21, 7
 d1a:	90 58       	subi	r25, 0x80	; 128
 d1c:	44 0f       	add	r20, r20
 d1e:	55 1f       	adc	r21, r21
 d20:	59 f0       	breq	.+22     	; 0xd38 <__fp_splitA+0x10>
 d22:	5f 3f       	cpi	r21, 0xFF	; 255
 d24:	71 f0       	breq	.+28     	; 0xd42 <__fp_splitA+0x1a>
 d26:	47 95       	ror	r20

00000d28 <__fp_splitA>:
 d28:	88 0f       	add	r24, r24
 d2a:	97 fb       	bst	r25, 7
 d2c:	99 1f       	adc	r25, r25
 d2e:	61 f0       	breq	.+24     	; 0xd48 <__fp_splitA+0x20>
 d30:	9f 3f       	cpi	r25, 0xFF	; 255
 d32:	79 f0       	breq	.+30     	; 0xd52 <__fp_splitA+0x2a>
 d34:	87 95       	ror	r24
 d36:	08 95       	ret
 d38:	12 16       	cp	r1, r18
 d3a:	13 06       	cpc	r1, r19
 d3c:	14 06       	cpc	r1, r20
 d3e:	55 1f       	adc	r21, r21
 d40:	f2 cf       	rjmp	.-28     	; 0xd26 <__fp_split3+0xe>
 d42:	46 95       	lsr	r20
 d44:	f1 df       	rcall	.-30     	; 0xd28 <__fp_splitA>
 d46:	08 c0       	rjmp	.+16     	; 0xd58 <__fp_splitA+0x30>
 d48:	16 16       	cp	r1, r22
 d4a:	17 06       	cpc	r1, r23
 d4c:	18 06       	cpc	r1, r24
 d4e:	99 1f       	adc	r25, r25
 d50:	f1 cf       	rjmp	.-30     	; 0xd34 <__fp_splitA+0xc>
 d52:	86 95       	lsr	r24
 d54:	71 05       	cpc	r23, r1
 d56:	61 05       	cpc	r22, r1
 d58:	08 94       	sec
 d5a:	08 95       	ret

00000d5c <__fp_zero>:
 d5c:	e8 94       	clt

00000d5e <__fp_szero>:
 d5e:	bb 27       	eor	r27, r27
 d60:	66 27       	eor	r22, r22
 d62:	77 27       	eor	r23, r23
 d64:	cb 01       	movw	r24, r22
 d66:	97 f9       	bld	r25, 7
 d68:	08 95       	ret

00000d6a <__mulsf3>:
 d6a:	0e 94 c8 06 	call	0xd90	; 0xd90 <__mulsf3x>
 d6e:	0c 94 7b 06 	jmp	0xcf6	; 0xcf6 <__fp_round>
 d72:	0e 94 6d 06 	call	0xcda	; 0xcda <__fp_pscA>
 d76:	38 f0       	brcs	.+14     	; 0xd86 <__mulsf3+0x1c>
 d78:	0e 94 74 06 	call	0xce8	; 0xce8 <__fp_pscB>
 d7c:	20 f0       	brcs	.+8      	; 0xd86 <__mulsf3+0x1c>
 d7e:	95 23       	and	r25, r21
 d80:	11 f0       	breq	.+4      	; 0xd86 <__mulsf3+0x1c>
 d82:	0c 94 64 06 	jmp	0xcc8	; 0xcc8 <__fp_inf>
 d86:	0c 94 6a 06 	jmp	0xcd4	; 0xcd4 <__fp_nan>
 d8a:	11 24       	eor	r1, r1
 d8c:	0c 94 af 06 	jmp	0xd5e	; 0xd5e <__fp_szero>

00000d90 <__mulsf3x>:
 d90:	0e 94 8c 06 	call	0xd18	; 0xd18 <__fp_split3>
 d94:	70 f3       	brcs	.-36     	; 0xd72 <__mulsf3+0x8>

00000d96 <__mulsf3_pse>:
 d96:	95 9f       	mul	r25, r21
 d98:	c1 f3       	breq	.-16     	; 0xd8a <__mulsf3+0x20>
 d9a:	95 0f       	add	r25, r21
 d9c:	50 e0       	ldi	r21, 0x00	; 0
 d9e:	55 1f       	adc	r21, r21
 da0:	62 9f       	mul	r22, r18
 da2:	f0 01       	movw	r30, r0
 da4:	72 9f       	mul	r23, r18
 da6:	bb 27       	eor	r27, r27
 da8:	f0 0d       	add	r31, r0
 daa:	b1 1d       	adc	r27, r1
 dac:	63 9f       	mul	r22, r19
 dae:	aa 27       	eor	r26, r26
 db0:	f0 0d       	add	r31, r0
 db2:	b1 1d       	adc	r27, r1
 db4:	aa 1f       	adc	r26, r26
 db6:	64 9f       	mul	r22, r20
 db8:	66 27       	eor	r22, r22
 dba:	b0 0d       	add	r27, r0
 dbc:	a1 1d       	adc	r26, r1
 dbe:	66 1f       	adc	r22, r22
 dc0:	82 9f       	mul	r24, r18
 dc2:	22 27       	eor	r18, r18
 dc4:	b0 0d       	add	r27, r0
 dc6:	a1 1d       	adc	r26, r1
 dc8:	62 1f       	adc	r22, r18
 dca:	73 9f       	mul	r23, r19
 dcc:	b0 0d       	add	r27, r0
 dce:	a1 1d       	adc	r26, r1
 dd0:	62 1f       	adc	r22, r18
 dd2:	83 9f       	mul	r24, r19
 dd4:	a0 0d       	add	r26, r0
 dd6:	61 1d       	adc	r22, r1
 dd8:	22 1f       	adc	r18, r18
 dda:	74 9f       	mul	r23, r20
 ddc:	33 27       	eor	r19, r19
 dde:	a0 0d       	add	r26, r0
 de0:	61 1d       	adc	r22, r1
 de2:	23 1f       	adc	r18, r19
 de4:	84 9f       	mul	r24, r20
 de6:	60 0d       	add	r22, r0
 de8:	21 1d       	adc	r18, r1
 dea:	82 2f       	mov	r24, r18
 dec:	76 2f       	mov	r23, r22
 dee:	6a 2f       	mov	r22, r26
 df0:	11 24       	eor	r1, r1
 df2:	9f 57       	subi	r25, 0x7F	; 127
 df4:	50 40       	sbci	r21, 0x00	; 0
 df6:	9a f0       	brmi	.+38     	; 0xe1e <__mulsf3_pse+0x88>
 df8:	f1 f0       	breq	.+60     	; 0xe36 <__mulsf3_pse+0xa0>
 dfa:	88 23       	and	r24, r24
 dfc:	4a f0       	brmi	.+18     	; 0xe10 <__mulsf3_pse+0x7a>
 dfe:	ee 0f       	add	r30, r30
 e00:	ff 1f       	adc	r31, r31
 e02:	bb 1f       	adc	r27, r27
 e04:	66 1f       	adc	r22, r22
 e06:	77 1f       	adc	r23, r23
 e08:	88 1f       	adc	r24, r24
 e0a:	91 50       	subi	r25, 0x01	; 1
 e0c:	50 40       	sbci	r21, 0x00	; 0
 e0e:	a9 f7       	brne	.-22     	; 0xdfa <__mulsf3_pse+0x64>
 e10:	9e 3f       	cpi	r25, 0xFE	; 254
 e12:	51 05       	cpc	r21, r1
 e14:	80 f0       	brcs	.+32     	; 0xe36 <__mulsf3_pse+0xa0>
 e16:	0c 94 64 06 	jmp	0xcc8	; 0xcc8 <__fp_inf>
 e1a:	0c 94 af 06 	jmp	0xd5e	; 0xd5e <__fp_szero>
 e1e:	5f 3f       	cpi	r21, 0xFF	; 255
 e20:	e4 f3       	brlt	.-8      	; 0xe1a <__mulsf3_pse+0x84>
 e22:	98 3e       	cpi	r25, 0xE8	; 232
 e24:	d4 f3       	brlt	.-12     	; 0xe1a <__mulsf3_pse+0x84>
 e26:	86 95       	lsr	r24
 e28:	77 95       	ror	r23
 e2a:	67 95       	ror	r22
 e2c:	b7 95       	ror	r27
 e2e:	f7 95       	ror	r31
 e30:	e7 95       	ror	r30
 e32:	9f 5f       	subi	r25, 0xFF	; 255
 e34:	c1 f7       	brne	.-16     	; 0xe26 <__mulsf3_pse+0x90>
 e36:	fe 2b       	or	r31, r30
 e38:	88 0f       	add	r24, r24
 e3a:	91 1d       	adc	r25, r1
 e3c:	96 95       	lsr	r25
 e3e:	87 95       	ror	r24
 e40:	97 f9       	bld	r25, 7
 e42:	08 95       	ret
 e44:	19 f4       	brne	.+6      	; 0xe4c <__mulsf3_pse+0xb6>
 e46:	16 f4       	brtc	.+4      	; 0xe4c <__mulsf3_pse+0xb6>
 e48:	0c 94 6a 06 	jmp	0xcd4	; 0xcd4 <__fp_nan>
 e4c:	0c 94 68 07 	jmp	0xed0	; 0xed0 <__fp_mpack>

00000e50 <sqrt>:
 e50:	0e 94 94 06 	call	0xd28	; 0xd28 <__fp_splitA>
 e54:	b8 f3       	brcs	.-18     	; 0xe44 <__mulsf3_pse+0xae>
 e56:	99 23       	and	r25, r25
 e58:	c9 f3       	breq	.-14     	; 0xe4c <__mulsf3_pse+0xb6>
 e5a:	b6 f3       	brts	.-20     	; 0xe48 <__mulsf3_pse+0xb2>
 e5c:	9f 57       	subi	r25, 0x7F	; 127
 e5e:	55 0b       	sbc	r21, r21
 e60:	87 ff       	sbrs	r24, 7
 e62:	0e 94 76 07 	call	0xeec	; 0xeec <__fp_norm2>
 e66:	00 24       	eor	r0, r0
 e68:	a0 e6       	ldi	r26, 0x60	; 96
 e6a:	40 ea       	ldi	r20, 0xA0	; 160
 e6c:	90 01       	movw	r18, r0
 e6e:	80 58       	subi	r24, 0x80	; 128
 e70:	56 95       	lsr	r21
 e72:	97 95       	ror	r25
 e74:	28 f4       	brcc	.+10     	; 0xe80 <sqrt+0x30>
 e76:	80 5c       	subi	r24, 0xC0	; 192
 e78:	66 0f       	add	r22, r22
 e7a:	77 1f       	adc	r23, r23
 e7c:	88 1f       	adc	r24, r24
 e7e:	20 f0       	brcs	.+8      	; 0xe88 <sqrt+0x38>
 e80:	26 17       	cp	r18, r22
 e82:	37 07       	cpc	r19, r23
 e84:	48 07       	cpc	r20, r24
 e86:	30 f4       	brcc	.+12     	; 0xe94 <sqrt+0x44>
 e88:	62 1b       	sub	r22, r18
 e8a:	73 0b       	sbc	r23, r19
 e8c:	84 0b       	sbc	r24, r20
 e8e:	20 29       	or	r18, r0
 e90:	31 29       	or	r19, r1
 e92:	4a 2b       	or	r20, r26
 e94:	a6 95       	lsr	r26
 e96:	17 94       	ror	r1
 e98:	07 94       	ror	r0
 e9a:	20 25       	eor	r18, r0
 e9c:	31 25       	eor	r19, r1
 e9e:	4a 27       	eor	r20, r26
 ea0:	58 f7       	brcc	.-42     	; 0xe78 <sqrt+0x28>
 ea2:	66 0f       	add	r22, r22
 ea4:	77 1f       	adc	r23, r23
 ea6:	88 1f       	adc	r24, r24
 ea8:	20 f0       	brcs	.+8      	; 0xeb2 <sqrt+0x62>
 eaa:	26 17       	cp	r18, r22
 eac:	37 07       	cpc	r19, r23
 eae:	48 07       	cpc	r20, r24
 eb0:	30 f4       	brcc	.+12     	; 0xebe <sqrt+0x6e>
 eb2:	62 0b       	sbc	r22, r18
 eb4:	73 0b       	sbc	r23, r19
 eb6:	84 0b       	sbc	r24, r20
 eb8:	20 0d       	add	r18, r0
 eba:	31 1d       	adc	r19, r1
 ebc:	41 1d       	adc	r20, r1
 ebe:	a0 95       	com	r26
 ec0:	81 f7       	brne	.-32     	; 0xea2 <sqrt+0x52>
 ec2:	b9 01       	movw	r22, r18
 ec4:	84 2f       	mov	r24, r20
 ec6:	91 58       	subi	r25, 0x81	; 129
 ec8:	88 0f       	add	r24, r24
 eca:	96 95       	lsr	r25
 ecc:	87 95       	ror	r24
 ece:	08 95       	ret

00000ed0 <__fp_mpack>:
 ed0:	9f 3f       	cpi	r25, 0xFF	; 255
 ed2:	31 f0       	breq	.+12     	; 0xee0 <__fp_mpack_finite+0xc>

00000ed4 <__fp_mpack_finite>:
 ed4:	91 50       	subi	r25, 0x01	; 1
 ed6:	20 f4       	brcc	.+8      	; 0xee0 <__fp_mpack_finite+0xc>
 ed8:	87 95       	ror	r24
 eda:	77 95       	ror	r23
 edc:	67 95       	ror	r22
 ede:	b7 95       	ror	r27
 ee0:	88 0f       	add	r24, r24
 ee2:	91 1d       	adc	r25, r1
 ee4:	96 95       	lsr	r25
 ee6:	87 95       	ror	r24
 ee8:	97 f9       	bld	r25, 7
 eea:	08 95       	ret

00000eec <__fp_norm2>:
 eec:	91 50       	subi	r25, 0x01	; 1
 eee:	50 40       	sbci	r21, 0x00	; 0
 ef0:	66 0f       	add	r22, r22
 ef2:	77 1f       	adc	r23, r23
 ef4:	88 1f       	adc	r24, r24
 ef6:	d2 f7       	brpl	.-12     	; 0xeec <__fp_norm2>
 ef8:	08 95       	ret

00000efa <__udivmodhi4>:
 efa:	aa 1b       	sub	r26, r26
 efc:	bb 1b       	sub	r27, r27
 efe:	51 e1       	ldi	r21, 0x11	; 17
 f00:	07 c0       	rjmp	.+14     	; 0xf10 <__udivmodhi4_ep>

00000f02 <__udivmodhi4_loop>:
 f02:	aa 1f       	adc	r26, r26
 f04:	bb 1f       	adc	r27, r27
 f06:	a6 17       	cp	r26, r22
 f08:	b7 07       	cpc	r27, r23
 f0a:	10 f0       	brcs	.+4      	; 0xf10 <__udivmodhi4_ep>
 f0c:	a6 1b       	sub	r26, r22
 f0e:	b7 0b       	sbc	r27, r23

00000f10 <__udivmodhi4_ep>:
 f10:	88 1f       	adc	r24, r24
 f12:	99 1f       	adc	r25, r25
 f14:	5a 95       	dec	r21
 f16:	a9 f7       	brne	.-22     	; 0xf02 <__udivmodhi4_loop>
 f18:	80 95       	com	r24
 f1a:	90 95       	com	r25
 f1c:	bc 01       	movw	r22, r24
 f1e:	cd 01       	movw	r24, r26
 f20:	08 95       	ret

00000f22 <__divmodhi4>:
 f22:	97 fb       	bst	r25, 7
 f24:	07 2e       	mov	r0, r23
 f26:	16 f4       	brtc	.+4      	; 0xf2c <__divmodhi4+0xa>
 f28:	00 94       	com	r0
 f2a:	07 d0       	rcall	.+14     	; 0xf3a <__divmodhi4_neg1>
 f2c:	77 fd       	sbrc	r23, 7
 f2e:	09 d0       	rcall	.+18     	; 0xf42 <__divmodhi4_neg2>
 f30:	0e 94 7d 07 	call	0xefa	; 0xefa <__udivmodhi4>
 f34:	07 fc       	sbrc	r0, 7
 f36:	05 d0       	rcall	.+10     	; 0xf42 <__divmodhi4_neg2>
 f38:	3e f4       	brtc	.+14     	; 0xf48 <__divmodhi4_exit>

00000f3a <__divmodhi4_neg1>:
 f3a:	90 95       	com	r25
 f3c:	81 95       	neg	r24
 f3e:	9f 4f       	sbci	r25, 0xFF	; 255
 f40:	08 95       	ret

00000f42 <__divmodhi4_neg2>:
 f42:	70 95       	com	r23
 f44:	61 95       	neg	r22
 f46:	7f 4f       	sbci	r23, 0xFF	; 255

00000f48 <__divmodhi4_exit>:
 f48:	08 95       	ret

00000f4a <_exit>:
 f4a:	f8 94       	cli

00000f4c <__stop_program>:
 f4c:	ff cf       	rjmp	.-2      	; 0xf4c <__stop_program>
