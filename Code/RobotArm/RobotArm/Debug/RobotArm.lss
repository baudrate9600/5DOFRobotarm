
RobotArm.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000004e  00800100  00000fa2  00001036  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000fa2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000001a  0080014e  0080014e  00001084  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001084  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000010b4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000140  00000000  00000000  000010f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001b75  00000000  00000000  00001234  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000d80  00000000  00000000  00002da9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000a6f  00000000  00000000  00003b29  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000398  00000000  00000000  00004598  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000a5a  00000000  00000000  00004930  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000c2f  00000000  00000000  0000538a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000118  00000000  00000000  00005fb9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 6d 04 	jmp	0x8da	; 0x8da <__vector_11>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 5d 00 	jmp	0xba	; 0xba <__vector_18>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__vector_20>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e2 ea       	ldi	r30, 0xA2	; 162
  7c:	ff e0       	ldi	r31, 0x0F	; 15
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ae 34       	cpi	r26, 0x4E	; 78
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	ae e4       	ldi	r26, 0x4E	; 78
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a8 36       	cpi	r26, 0x68	; 104
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 db 00 	call	0x1b6	; 0x1b6 <main>
  9e:	0c 94 cf 07 	jmp	0xf9e	; 0xf9e <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <__vector_20>:
			motor->integral = temp; 
		}
		motor->proportional = motor->P*error;
		
		return motor->P*error +motor->I*motor->integral;
}
  a6:	1f 92       	push	r1
  a8:	0f 92       	push	r0
  aa:	0f b6       	in	r0, 0x3f	; 63
  ac:	0f 92       	push	r0
  ae:	11 24       	eor	r1, r1
  b0:	0f 90       	pop	r0
  b2:	0f be       	out	0x3f, r0	; 63
  b4:	0f 90       	pop	r0
  b6:	1f 90       	pop	r1
  b8:	18 95       	reti

000000ba <__vector_18>:
  ba:	1f 92       	push	r1
  bc:	0f 92       	push	r0
  be:	0f b6       	in	r0, 0x3f	; 63
  c0:	0f 92       	push	r0
  c2:	11 24       	eor	r1, r1
  c4:	2f 93       	push	r18
  c6:	3f 93       	push	r19
  c8:	8f 93       	push	r24
  ca:	9f 93       	push	r25
  cc:	ef 93       	push	r30
  ce:	ff 93       	push	r31
  d0:	10 92 62 01 	sts	0x0162, r1	; 0x800162 <motor_status+0x12>
  d4:	10 92 61 01 	sts	0x0161, r1	; 0x800161 <motor_status+0x11>
  d8:	90 91 c6 00 	lds	r25, 0x00C6	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
  dc:	80 91 63 01 	lds	r24, 0x0163	; 0x800163 <parse_state>
  e0:	81 30       	cpi	r24, 0x01	; 1
  e2:	61 f0       	breq	.+24     	; 0xfc <__vector_18+0x42>
  e4:	28 f0       	brcs	.+10     	; 0xf0 <__vector_18+0x36>
  e6:	82 30       	cpi	r24, 0x02	; 2
  e8:	a9 f0       	breq	.+42     	; 0x114 <__vector_18+0x5a>
  ea:	83 30       	cpi	r24, 0x03	; 3
  ec:	89 f1       	breq	.+98     	; 0x150 <__vector_18+0x96>
  ee:	32 c0       	rjmp	.+100    	; 0x154 <__vector_18+0x9a>
  f0:	9d 34       	cpi	r25, 0x4D	; 77
  f2:	81 f5       	brne	.+96     	; 0x154 <__vector_18+0x9a>
  f4:	81 e0       	ldi	r24, 0x01	; 1
  f6:	80 93 63 01 	sts	0x0163, r24	; 0x800163 <parse_state>
  fa:	2c c0       	rjmp	.+88     	; 0x154 <__vector_18+0x9a>
  fc:	80 ed       	ldi	r24, 0xD0	; 208
  fe:	89 0f       	add	r24, r25
 100:	80 93 50 01 	sts	0x0150, r24	; 0x800150 <motor_status>
 104:	82 e0       	ldi	r24, 0x02	; 2
 106:	80 93 63 01 	sts	0x0163, r24	; 0x800163 <parse_state>
 10a:	10 92 4f 01 	sts	0x014F, r1	; 0x80014f <__data_end+0x1>
 10e:	10 92 4e 01 	sts	0x014E, r1	; 0x80014e <__data_end>
 112:	20 c0       	rjmp	.+64     	; 0x154 <__vector_18+0x9a>
 114:	20 91 4e 01 	lds	r18, 0x014E	; 0x80014e <__data_end>
 118:	30 91 4f 01 	lds	r19, 0x014F	; 0x80014f <__data_end+0x1>
 11c:	f9 01       	movw	r30, r18
 11e:	ee 0f       	add	r30, r30
 120:	ff 1f       	adc	r31, r31
 122:	e0 5b       	subi	r30, 0xB0	; 176
 124:	fe 4f       	sbci	r31, 0xFE	; 254
 126:	89 2f       	mov	r24, r25
 128:	90 e0       	ldi	r25, 0x00	; 0
 12a:	92 83       	std	Z+2, r25	; 0x02
 12c:	81 83       	std	Z+1, r24	; 0x01
 12e:	c9 01       	movw	r24, r18
 130:	01 96       	adiw	r24, 0x01	; 1
 132:	90 93 4f 01 	sts	0x014F, r25	; 0x80014f <__data_end+0x1>
 136:	80 93 4e 01 	sts	0x014E, r24	; 0x80014e <__data_end>
 13a:	08 97       	sbiw	r24, 0x08	; 8
 13c:	59 f4       	brne	.+22     	; 0x154 <__vector_18+0x9a>
 13e:	10 92 63 01 	sts	0x0163, r1	; 0x800163 <parse_state>
 142:	81 e0       	ldi	r24, 0x01	; 1
 144:	90 e0       	ldi	r25, 0x00	; 0
 146:	90 93 62 01 	sts	0x0162, r25	; 0x800162 <motor_status+0x12>
 14a:	80 93 61 01 	sts	0x0161, r24	; 0x800161 <motor_status+0x11>
 14e:	02 c0       	rjmp	.+4      	; 0x154 <__vector_18+0x9a>
 150:	10 92 63 01 	sts	0x0163, r1	; 0x800163 <parse_state>
 154:	ff 91       	pop	r31
 156:	ef 91       	pop	r30
 158:	9f 91       	pop	r25
 15a:	8f 91       	pop	r24
 15c:	3f 91       	pop	r19
 15e:	2f 91       	pop	r18
 160:	0f 90       	pop	r0
 162:	0f be       	out	0x3f, r0	; 63
 164:	0f 90       	pop	r0
 166:	1f 90       	pop	r1
 168:	18 95       	reti

0000016a <_Z12servo_rotatefPVhhh>:
/*Servo Control */
void servo_rotate(float val,volatile uint8_t * pwm, uint8_t dir_a,uint8_t dir_b){
 16a:	ef 92       	push	r14
 16c:	ff 92       	push	r15
 16e:	0f 93       	push	r16
 170:	cf 93       	push	r28
 172:	7a 01       	movw	r14, r20
 174:	c2 2f       	mov	r28, r18
	int speed = (float)val;
 176:	0e 94 e6 05 	call	0xbcc	; 0xbcc <__fixsfsi>
 17a:	ab 01       	movw	r20, r22
	if (speed > 0){
 17c:	16 16       	cp	r1, r22
 17e:	17 06       	cpc	r1, r23
 180:	44 f4       	brge	.+16     	; 0x192 <_Z12servo_rotatefPVhhh+0x28>
		SERVO_REGISTER |= dir_a  ;
 182:	2b b1       	in	r18, 0x0b	; 11
 184:	c2 2b       	or	r28, r18
 186:	cb b9       	out	0x0b, r28	; 11
		SERVO_REGISTER &= ~dir_b;
 188:	2b b1       	in	r18, 0x0b	; 11
 18a:	00 95       	com	r16
 18c:	02 23       	and	r16, r18
 18e:	0b b9       	out	0x0b, r16	; 11
 190:	0b c0       	rjmp	.+22     	; 0x1a8 <_Z12servo_rotatefPVhhh+0x3e>
		}else{
		SERVO_REGISTER &= ~dir_a;
 192:	2b b1       	in	r18, 0x0b	; 11
 194:	c0 95       	com	r28
 196:	c2 23       	and	r28, r18
 198:	cb b9       	out	0x0b, r28	; 11
		SERVO_REGISTER |= dir_b;
 19a:	2b b1       	in	r18, 0x0b	; 11
 19c:	02 2b       	or	r16, r18
 19e:	0b b9       	out	0x0b, r16	; 11
		speed *= -1;
 1a0:	44 27       	eor	r20, r20
 1a2:	55 27       	eor	r21, r21
 1a4:	46 1b       	sub	r20, r22
 1a6:	57 0b       	sbc	r21, r23
	}
	*pwm = speed;
 1a8:	f7 01       	movw	r30, r14
 1aa:	40 83       	st	Z, r20
}
 1ac:	cf 91       	pop	r28
 1ae:	0f 91       	pop	r16
 1b0:	ff 90       	pop	r15
 1b2:	ef 90       	pop	r14
 1b4:	08 95       	ret

000001b6 <main>:

/*some comment*/
int main(void)
{
 1b6:	cf 93       	push	r28
 1b8:	df 93       	push	r29
 1ba:	cd b7       	in	r28, 0x3d	; 61
 1bc:	de b7       	in	r29, 0x3e	; 62
 1be:	c4 54       	subi	r28, 0x44	; 68
 1c0:	d1 09       	sbc	r29, r1
 1c2:	0f b6       	in	r0, 0x3f	; 63
 1c4:	f8 94       	cli
 1c6:	de bf       	out	0x3e, r29	; 62
 1c8:	0f be       	out	0x3f, r0	; 63
 1ca:	cd bf       	out	0x3d, r28	; 61

	
	/* initialize component */ 
	sei();
 1cc:	78 94       	sei
	timer_enable();	
 1ce:	0e 94 41 04 	call	0x882	; 0x882 <_Z12timer_enablev>
	usart_enable(9600);
 1d2:	80 e8       	ldi	r24, 0x80	; 128
 1d4:	95 e2       	ldi	r25, 0x25	; 37
 1d6:	0e 94 92 04 	call	0x924	; 0x924 <_Z12usart_enablej>
	
    /* Replace with your application code */
	uint8_t tacho_values;
	uint8_t tacho_state = 0;
	int16_t tacho = 0;
	DDRD &= ~TACHO_0_M;
 1da:	55 98       	cbi	0x0a, 5	; 10
	DDRD &= ~TACHO_0_P; 
 1dc:	52 98       	cbi	0x0a, 2	; 10

	/* Initialize servo motors */
	DDRD |= SERVO_0_EN | SERVO_0_DIR_A | SERVO_0_DIR_B;
 1de:	8a b1       	in	r24, 0x0a	; 10
 1e0:	88 6c       	ori	r24, 0xC8	; 200
 1e2:	8a b9       	out	0x0a, r24	; 10
	TCCR2A |= (1 << COM2B1 ) | (1 << WGM21) | (1 << WGM20); /*Fast PWM */
 1e4:	e0 eb       	ldi	r30, 0xB0	; 176
 1e6:	f0 e0       	ldi	r31, 0x00	; 0
 1e8:	80 81       	ld	r24, Z
 1ea:	83 62       	ori	r24, 0x23	; 35
 1ec:	80 83       	st	Z, r24
	TCCR2B |= (1 << CS20); /*No prescaling */
 1ee:	e1 eb       	ldi	r30, 0xB1	; 177
 1f0:	f0 e0       	ldi	r31, 0x00	; 0
 1f2:	80 81       	ld	r24, Z
 1f4:	81 60       	ori	r24, 0x01	; 1
 1f6:	80 83       	st	Z, r24
	int output = 0; 	
	
	uint32_t curtime = 0; 	
	uint32_t pid_timer = 0; 
	
	DDRB |= M0_DIR | M0_STEP | M1_STEP | M1_DIR;
 1f8:	84 b1       	in	r24, 0x04	; 4
 1fa:	8f 60       	ori	r24, 0x0F	; 15
 1fc:	84 b9       	out	0x04, r24	; 4
	StepperMotor stepper0(0,0.043182,M0_DIR,M0_STEP);
 1fe:	ee 24       	eor	r14, r14
 200:	e3 94       	inc	r14
 202:	02 e0       	ldi	r16, 0x02	; 2
 204:	2c e9       	ldi	r18, 0x9C	; 156
 206:	3f ed       	ldi	r19, 0xDF	; 223
 208:	40 e3       	ldi	r20, 0x30	; 48
 20a:	5d e3       	ldi	r21, 0x3D	; 61
 20c:	60 e0       	ldi	r22, 0x00	; 0
 20e:	70 e0       	ldi	r23, 0x00	; 0
 210:	ce 01       	movw	r24, r28
 212:	01 96       	adiw	r24, 0x01	; 1
 214:	0e 94 cd 01 	call	0x39a	; 0x39a <_ZN12StepperMotorC1Eifhh>
	StepperMotor stepper1(0,0.2571426, M1_DIR,M1_STEP); 
 218:	68 94       	set
 21a:	ee 24       	eor	r14, r14
 21c:	e2 f8       	bld	r14, 2
 21e:	08 e0       	ldi	r16, 0x08	; 8
 220:	22 e3       	ldi	r18, 0x32	; 50
 222:	38 ea       	ldi	r19, 0xA8	; 168
 224:	43 e8       	ldi	r20, 0x83	; 131
 226:	5e e3       	ldi	r21, 0x3E	; 62
 228:	60 e0       	ldi	r22, 0x00	; 0
 22a:	70 e0       	ldi	r23, 0x00	; 0
 22c:	ce 01       	movw	r24, r28
 22e:	83 96       	adiw	r24, 0x23	; 35
 230:	0e 94 cd 01 	call	0x39a	; 0x39a <_ZN12StepperMotorC1Eifhh>
	usart_sendln("Hello world!");
 234:	80 e0       	ldi	r24, 0x00	; 0
 236:	91 e0       	ldi	r25, 0x01	; 1
 238:	0e 94 02 05 	call	0xa04	; 0xa04 <_Z12usart_sendlnPc>
	/* Initialize motors */ 
//	Stepper_motor motor0(M0_STEP,M0_DIR,0.23,&DDRD);
	
    /* Replace with your application code */
	uint8_t tacho_values;
	uint8_t tacho_state = 0;
 23c:	10 e0       	ldi	r17, 0x00	; 0
    while (1) 
    {
		
		/*character FSM */ 
		char buff[50]; 
		if(motor_status.done == 1){
 23e:	0f 2e       	mov	r0, r31
 240:	f0 e5       	ldi	r31, 0x50	; 80
 242:	ef 2e       	mov	r14, r31
 244:	f1 e0       	ldi	r31, 0x01	; 1
 246:	ff 2e       	mov	r15, r31
 248:	f0 2d       	mov	r31, r0
	//		sprintf(buff,"Motor %d, angle =  %d\n",motor_status.motor_select,motor_status.angle);
	//		usart_send(buff);
			motor_status.done = 0; 
			uint16_t duration = (motor_status.data[0]-48)*10 + (motor_status.data[1]-48);
			uint16_t acceleration = (motor_status.data[2]-48)*10 + (motor_status.data[3]-48);
			int16_t angle = (motor_status.data[5]-48)*100 + (motor_status.data[6]-48)*10 + (motor_status.data[7]-48);
 24a:	0f 2e       	mov	r0, r31
 24c:	f4 e6       	ldi	r31, 0x64	; 100
 24e:	5f 2e       	mov	r5, r31
 250:	f0 2d       	mov	r31, r0
					break;
				case 1 :
					stepper0.target_pos = angle; 
					stepper0.duration = duration;
					stepper0.acceleration = acceleration;
					stepper0.start = 1; 
 252:	77 24       	eor	r7, r7
 254:	73 94       	inc	r7
				}
				tacho_state = 1; 
			}
		}else{
			if (!(PIND & TACHO_0_P)){
				tacho_state = 0; 
 256:	61 2c       	mov	r6, r1
    while (1) 
    {
		
		/*character FSM */ 
		char buff[50]; 
		if(motor_status.done == 1){
 258:	f7 01       	movw	r30, r14
 25a:	81 89       	ldd	r24, Z+17	; 0x11
 25c:	92 89       	ldd	r25, Z+18	; 0x12
 25e:	01 97       	sbiw	r24, 0x01	; 1
 260:	09 f0       	breq	.+2      	; 0x264 <main+0xae>
 262:	76 c0       	rjmp	.+236    	; 0x350 <main+0x19a>
	//		sprintf(buff,"Motor %d, angle =  %d\n",motor_status.motor_select,motor_status.angle);
	//		usart_send(buff);
			motor_status.done = 0; 
 264:	12 8a       	std	Z+18, r1	; 0x12
 266:	11 8a       	std	Z+17, r1	; 0x11
			uint16_t duration = (motor_status.data[0]-48)*10 + (motor_status.data[1]-48);
 268:	81 81       	ldd	r24, Z+1	; 0x01
 26a:	92 81       	ldd	r25, Z+2	; 0x02
 26c:	c0 97       	sbiw	r24, 0x30	; 48
 26e:	4c 01       	movw	r8, r24
 270:	88 0c       	add	r8, r8
 272:	99 1c       	adc	r9, r9
 274:	88 0f       	add	r24, r24
 276:	99 1f       	adc	r25, r25
 278:	88 0f       	add	r24, r24
 27a:	99 1f       	adc	r25, r25
 27c:	88 0f       	add	r24, r24
 27e:	99 1f       	adc	r25, r25
 280:	88 0d       	add	r24, r8
 282:	99 1d       	adc	r25, r9
 284:	83 80       	ldd	r8, Z+3	; 0x03
 286:	94 80       	ldd	r9, Z+4	; 0x04
 288:	f0 e3       	ldi	r31, 0x30	; 48
 28a:	8f 1a       	sub	r8, r31
 28c:	91 08       	sbc	r9, r1
 28e:	88 0e       	add	r8, r24
 290:	99 1e       	adc	r9, r25
			uint16_t acceleration = (motor_status.data[2]-48)*10 + (motor_status.data[3]-48);
 292:	f7 01       	movw	r30, r14
 294:	85 81       	ldd	r24, Z+5	; 0x05
 296:	96 81       	ldd	r25, Z+6	; 0x06
 298:	c0 97       	sbiw	r24, 0x30	; 48
 29a:	5c 01       	movw	r10, r24
 29c:	aa 0c       	add	r10, r10
 29e:	bb 1c       	adc	r11, r11
 2a0:	88 0f       	add	r24, r24
 2a2:	99 1f       	adc	r25, r25
 2a4:	88 0f       	add	r24, r24
 2a6:	99 1f       	adc	r25, r25
 2a8:	88 0f       	add	r24, r24
 2aa:	99 1f       	adc	r25, r25
 2ac:	8a 0d       	add	r24, r10
 2ae:	9b 1d       	adc	r25, r11
 2b0:	a7 80       	ldd	r10, Z+7	; 0x07
 2b2:	b0 84       	ldd	r11, Z+8	; 0x08
 2b4:	f0 e3       	ldi	r31, 0x30	; 48
 2b6:	af 1a       	sub	r10, r31
 2b8:	b1 08       	sbc	r11, r1
 2ba:	a8 0e       	add	r10, r24
 2bc:	b9 1e       	adc	r11, r25
			int16_t angle = (motor_status.data[5]-48)*100 + (motor_status.data[6]-48)*10 + (motor_status.data[7]-48);
 2be:	f7 01       	movw	r30, r14
 2c0:	83 85       	ldd	r24, Z+11	; 0x0b
 2c2:	94 85       	ldd	r25, Z+12	; 0x0c
 2c4:	c0 97       	sbiw	r24, 0x30	; 48
 2c6:	58 9e       	mul	r5, r24
 2c8:	60 01       	movw	r12, r0
 2ca:	59 9e       	mul	r5, r25
 2cc:	d0 0c       	add	r13, r0
 2ce:	11 24       	eor	r1, r1
 2d0:	85 85       	ldd	r24, Z+13	; 0x0d
 2d2:	96 85       	ldd	r25, Z+14	; 0x0e
 2d4:	c0 97       	sbiw	r24, 0x30	; 48
 2d6:	ac 01       	movw	r20, r24
 2d8:	44 0f       	add	r20, r20
 2da:	55 1f       	adc	r21, r21
 2dc:	9c 01       	movw	r18, r24
 2de:	22 0f       	add	r18, r18
 2e0:	33 1f       	adc	r19, r19
 2e2:	22 0f       	add	r18, r18
 2e4:	33 1f       	adc	r19, r19
 2e6:	22 0f       	add	r18, r18
 2e8:	33 1f       	adc	r19, r19
 2ea:	ca 01       	movw	r24, r20
 2ec:	82 0f       	add	r24, r18
 2ee:	93 1f       	adc	r25, r19
 2f0:	8c 0d       	add	r24, r12
 2f2:	9d 1d       	adc	r25, r13
 2f4:	c7 84       	ldd	r12, Z+15	; 0x0f
 2f6:	d0 88       	ldd	r13, Z+16	; 0x10
 2f8:	f0 e3       	ldi	r31, 0x30	; 48
 2fa:	cf 1a       	sub	r12, r31
 2fc:	d1 08       	sbc	r13, r1
 2fe:	c8 0e       	add	r12, r24
 300:	d9 1e       	adc	r13, r25

			usart_sendln((int)duration);
 302:	c4 01       	movw	r24, r8
 304:	0e 94 fd 04 	call	0x9fa	; 0x9fa <_Z12usart_sendlni>
			usart_sendln((int)acceleration);
 308:	c5 01       	movw	r24, r10
 30a:	0e 94 fd 04 	call	0x9fa	; 0x9fa <_Z12usart_sendlni>
			usart_sendln(angle);
 30e:	c6 01       	movw	r24, r12
 310:	0e 94 fd 04 	call	0x9fa	; 0x9fa <_Z12usart_sendlni>
			if(motor_status.data[4] == '-'){
 314:	f7 01       	movw	r30, r14
 316:	81 85       	ldd	r24, Z+9	; 0x09
 318:	92 85       	ldd	r25, Z+10	; 0x0a
 31a:	8d 97       	sbiw	r24, 0x2d	; 45
 31c:	19 f4       	brne	.+6      	; 0x324 <main+0x16e>
				angle = angle * -1;
 31e:	d1 94       	neg	r13
 320:	c1 94       	neg	r12
 322:	d1 08       	sbc	r13, r1
			}
			switch(motor_status.motor_select){
 324:	f7 01       	movw	r30, r14
 326:	80 81       	ld	r24, Z
 328:	81 30       	cpi	r24, 0x01	; 1
 32a:	19 f0       	breq	.+6      	; 0x332 <main+0x17c>
 32c:	82 30       	cpi	r24, 0x02	; 2
 32e:	49 f0       	breq	.+18     	; 0x342 <main+0x18c>
 330:	0f c0       	rjmp	.+30     	; 0x350 <main+0x19a>
				case 0 : 
					servo0.target_pos = angle; 
					break;
				case 1 :
					stepper0.target_pos = angle; 
 332:	dd 82       	std	Y+5, r13	; 0x05
 334:	cc 82       	std	Y+4, r12	; 0x04
					stepper0.duration = duration;
 336:	9f 86       	std	Y+15, r9	; 0x0f
 338:	8e 86       	std	Y+14, r8	; 0x0e
					stepper0.acceleration = acceleration;
 33a:	bd 86       	std	Y+13, r11	; 0x0d
 33c:	ac 86       	std	Y+12, r10	; 0x0c
					stepper0.start = 1; 
 33e:	79 82       	std	Y+1, r7	; 0x01
					break; 
 340:	07 c0       	rjmp	.+14     	; 0x350 <main+0x19a>
				case 2 : 
					stepper1.target_pos = angle; 
 342:	df a2       	std	Y+39, r13	; 0x27
 344:	ce a2       	std	Y+38, r12	; 0x26
					stepper1.duration = duration;
 346:	99 aa       	std	Y+49, r9	; 0x31
 348:	88 aa       	std	Y+48, r8	; 0x30
					stepper1.acceleration = acceleration;
 34a:	bf a6       	std	Y+47, r11	; 0x2f
 34c:	ae a6       	std	Y+46, r10	; 0x2e
					stepper1.start = 1;
 34e:	7b a2       	std	Y+35, r7	; 0x23
			output = 255; 
		}else if(output < -255){
			output = -255;
		}
		//usart_sendln(temp);	
		servo_rotate(output,&SERVO_0_PWM,SERVO_0_DIR_A,SERVO_0_DIR_B);
 350:	00 e8       	ldi	r16, 0x80	; 128
 352:	20 e4       	ldi	r18, 0x40	; 64
 354:	44 eb       	ldi	r20, 0xB4	; 180
 356:	50 e0       	ldi	r21, 0x00	; 0
 358:	60 e0       	ldi	r22, 0x00	; 0
 35a:	70 e0       	ldi	r23, 0x00	; 0
 35c:	cb 01       	movw	r24, r22
 35e:	0e 94 b5 00 	call	0x16a	; 0x16a <_Z12servo_rotatefPVhhh>
	
		stepper0.rotate(timer_10k());
 362:	0e 94 64 04 	call	0x8c8	; 0x8c8 <_Z9timer_10kv>
 366:	ab 01       	movw	r20, r22
 368:	bc 01       	movw	r22, r24
 36a:	ce 01       	movw	r24, r28
 36c:	01 96       	adiw	r24, 0x01	; 1
 36e:	0e 94 bc 02 	call	0x578	; 0x578 <_ZN12StepperMotor6rotateEm>
		stepper1.rotate(timer_10k());
 372:	0e 94 64 04 	call	0x8c8	; 0x8c8 <_Z9timer_10kv>
 376:	ab 01       	movw	r20, r22
 378:	bc 01       	movw	r22, r24
 37a:	ce 01       	movw	r24, r28
 37c:	83 96       	adiw	r24, 0x23	; 35
 37e:	0e 94 bc 02 	call	0x578	; 0x578 <_ZN12StepperMotor6rotateEm>
		tacho_values= PIND;
 382:	89 b1       	in	r24, 0x09	; 9
		if (tacho_state == 0){
 384:	11 11       	cpse	r17, r1
 386:	05 c0       	rjmp	.+10     	; 0x392 <main+0x1dc>
			if (PIND & TACHO_0_P){
 388:	4a 9b       	sbis	0x09, 2	; 9
 38a:	66 cf       	rjmp	.-308    	; 0x258 <main+0xa2>
				if(PIND & TACHO_0_M){
 38c:	89 b1       	in	r24, 0x09	; 9
					servo0.current_pos++;
				}else{
					servo0.current_pos--;
				}
				tacho_state = 1; 
 38e:	17 2d       	mov	r17, r7
 390:	63 cf       	rjmp	.-314    	; 0x258 <main+0xa2>
			}
		}else{
			if (!(PIND & TACHO_0_P)){
 392:	4a 99       	sbic	0x09, 2	; 9
 394:	61 cf       	rjmp	.-318    	; 0x258 <main+0xa2>
				tacho_state = 0; 
 396:	16 2d       	mov	r17, r6
 398:	5f cf       	rjmp	.-322    	; 0x258 <main+0xa2>

0000039a <_ZN12StepperMotorC1Eifhh>:
#include <math.h>
#include "Usart.h"
#include "StepperMotor.h"

/* Iniatialize the stepper motor */
StepperMotor::StepperMotor(int16_t current_pos, float step_to_angle, uint8_t dir_pin, uint8_t step_pin)
 39a:	ef 92       	push	r14
 39c:	0f 93       	push	r16
 39e:	cf 93       	push	r28
 3a0:	df 93       	push	r29
 3a2:	ec 01       	movw	r28, r24
{
	state = S_WAIT; 
 3a4:	19 a2       	std	Y+33, r1	; 0x21
	this->current_pos	= current_pos;
 3a6:	7a 83       	std	Y+2, r23	; 0x02
 3a8:	69 83       	std	Y+1, r22	; 0x01
	/*this value should ideally be an integer */
	this->step_to_angle	= 1.0f/step_to_angle; 
 3aa:	60 e0       	ldi	r22, 0x00	; 0
 3ac:	70 e0       	ldi	r23, 0x00	; 0
 3ae:	80 e8       	ldi	r24, 0x80	; 128
 3b0:	9f e3       	ldi	r25, 0x3F	; 63
 3b2:	0e 94 74 05 	call	0xae8	; 0xae8 <__divsf3>
 3b6:	6d 8f       	std	Y+29, r22	; 0x1d
 3b8:	7e 8f       	std	Y+30, r23	; 0x1e
 3ba:	8f 8f       	std	Y+31, r24	; 0x1f
 3bc:	98 a3       	std	Y+32, r25	; 0x20
	this->dir_pin		= dir_pin;
 3be:	0b 8f       	std	Y+27, r16	; 0x1b
	this->step_pin		= step_pin;		
 3c0:	ec 8e       	std	Y+28, r14	; 0x1c
	stepper_time = 0;
 3c2:	1f 8a       	std	Y+23, r1	; 0x17
 3c4:	18 8e       	std	Y+24, r1	; 0x18
 3c6:	19 8e       	std	Y+25, r1	; 0x19
 3c8:	1a 8e       	std	Y+26, r1	; 0x1a
	pulse_width = 0;
 3ca:	18 8a       	std	Y+16, r1	; 0x10
 3cc:	1f 86       	std	Y+15, r1	; 0x0f
} 
 3ce:	df 91       	pop	r29
 3d0:	cf 91       	pop	r28
 3d2:	0f 91       	pop	r16
 3d4:	ef 90       	pop	r14
 3d6:	08 95       	ret

000003d8 <_ZN12StepperMotor3fsmEm>:
		fsm(current_time); 
	}

}
stepper_fsm StepperMotor::fsm(uint32_t current_time)
{
 3d8:	8f 92       	push	r8
 3da:	9f 92       	push	r9
 3dc:	af 92       	push	r10
 3de:	bf 92       	push	r11
 3e0:	cf 92       	push	r12
 3e2:	df 92       	push	r13
 3e4:	ef 92       	push	r14
 3e6:	ff 92       	push	r15
 3e8:	0f 93       	push	r16
 3ea:	1f 93       	push	r17
 3ec:	cf 93       	push	r28
 3ee:	df 93       	push	r29
 3f0:	ec 01       	movw	r28, r24
	STEPPER_REGISTER |= step_pin;
 3f2:	95 b1       	in	r25, 0x05	; 5
 3f4:	8c 8d       	ldd	r24, Y+28	; 0x1c
 3f6:	89 2b       	or	r24, r25
 3f8:	85 b9       	out	0x05, r24	; 5
	/*Generate pulses at a frequency of step time*/
	if(current_time - stepper_time > pulse_width){
 3fa:	0f 85       	ldd	r16, Y+15	; 0x0f
 3fc:	18 89       	ldd	r17, Y+16	; 0x10
 3fe:	8f 89       	ldd	r24, Y+23	; 0x17
 400:	98 8d       	ldd	r25, Y+24	; 0x18
 402:	a9 8d       	ldd	r26, Y+25	; 0x19
 404:	ba 8d       	ldd	r27, Y+26	; 0x1a
 406:	6a 01       	movw	r12, r20
 408:	7b 01       	movw	r14, r22
 40a:	c8 1a       	sub	r12, r24
 40c:	d9 0a       	sbc	r13, r25
 40e:	ea 0a       	sbc	r14, r26
 410:	fb 0a       	sbc	r15, r27
 412:	c8 01       	movw	r24, r16
 414:	01 2e       	mov	r0, r17
 416:	00 0c       	add	r0, r0
 418:	aa 0b       	sbc	r26, r26
 41a:	bb 0b       	sbc	r27, r27
 41c:	8c 15       	cp	r24, r12
 41e:	9d 05       	cpc	r25, r13
 420:	ae 05       	cpc	r26, r14
 422:	bf 05       	cpc	r27, r15
 424:	08 f0       	brcs	.+2      	; 0x428 <__LOCK_REGION_LENGTH__+0x28>
 426:	9a c0       	rjmp	.+308    	; 0x55c <__LOCK_REGION_LENGTH__+0x15c>
		stepper_time = current_time;
 428:	4f 8b       	std	Y+23, r20	; 0x17
 42a:	58 8f       	std	Y+24, r21	; 0x18
 42c:	69 8f       	std	Y+25, r22	; 0x19
 42e:	7a 8f       	std	Y+26, r23	; 0x1a
		switch(state){
 430:	89 a1       	ldd	r24, Y+33	; 0x21
 432:	83 30       	cpi	r24, 0x03	; 3
 434:	09 f4       	brne	.+2      	; 0x438 <__LOCK_REGION_LENGTH__+0x38>
 436:	59 c0       	rjmp	.+178    	; 0x4ea <__LOCK_REGION_LENGTH__+0xea>
 438:	84 30       	cpi	r24, 0x04	; 4
 43a:	09 f4       	brne	.+2      	; 0x43e <__LOCK_REGION_LENGTH__+0x3e>
 43c:	67 c0       	rjmp	.+206    	; 0x50c <__LOCK_REGION_LENGTH__+0x10c>
 43e:	82 30       	cpi	r24, 0x02	; 2
 440:	09 f0       	breq	.+2      	; 0x444 <__LOCK_REGION_LENGTH__+0x44>
 442:	82 c0       	rjmp	.+260    	; 0x548 <__LOCK_REGION_LENGTH__+0x148>
			case S_ACCEL:
				pulse_width=(int)pulse_width-(2*(int)pulse_width)/(4.0*pulse_width_counter  +1);	
 444:	b8 01       	movw	r22, r16
 446:	01 2e       	mov	r0, r17
 448:	00 0c       	add	r0, r0
 44a:	88 0b       	sbc	r24, r24
 44c:	99 0b       	sbc	r25, r25
 44e:	0e 94 1e 06 	call	0xc3c	; 0xc3c <__floatsisf>
 452:	6b 01       	movw	r12, r22
 454:	7c 01       	movw	r14, r24
 456:	b8 01       	movw	r22, r16
 458:	66 0f       	add	r22, r22
 45a:	77 1f       	adc	r23, r23
 45c:	07 2e       	mov	r0, r23
 45e:	00 0c       	add	r0, r0
 460:	88 0b       	sbc	r24, r24
 462:	99 0b       	sbc	r25, r25
 464:	0e 94 1e 06 	call	0xc3c	; 0xc3c <__floatsisf>
 468:	4b 01       	movw	r8, r22
 46a:	5c 01       	movw	r10, r24
 46c:	69 89       	ldd	r22, Y+17	; 0x11
 46e:	7a 89       	ldd	r23, Y+18	; 0x12
 470:	07 2e       	mov	r0, r23
 472:	00 0c       	add	r0, r0
 474:	88 0b       	sbc	r24, r24
 476:	99 0b       	sbc	r25, r25
 478:	0e 94 1e 06 	call	0xc3c	; 0xc3c <__floatsisf>
 47c:	20 e0       	ldi	r18, 0x00	; 0
 47e:	30 e0       	ldi	r19, 0x00	; 0
 480:	40 e8       	ldi	r20, 0x80	; 128
 482:	50 e4       	ldi	r21, 0x40	; 64
 484:	0e 94 aa 06 	call	0xd54	; 0xd54 <__mulsf3>
 488:	20 e0       	ldi	r18, 0x00	; 0
 48a:	30 e0       	ldi	r19, 0x00	; 0
 48c:	40 e8       	ldi	r20, 0x80	; 128
 48e:	5f e3       	ldi	r21, 0x3F	; 63
 490:	0e 94 08 05 	call	0xa10	; 0xa10 <__addsf3>
 494:	9b 01       	movw	r18, r22
 496:	ac 01       	movw	r20, r24
 498:	c5 01       	movw	r24, r10
 49a:	b4 01       	movw	r22, r8
 49c:	0e 94 74 05 	call	0xae8	; 0xae8 <__divsf3>
 4a0:	9b 01       	movw	r18, r22
 4a2:	ac 01       	movw	r20, r24
 4a4:	c7 01       	movw	r24, r14
 4a6:	b6 01       	movw	r22, r12
 4a8:	0e 94 07 05 	call	0xa0e	; 0xa0e <__subsf3>
 4ac:	0e 94 e6 05 	call	0xbcc	; 0xbcc <__fixsfsi>
					
				if (pulse_width <= 10){
 4b0:	6b 30       	cpi	r22, 0x0B	; 11
 4b2:	71 05       	cpc	r23, r1
 4b4:	1c f0       	brlt	.+6      	; 0x4bc <__LOCK_REGION_LENGTH__+0xbc>
	/*Generate pulses at a frequency of step time*/
	if(current_time - stepper_time > pulse_width){
		stepper_time = current_time;
		switch(state){
			case S_ACCEL:
				pulse_width=(int)pulse_width-(2*(int)pulse_width)/(4.0*pulse_width_counter  +1);	
 4b6:	78 8b       	std	Y+16, r23	; 0x10
 4b8:	6f 87       	std	Y+15, r22	; 0x0f
 4ba:	04 c0       	rjmp	.+8      	; 0x4c4 <__LOCK_REGION_LENGTH__+0xc4>
					
				if (pulse_width <= 10){
					pulse_width = 10;
 4bc:	8a e0       	ldi	r24, 0x0A	; 10
 4be:	90 e0       	ldi	r25, 0x00	; 0
 4c0:	98 8b       	std	Y+16, r25	; 0x10
 4c2:	8f 87       	std	Y+15, r24	; 0x0f
				}
				usart_sendln(pulse_width);
 4c4:	8f 85       	ldd	r24, Y+15	; 0x0f
 4c6:	98 89       	ldd	r25, Y+16	; 0x10
 4c8:	0e 94 fd 04 	call	0x9fa	; 0x9fa <_Z12usart_sendlni>
				if(step_counter ==  t0){
 4cc:	2b 89       	ldd	r18, Y+19	; 0x13
 4ce:	3c 89       	ldd	r19, Y+20	; 0x14
 4d0:	8f 81       	ldd	r24, Y+7	; 0x07
 4d2:	98 85       	ldd	r25, Y+8	; 0x08
 4d4:	28 17       	cp	r18, r24
 4d6:	39 07       	cpc	r19, r25
 4d8:	11 f4       	brne	.+4      	; 0x4de <__LOCK_REGION_LENGTH__+0xde>
					//usart_send("STATE : ACCEL ");usart_sendln((int)step_counter);
					//usart_send("Pulse time ");usart_sendln((int)pulse_width); 
					state = S_CONSTANT;
 4da:	83 e0       	ldi	r24, 0x03	; 3
 4dc:	89 a3       	std	Y+33, r24	; 0x21
				}	
				pulse_width_counter ++;
 4de:	89 89       	ldd	r24, Y+17	; 0x11
 4e0:	9a 89       	ldd	r25, Y+18	; 0x12
 4e2:	01 96       	adiw	r24, 0x01	; 1
 4e4:	9a 8b       	std	Y+18, r25	; 0x12
 4e6:	89 8b       	std	Y+17, r24	; 0x11
				break; 
 4e8:	2f c0       	rjmp	.+94     	; 0x548 <__LOCK_REGION_LENGTH__+0x148>
			case S_CONSTANT:
				if(step_counter == t1){
 4ea:	2b 89       	ldd	r18, Y+19	; 0x13
 4ec:	3c 89       	ldd	r19, Y+20	; 0x14
 4ee:	89 85       	ldd	r24, Y+9	; 0x09
 4f0:	9a 85       	ldd	r25, Y+10	; 0x0a
 4f2:	28 17       	cp	r18, r24
 4f4:	39 07       	cpc	r19, r25
 4f6:	41 f5       	brne	.+80     	; 0x548 <__LOCK_REGION_LENGTH__+0x148>
					//usart_send("STATE : CONSTANT ");usart_sendln((int)step_counter); 
					//usart_send("Pulse time ");usart_sendln((int)pulse_width); 
					state = S_DECEL;
 4f8:	84 e0       	ldi	r24, 0x04	; 4
 4fa:	89 a3       	std	Y+33, r24	; 0x21
					pulse_width_counter =pulse_width_counter *-1; 
 4fc:	89 89       	ldd	r24, Y+17	; 0x11
 4fe:	9a 89       	ldd	r25, Y+18	; 0x12
 500:	91 95       	neg	r25
 502:	81 95       	neg	r24
 504:	91 09       	sbc	r25, r1
 506:	9a 8b       	std	Y+18, r25	; 0x12
 508:	89 8b       	std	Y+17, r24	; 0x11
 50a:	1e c0       	rjmp	.+60     	; 0x548 <__LOCK_REGION_LENGTH__+0x148>
				//	usart_sendln(pulse_width_counter );
				}
				break;
			case S_DECEL:
				pulse_width=(pulse_width-(2*pulse_width)/(4*pulse_width_counter  +1));		
 50c:	29 89       	ldd	r18, Y+17	; 0x11
 50e:	3a 89       	ldd	r19, Y+18	; 0x12
 510:	c8 01       	movw	r24, r16
 512:	88 0f       	add	r24, r24
 514:	99 1f       	adc	r25, r25
 516:	b9 01       	movw	r22, r18
 518:	66 0f       	add	r22, r22
 51a:	77 1f       	adc	r23, r23
 51c:	66 0f       	add	r22, r22
 51e:	77 1f       	adc	r23, r23
 520:	6f 5f       	subi	r22, 0xFF	; 255
 522:	7f 4f       	sbci	r23, 0xFF	; 255
 524:	0e 94 72 07 	call	0xee4	; 0xee4 <__divmodhi4>
 528:	06 1b       	sub	r16, r22
 52a:	17 0b       	sbc	r17, r23
 52c:	18 8b       	std	Y+16, r17	; 0x10
 52e:	0f 87       	std	Y+15, r16	; 0x0f
				if(step_counter == num_steps){
 530:	4b 89       	ldd	r20, Y+19	; 0x13
 532:	5c 89       	ldd	r21, Y+20	; 0x14
 534:	8d 81       	ldd	r24, Y+5	; 0x05
 536:	9e 81       	ldd	r25, Y+6	; 0x06
 538:	48 17       	cp	r20, r24
 53a:	59 07       	cpc	r21, r25
 53c:	09 f4       	brne	.+2      	; 0x540 <__LOCK_REGION_LENGTH__+0x140>
					//usart_send("STATE : Decel ");usart_sendln((int)step_counter);
					//usart_send("Pulse time ");usart_sendln((int)pulse_width); 
					start = 0; 
 53e:	18 82       	st	Y, r1
				}
				pulse_width_counter ++;
 540:	2f 5f       	subi	r18, 0xFF	; 255
 542:	3f 4f       	sbci	r19, 0xFF	; 255
 544:	3a 8b       	std	Y+18, r19	; 0x12
 546:	29 8b       	std	Y+17, r18	; 0x11
				break;
		}	
		STEPPER_REGISTER &= ~step_pin;
 548:	95 b1       	in	r25, 0x05	; 5
 54a:	8c 8d       	ldd	r24, Y+28	; 0x1c
 54c:	80 95       	com	r24
 54e:	89 23       	and	r24, r25
 550:	85 b9       	out	0x05, r24	; 5
		step_counter++; 
 552:	8b 89       	ldd	r24, Y+19	; 0x13
 554:	9c 89       	ldd	r25, Y+20	; 0x14
 556:	01 96       	adiw	r24, 0x01	; 1
 558:	9c 8b       	std	Y+20, r25	; 0x14
 55a:	8b 8b       	std	Y+19, r24	; 0x13
	}
	
	
	return state;
}
 55c:	89 a1       	ldd	r24, Y+33	; 0x21
 55e:	df 91       	pop	r29
 560:	cf 91       	pop	r28
 562:	1f 91       	pop	r17
 564:	0f 91       	pop	r16
 566:	ff 90       	pop	r15
 568:	ef 90       	pop	r14
 56a:	df 90       	pop	r13
 56c:	cf 90       	pop	r12
 56e:	bf 90       	pop	r11
 570:	af 90       	pop	r10
 572:	9f 90       	pop	r9
 574:	8f 90       	pop	r8
 576:	08 95       	ret

00000578 <_ZN12StepperMotor6rotateEm>:
} 




int StepperMotor::rotate(uint32_t current_time){
 578:	2f 92       	push	r2
 57a:	3f 92       	push	r3
 57c:	4f 92       	push	r4
 57e:	5f 92       	push	r5
 580:	6f 92       	push	r6
 582:	7f 92       	push	r7
 584:	8f 92       	push	r8
 586:	9f 92       	push	r9
 588:	af 92       	push	r10
 58a:	bf 92       	push	r11
 58c:	cf 92       	push	r12
 58e:	df 92       	push	r13
 590:	ef 92       	push	r14
 592:	ff 92       	push	r15
 594:	0f 93       	push	r16
 596:	1f 93       	push	r17
 598:	cf 93       	push	r28
 59a:	df 93       	push	r29
 59c:	cd b7       	in	r28, 0x3d	; 61
 59e:	de b7       	in	r29, 0x3e	; 62
 5a0:	2a 97       	sbiw	r28, 0x0a	; 10
 5a2:	0f b6       	in	r0, 0x3f	; 63
 5a4:	f8 94       	cli
 5a6:	de bf       	out	0x3e, r29	; 62
 5a8:	0f be       	out	0x3f, r0	; 63
 5aa:	cd bf       	out	0x3d, r28	; 61
 5ac:	9a 87       	std	Y+10, r25	; 0x0a
 5ae:	89 87       	std	Y+9, r24	; 0x09
	if(start == 1){
 5b0:	dc 01       	movw	r26, r24
 5b2:	8c 91       	ld	r24, X
 5b4:	81 30       	cpi	r24, 0x01	; 1
 5b6:	09 f0       	breq	.+2      	; 0x5ba <_ZN12StepperMotor6rotateEm+0x42>
 5b8:	45 c1       	rjmp	.+650    	; 0x844 <_ZN12StepperMotor6rotateEm+0x2cc>
		state = S_ACCEL;
 5ba:	82 e0       	ldi	r24, 0x02	; 2
 5bc:	91 96       	adiw	r26, 0x21	; 33
 5be:	8c 93       	st	X, r24
 5c0:	91 97       	sbiw	r26, 0x21	; 33
		int16_t angle=(target_pos - current_pos);
 5c2:	13 96       	adiw	r26, 0x03	; 3
 5c4:	8d 91       	ld	r24, X+
 5c6:	9c 91       	ld	r25, X
 5c8:	14 97       	sbiw	r26, 0x04	; 4
 5ca:	11 96       	adiw	r26, 0x01	; 1
 5cc:	2d 91       	ld	r18, X+
 5ce:	3c 91       	ld	r19, X
 5d0:	12 97       	sbiw	r26, 0x02	; 2
 5d2:	5c 01       	movw	r10, r24
 5d4:	a2 1a       	sub	r10, r18
 5d6:	b3 0a       	sbc	r11, r19
		current_pos = target_pos;
 5d8:	12 96       	adiw	r26, 0x02	; 2
 5da:	9c 93       	st	X, r25
 5dc:	8e 93       	st	-X, r24
 5de:	11 97       	sbiw	r26, 0x01	; 1
		if(angle> 0){
 5e0:	1a 14       	cp	r1, r10
 5e2:	1b 04       	cpc	r1, r11
 5e4:	34 f4       	brge	.+12     	; 0x5f2 <_ZN12StepperMotor6rotateEm+0x7a>
			STEPPER_REGISTER |= dir_pin; 
 5e6:	95 b1       	in	r25, 0x05	; 5
 5e8:	5b 96       	adiw	r26, 0x1b	; 27
 5ea:	8c 91       	ld	r24, X
 5ec:	89 2b       	or	r24, r25
 5ee:	85 b9       	out	0x05, r24	; 5
 5f0:	14 c0       	rjmp	.+40     	; 0x61a <_ZN12StepperMotor6rotateEm+0xa2>
		}else if(angle <0){
 5f2:	bb 20       	and	r11, r11
 5f4:	5c f4       	brge	.+22     	; 0x60c <_ZN12StepperMotor6rotateEm+0x94>
			STEPPER_REGISTER &= ~dir_pin; 
 5f6:	95 b1       	in	r25, 0x05	; 5
 5f8:	e9 85       	ldd	r30, Y+9	; 0x09
 5fa:	fa 85       	ldd	r31, Y+10	; 0x0a
 5fc:	83 8d       	ldd	r24, Z+27	; 0x1b
 5fe:	80 95       	com	r24
 600:	89 23       	and	r24, r25
 602:	85 b9       	out	0x05, r24	; 5
			angle = angle * -1;
 604:	b1 94       	neg	r11
 606:	a1 94       	neg	r10
 608:	b1 08       	sbc	r11, r1
 60a:	07 c0       	rjmp	.+14     	; 0x61a <_ZN12StepperMotor6rotateEm+0xa2>
		}else if(angle == 0){
 60c:	a1 14       	cp	r10, r1
 60e:	b1 04       	cpc	r11, r1
 610:	21 f4       	brne	.+8      	; 0x61a <_ZN12StepperMotor6rotateEm+0xa2>
			state = S_WAIT;
 612:	a9 85       	ldd	r26, Y+9	; 0x09
 614:	ba 85       	ldd	r27, Y+10	; 0x0a
 616:	91 96       	adiw	r26, 0x21	; 33
 618:	1c 92       	st	X, r1
			start = 0; 
		}

		/* Compute parameters */
		num_steps = angle*step_to_angle;
 61a:	a9 85       	ldd	r26, Y+9	; 0x09
 61c:	ba 85       	ldd	r27, Y+10	; 0x0a
 61e:	5d 96       	adiw	r26, 0x1d	; 29
 620:	8d 91       	ld	r24, X+
 622:	9d 91       	ld	r25, X+
 624:	0d 90       	ld	r0, X+
 626:	bc 91       	ld	r27, X
 628:	a0 2d       	mov	r26, r0
 62a:	89 83       	std	Y+1, r24	; 0x01
 62c:	9a 83       	std	Y+2, r25	; 0x02
 62e:	ab 83       	std	Y+3, r26	; 0x03
 630:	bc 83       	std	Y+4, r27	; 0x04
 632:	b5 01       	movw	r22, r10
 634:	0b 2c       	mov	r0, r11
 636:	00 0c       	add	r0, r0
 638:	88 0b       	sbc	r24, r24
 63a:	99 0b       	sbc	r25, r25
 63c:	0e 94 1e 06 	call	0xc3c	; 0xc3c <__floatsisf>
 640:	29 81       	ldd	r18, Y+1	; 0x01
 642:	3a 81       	ldd	r19, Y+2	; 0x02
 644:	4b 81       	ldd	r20, Y+3	; 0x03
 646:	5c 81       	ldd	r21, Y+4	; 0x04
 648:	0e 94 aa 06 	call	0xd54	; 0xd54 <__mulsf3>
 64c:	0e 94 ed 05 	call	0xbda	; 0xbda <__fixunssfsi>
 650:	2b 01       	movw	r4, r22
 652:	3c 01       	movw	r6, r24
		uint16_t vmax= 0.5*(acceleration*duration-sqrt(pow(acceleration*duration,2)-(angle*acceleration*4)));
 654:	e9 85       	ldd	r30, Y+9	; 0x09
 656:	fa 85       	ldd	r31, Y+10	; 0x0a
 658:	03 85       	ldd	r16, Z+11	; 0x0b
 65a:	14 85       	ldd	r17, Z+12	; 0x0c
 65c:	85 85       	ldd	r24, Z+13	; 0x0d
 65e:	96 85       	ldd	r25, Z+14	; 0x0e
 660:	08 9f       	mul	r16, r24
 662:	b0 01       	movw	r22, r0
 664:	09 9f       	mul	r16, r25
 666:	70 0d       	add	r23, r0
 668:	18 9f       	mul	r17, r24
 66a:	70 0d       	add	r23, r0
 66c:	11 24       	eor	r1, r1
 66e:	80 e0       	ldi	r24, 0x00	; 0
 670:	90 e0       	ldi	r25, 0x00	; 0
 672:	0e 94 1c 06 	call	0xc38	; 0xc38 <__floatunsisf>
 676:	6b 01       	movw	r12, r22
 678:	7c 01       	movw	r14, r24
 67a:	a0 9e       	mul	r10, r16
 67c:	10 01       	movw	r2, r0
 67e:	a1 9e       	mul	r10, r17
 680:	30 0c       	add	r3, r0
 682:	b0 9e       	mul	r11, r16
 684:	30 0c       	add	r3, r0
 686:	11 24       	eor	r1, r1
 688:	9b 01       	movw	r18, r22
 68a:	ac 01       	movw	r20, r24
 68c:	0e 94 aa 06 	call	0xd54	; 0xd54 <__mulsf3>
 690:	6d 83       	std	Y+5, r22	; 0x05
 692:	7e 83       	std	Y+6, r23	; 0x06
 694:	8f 83       	std	Y+7, r24	; 0x07
 696:	98 87       	std	Y+8, r25	; 0x08
 698:	41 01       	movw	r8, r2
 69a:	88 0c       	add	r8, r8
 69c:	99 1c       	adc	r9, r9
 69e:	88 0c       	add	r8, r8
 6a0:	99 1c       	adc	r9, r9
 6a2:	a1 2c       	mov	r10, r1
 6a4:	b1 2c       	mov	r11, r1
 6a6:	c5 01       	movw	r24, r10
 6a8:	b4 01       	movw	r22, r8
 6aa:	0e 94 1c 06 	call	0xc38	; 0xc38 <__floatunsisf>
 6ae:	9b 01       	movw	r18, r22
 6b0:	ac 01       	movw	r20, r24
 6b2:	6d 81       	ldd	r22, Y+5	; 0x05
 6b4:	7e 81       	ldd	r23, Y+6	; 0x06
 6b6:	8f 81       	ldd	r24, Y+7	; 0x07
 6b8:	98 85       	ldd	r25, Y+8	; 0x08
 6ba:	0e 94 07 05 	call	0xa0e	; 0xa0e <__subsf3>
 6be:	0e 94 1d 07 	call	0xe3a	; 0xe3a <sqrt>
 6c2:	9b 01       	movw	r18, r22
 6c4:	ac 01       	movw	r20, r24
 6c6:	c7 01       	movw	r24, r14
 6c8:	b6 01       	movw	r22, r12
 6ca:	0e 94 07 05 	call	0xa0e	; 0xa0e <__subsf3>
 6ce:	20 e0       	ldi	r18, 0x00	; 0
 6d0:	30 e0       	ldi	r19, 0x00	; 0
 6d2:	40 e0       	ldi	r20, 0x00	; 0
 6d4:	5f e3       	ldi	r21, 0x3F	; 63
 6d6:	0e 94 aa 06 	call	0xd54	; 0xd54 <__mulsf3>
 6da:	0e 94 ed 05 	call	0xbda	; 0xbda <__fixunssfsi>
 6de:	6b 01       	movw	r12, r22
 6e0:	7c 01       	movw	r14, r24
		t0=(pow(vmax,2)*num_steps)/(2*angle*acceleration);
 6e2:	80 e0       	ldi	r24, 0x00	; 0
 6e4:	90 e0       	ldi	r25, 0x00	; 0
 6e6:	0e 94 1c 06 	call	0xc38	; 0xc38 <__floatunsisf>
 6ea:	9b 01       	movw	r18, r22
 6ec:	ac 01       	movw	r20, r24
 6ee:	0e 94 aa 06 	call	0xd54	; 0xd54 <__mulsf3>
 6f2:	4b 01       	movw	r8, r22
 6f4:	5c 01       	movw	r10, r24
 6f6:	b2 01       	movw	r22, r4
 6f8:	80 e0       	ldi	r24, 0x00	; 0
 6fa:	90 e0       	ldi	r25, 0x00	; 0
 6fc:	0e 94 1c 06 	call	0xc38	; 0xc38 <__floatunsisf>
 700:	9b 01       	movw	r18, r22
 702:	ac 01       	movw	r20, r24
 704:	c5 01       	movw	r24, r10
 706:	b4 01       	movw	r22, r8
 708:	0e 94 aa 06 	call	0xd54	; 0xd54 <__mulsf3>
 70c:	4b 01       	movw	r8, r22
 70e:	5c 01       	movw	r10, r24
 710:	b1 01       	movw	r22, r2
 712:	66 0f       	add	r22, r22
 714:	77 1f       	adc	r23, r23
 716:	80 e0       	ldi	r24, 0x00	; 0
 718:	90 e0       	ldi	r25, 0x00	; 0
 71a:	0e 94 1c 06 	call	0xc38	; 0xc38 <__floatunsisf>
 71e:	9b 01       	movw	r18, r22
 720:	ac 01       	movw	r20, r24
 722:	c5 01       	movw	r24, r10
 724:	b4 01       	movw	r22, r8
 726:	0e 94 74 05 	call	0xae8	; 0xae8 <__divsf3>
 72a:	0e 94 ed 05 	call	0xbda	; 0xbda <__fixunssfsi>
 72e:	a9 85       	ldd	r26, Y+9	; 0x09
 730:	ba 85       	ldd	r27, Y+10	; 0x0a
 732:	18 96       	adiw	r26, 0x08	; 8
 734:	7c 93       	st	X, r23
 736:	6e 93       	st	-X, r22
 738:	17 97       	sbiw	r26, 0x07	; 7
		t1 =num_steps-t0;
 73a:	c2 01       	movw	r24, r4
 73c:	86 1b       	sub	r24, r22
 73e:	97 0b       	sbc	r25, r23
 740:	1a 96       	adiw	r26, 0x0a	; 10
 742:	9c 93       	st	X, r25
 744:	8e 93       	st	-X, r24
 746:	19 97       	sbiw	r26, 0x09	; 9
		num_steps--;
 748:	c2 01       	movw	r24, r4
 74a:	01 97       	sbiw	r24, 0x01	; 1
 74c:	16 96       	adiw	r26, 0x06	; 6
 74e:	9c 93       	st	X, r25
 750:	8e 93       	st	-X, r24
 752:	15 97       	sbiw	r26, 0x05	; 5
		pulse_width =10000* sqrt(2/(acceleration*step_to_angle));
 754:	48 01       	movw	r8, r16
 756:	a1 2c       	mov	r10, r1
 758:	b1 2c       	mov	r11, r1
 75a:	c5 01       	movw	r24, r10
 75c:	b4 01       	movw	r22, r8
 75e:	0e 94 1c 06 	call	0xc38	; 0xc38 <__floatunsisf>
 762:	29 81       	ldd	r18, Y+1	; 0x01
 764:	3a 81       	ldd	r19, Y+2	; 0x02
 766:	4b 81       	ldd	r20, Y+3	; 0x03
 768:	5c 81       	ldd	r21, Y+4	; 0x04
 76a:	0e 94 aa 06 	call	0xd54	; 0xd54 <__mulsf3>
 76e:	9b 01       	movw	r18, r22
 770:	ac 01       	movw	r20, r24
 772:	60 e0       	ldi	r22, 0x00	; 0
 774:	70 e0       	ldi	r23, 0x00	; 0
 776:	80 e0       	ldi	r24, 0x00	; 0
 778:	90 e4       	ldi	r25, 0x40	; 64
 77a:	0e 94 74 05 	call	0xae8	; 0xae8 <__divsf3>
 77e:	0e 94 1d 07 	call	0xe3a	; 0xe3a <sqrt>
 782:	20 e0       	ldi	r18, 0x00	; 0
 784:	30 e4       	ldi	r19, 0x40	; 64
 786:	4c e1       	ldi	r20, 0x1C	; 28
 788:	56 e4       	ldi	r21, 0x46	; 70
 78a:	0e 94 aa 06 	call	0xd54	; 0xd54 <__mulsf3>
 78e:	0e 94 e6 05 	call	0xbcc	; 0xbcc <__fixsfsi>
 792:	e9 85       	ldd	r30, Y+9	; 0x09
 794:	fa 85       	ldd	r31, Y+10	; 0x0a
 796:	70 8b       	std	Z+16, r23	; 0x10
 798:	67 87       	std	Z+15, r22	; 0x0f
		/* End  computations */

		step_counter  = 0;
 79a:	14 8a       	std	Z+20, r1	; 0x14
 79c:	13 8a       	std	Z+19, r1	; 0x13
		pulse_width_counter  = 1; 
 79e:	81 e0       	ldi	r24, 0x01	; 1
 7a0:	90 e0       	ldi	r25, 0x00	; 0
 7a2:	92 8b       	std	Z+18, r25	; 0x12
 7a4:	81 8b       	std	Z+17, r24	; 0x11
		start = 2; 
 7a6:	82 e0       	ldi	r24, 0x02	; 2
 7a8:	80 83       	st	Z, r24
		
		usart_sendln("####################"); 
 7aa:	8d e0       	ldi	r24, 0x0D	; 13
 7ac:	91 e0       	ldi	r25, 0x01	; 1
 7ae:	0e 94 02 05 	call	0xa04	; 0xa04 <_Z12usart_sendlnPc>
		usart_send("Step to angle");usart_send((int)step_to_angle);
 7b2:	82 e2       	ldi	r24, 0x22	; 34
 7b4:	91 e0       	ldi	r25, 0x01	; 1
 7b6:	0e 94 ee 04 	call	0x9dc	; 0x9dc <_Z10usart_sendPc>
 7ba:	a9 85       	ldd	r26, Y+9	; 0x09
 7bc:	ba 85       	ldd	r27, Y+10	; 0x0a
 7be:	5d 96       	adiw	r26, 0x1d	; 29
 7c0:	6d 91       	ld	r22, X+
 7c2:	7d 91       	ld	r23, X+
 7c4:	8d 91       	ld	r24, X+
 7c6:	9c 91       	ld	r25, X
 7c8:	90 97       	sbiw	r26, 0x20	; 32
 7ca:	0e 94 e6 05 	call	0xbcc	; 0xbcc <__fixsfsi>
 7ce:	cb 01       	movw	r24, r22
 7d0:	0e 94 c4 04 	call	0x988	; 0x988 <_Z10usart_sendi>
		usart_send("vmax ");usart_sendln((int)vmax); 			
 7d4:	80 e3       	ldi	r24, 0x30	; 48
 7d6:	91 e0       	ldi	r25, 0x01	; 1
 7d8:	0e 94 ee 04 	call	0x9dc	; 0x9dc <_Z10usart_sendPc>
 7dc:	c6 01       	movw	r24, r12
 7de:	0e 94 fd 04 	call	0x9fa	; 0x9fa <_Z12usart_sendlni>
		usart_send("#n ");usart_sendln((int)num_steps); 			
 7e2:	86 e3       	ldi	r24, 0x36	; 54
 7e4:	91 e0       	ldi	r25, 0x01	; 1
 7e6:	0e 94 ee 04 	call	0x9dc	; 0x9dc <_Z10usart_sendPc>
 7ea:	e9 85       	ldd	r30, Y+9	; 0x09
 7ec:	fa 85       	ldd	r31, Y+10	; 0x0a
 7ee:	85 81       	ldd	r24, Z+5	; 0x05
 7f0:	96 81       	ldd	r25, Z+6	; 0x06
 7f2:	0e 94 fd 04 	call	0x9fa	; 0x9fa <_Z12usart_sendlni>
		usart_send("t0 ");usart_sendln((int)t0); 			
 7f6:	8a e3       	ldi	r24, 0x3A	; 58
 7f8:	91 e0       	ldi	r25, 0x01	; 1
 7fa:	0e 94 ee 04 	call	0x9dc	; 0x9dc <_Z10usart_sendPc>
 7fe:	a9 85       	ldd	r26, Y+9	; 0x09
 800:	ba 85       	ldd	r27, Y+10	; 0x0a
 802:	17 96       	adiw	r26, 0x07	; 7
 804:	8d 91       	ld	r24, X+
 806:	9c 91       	ld	r25, X
 808:	18 97       	sbiw	r26, 0x08	; 8
 80a:	0e 94 fd 04 	call	0x9fa	; 0x9fa <_Z12usart_sendlni>
		usart_send("t1 ");usart_sendln((int)t1); 			
 80e:	8e e3       	ldi	r24, 0x3E	; 62
 810:	91 e0       	ldi	r25, 0x01	; 1
 812:	0e 94 ee 04 	call	0x9dc	; 0x9dc <_Z10usart_sendPc>
 816:	e9 85       	ldd	r30, Y+9	; 0x09
 818:	fa 85       	ldd	r31, Y+10	; 0x0a
 81a:	81 85       	ldd	r24, Z+9	; 0x09
 81c:	92 85       	ldd	r25, Z+10	; 0x0a
 81e:	0e 94 fd 04 	call	0x9fa	; 0x9fa <_Z12usart_sendlni>
		usart_send("Step time ");usart_sendln((int)pulse_width);
 822:	82 e4       	ldi	r24, 0x42	; 66
 824:	91 e0       	ldi	r25, 0x01	; 1
 826:	0e 94 ee 04 	call	0x9dc	; 0x9dc <_Z10usart_sendPc>
 82a:	a9 85       	ldd	r26, Y+9	; 0x09
 82c:	ba 85       	ldd	r27, Y+10	; 0x0a
 82e:	1f 96       	adiw	r26, 0x0f	; 15
 830:	8d 91       	ld	r24, X+
 832:	9c 91       	ld	r25, X
 834:	50 97       	sbiw	r26, 0x10	; 16
 836:	0e 94 fd 04 	call	0x9fa	; 0x9fa <_Z12usart_sendlni>
		usart_sendln("####################"); 	
 83a:	8d e0       	ldi	r24, 0x0D	; 13
 83c:	91 e0       	ldi	r25, 0x01	; 1
 83e:	0e 94 02 05 	call	0xa04	; 0xa04 <_Z12usart_sendlnPc>
 842:	06 c0       	rjmp	.+12     	; 0x850 <_ZN12StepperMotor6rotateEm+0x2d8>
	}else if(start == 2){
 844:	82 30       	cpi	r24, 0x02	; 2
 846:	21 f4       	brne	.+8      	; 0x850 <_ZN12StepperMotor6rotateEm+0x2d8>
		fsm(current_time); 
 848:	89 85       	ldd	r24, Y+9	; 0x09
 84a:	9a 85       	ldd	r25, Y+10	; 0x0a
 84c:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <_ZN12StepperMotor3fsmEm>
	}

}
 850:	2a 96       	adiw	r28, 0x0a	; 10
 852:	0f b6       	in	r0, 0x3f	; 63
 854:	f8 94       	cli
 856:	de bf       	out	0x3e, r29	; 62
 858:	0f be       	out	0x3f, r0	; 63
 85a:	cd bf       	out	0x3d, r28	; 61
 85c:	df 91       	pop	r29
 85e:	cf 91       	pop	r28
 860:	1f 91       	pop	r17
 862:	0f 91       	pop	r16
 864:	ff 90       	pop	r15
 866:	ef 90       	pop	r14
 868:	df 90       	pop	r13
 86a:	cf 90       	pop	r12
 86c:	bf 90       	pop	r11
 86e:	af 90       	pop	r10
 870:	9f 90       	pop	r9
 872:	8f 90       	pop	r8
 874:	7f 90       	pop	r7
 876:	6f 90       	pop	r6
 878:	5f 90       	pop	r5
 87a:	4f 90       	pop	r4
 87c:	3f 90       	pop	r3
 87e:	2f 90       	pop	r2
 880:	08 95       	ret

00000882 <_Z12timer_enablev>:
	timer_counter = 0; 
}

//Reset the counter
void timer_reset(){
	timer_counter = 0; 
 882:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
 886:	e1 e8       	ldi	r30, 0x81	; 129
 888:	f0 e0       	ldi	r31, 0x00	; 0
 88a:	10 82       	st	Z, r1
 88c:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
 890:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
 894:	88 e1       	ldi	r24, 0x18	; 24
 896:	90 e0       	ldi	r25, 0x00	; 0
 898:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__DATA_REGION_ORIGIN__+0x29>
 89c:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__DATA_REGION_ORIGIN__+0x28>
 8a0:	80 81       	ld	r24, Z
 8a2:	88 60       	ori	r24, 0x08	; 8
 8a4:	80 83       	st	Z, r24
 8a6:	80 81       	ld	r24, Z
 8a8:	83 60       	ori	r24, 0x03	; 3
 8aa:	80 83       	st	Z, r24
 8ac:	ef e6       	ldi	r30, 0x6F	; 111
 8ae:	f0 e0       	ldi	r31, 0x00	; 0
 8b0:	80 81       	ld	r24, Z
 8b2:	82 60       	ori	r24, 0x02	; 2
 8b4:	80 83       	st	Z, r24
 8b6:	10 92 64 01 	sts	0x0164, r1	; 0x800164 <timer_counter>
 8ba:	10 92 65 01 	sts	0x0165, r1	; 0x800165 <timer_counter+0x1>
 8be:	10 92 66 01 	sts	0x0166, r1	; 0x800166 <timer_counter+0x2>
 8c2:	10 92 67 01 	sts	0x0167, r1	; 0x800167 <timer_counter+0x3>
 8c6:	08 95       	ret

000008c8 <_Z9timer_10kv>:
}

//Return the elapsed time since the counter was enable 
uint32_t timer_10k(){
	return timer_counter;
 8c8:	60 91 64 01 	lds	r22, 0x0164	; 0x800164 <timer_counter>
 8cc:	70 91 65 01 	lds	r23, 0x0165	; 0x800165 <timer_counter+0x1>
 8d0:	80 91 66 01 	lds	r24, 0x0166	; 0x800166 <timer_counter+0x2>
 8d4:	90 91 67 01 	lds	r25, 0x0167	; 0x800167 <timer_counter+0x3>
}
 8d8:	08 95       	ret

000008da <__vector_11>:

//interrupt vector 
ISR (TIMER1_COMPA_vect) {
 8da:	1f 92       	push	r1
 8dc:	0f 92       	push	r0
 8de:	0f b6       	in	r0, 0x3f	; 63
 8e0:	0f 92       	push	r0
 8e2:	11 24       	eor	r1, r1
 8e4:	8f 93       	push	r24
 8e6:	9f 93       	push	r25
 8e8:	af 93       	push	r26
 8ea:	bf 93       	push	r27
	timer_counter++;
 8ec:	80 91 64 01 	lds	r24, 0x0164	; 0x800164 <timer_counter>
 8f0:	90 91 65 01 	lds	r25, 0x0165	; 0x800165 <timer_counter+0x1>
 8f4:	a0 91 66 01 	lds	r26, 0x0166	; 0x800166 <timer_counter+0x2>
 8f8:	b0 91 67 01 	lds	r27, 0x0167	; 0x800167 <timer_counter+0x3>
 8fc:	01 96       	adiw	r24, 0x01	; 1
 8fe:	a1 1d       	adc	r26, r1
 900:	b1 1d       	adc	r27, r1
 902:	80 93 64 01 	sts	0x0164, r24	; 0x800164 <timer_counter>
 906:	90 93 65 01 	sts	0x0165, r25	; 0x800165 <timer_counter+0x1>
 90a:	a0 93 66 01 	sts	0x0166, r26	; 0x800166 <timer_counter+0x2>
 90e:	b0 93 67 01 	sts	0x0167, r27	; 0x800167 <timer_counter+0x3>
 912:	bf 91       	pop	r27
 914:	af 91       	pop	r26
 916:	9f 91       	pop	r25
 918:	8f 91       	pop	r24
 91a:	0f 90       	pop	r0
 91c:	0f be       	out	0x3f, r0	; 63
 91e:	0f 90       	pop	r0
 920:	1f 90       	pop	r1
 922:	18 95       	reti

00000924 <_Z12usart_enablej>:
	usart_newline();	
}

void usart_sendln(char character){
	usart_send(character);
	usart_newline();	
 924:	28 e9       	ldi	r18, 0x98	; 152
 926:	20 93 c1 00 	sts	0x00C1, r18	; 0x8000c1 <__DATA_REGION_ORIGIN__+0x61>
 92a:	26 e0       	ldi	r18, 0x06	; 6
 92c:	20 93 c2 00 	sts	0x00C2, r18	; 0x8000c2 <__DATA_REGION_ORIGIN__+0x62>
 930:	bc 01       	movw	r22, r24
 932:	80 e0       	ldi	r24, 0x00	; 0
 934:	90 e0       	ldi	r25, 0x00	; 0
 936:	0e 94 1c 06 	call	0xc38	; 0xc38 <__floatunsisf>
 93a:	20 e0       	ldi	r18, 0x00	; 0
 93c:	30 e0       	ldi	r19, 0x00	; 0
 93e:	40 e8       	ldi	r20, 0x80	; 128
 940:	51 e4       	ldi	r21, 0x41	; 65
 942:	0e 94 aa 06 	call	0xd54	; 0xd54 <__mulsf3>
 946:	9b 01       	movw	r18, r22
 948:	ac 01       	movw	r20, r24
 94a:	60 e0       	ldi	r22, 0x00	; 0
 94c:	74 e2       	ldi	r23, 0x24	; 36
 94e:	84 e7       	ldi	r24, 0x74	; 116
 950:	9b e4       	ldi	r25, 0x4B	; 75
 952:	0e 94 74 05 	call	0xae8	; 0xae8 <__divsf3>
 956:	20 e0       	ldi	r18, 0x00	; 0
 958:	30 e0       	ldi	r19, 0x00	; 0
 95a:	40 e8       	ldi	r20, 0x80	; 128
 95c:	5f e3       	ldi	r21, 0x3F	; 63
 95e:	0e 94 07 05 	call	0xa0e	; 0xa0e <__subsf3>
 962:	0e 94 ed 05 	call	0xbda	; 0xbda <__fixunssfsi>
 966:	70 93 c5 00 	sts	0x00C5, r23	; 0x8000c5 <__DATA_REGION_ORIGIN__+0x65>
 96a:	60 93 c4 00 	sts	0x00C4, r22	; 0x8000c4 <__DATA_REGION_ORIGIN__+0x64>
 96e:	08 95       	ret

00000970 <_Z10usart_sendc>:
 970:	e0 ec       	ldi	r30, 0xC0	; 192
 972:	f0 e0       	ldi	r31, 0x00	; 0
 974:	90 81       	ld	r25, Z
 976:	95 ff       	sbrs	r25, 5
 978:	fd cf       	rjmp	.-6      	; 0x974 <_Z10usart_sendc+0x4>
 97a:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
 97e:	08 95       	ret

00000980 <_Z13usart_newlinev>:
 980:	8a e0       	ldi	r24, 0x0A	; 10
 982:	0e 94 b8 04 	call	0x970	; 0x970 <_Z10usart_sendc>
 986:	08 95       	ret

00000988 <_Z10usart_sendi>:
 988:	0f 93       	push	r16
 98a:	1f 93       	push	r17
 98c:	cf 93       	push	r28
 98e:	df 93       	push	r29
 990:	cd b7       	in	r28, 0x3d	; 61
 992:	de b7       	in	r29, 0x3e	; 62
 994:	2a 97       	sbiw	r28, 0x0a	; 10
 996:	0f b6       	in	r0, 0x3f	; 63
 998:	f8 94       	cli
 99a:	de bf       	out	0x3e, r29	; 62
 99c:	0f be       	out	0x3f, r0	; 63
 99e:	cd bf       	out	0x3d, r28	; 61
 9a0:	4a e0       	ldi	r20, 0x0A	; 10
 9a2:	be 01       	movw	r22, r28
 9a4:	6f 5f       	subi	r22, 0xFF	; 255
 9a6:	7f 4f       	sbci	r23, 0xFF	; 255
 9a8:	0e 94 9a 07 	call	0xf34	; 0xf34 <__itoa_ncheck>
 9ac:	89 81       	ldd	r24, Y+1	; 0x01
 9ae:	88 23       	and	r24, r24
 9b0:	51 f0       	breq	.+20     	; 0x9c6 <_Z10usart_sendi+0x3e>
 9b2:	8e 01       	movw	r16, r28
 9b4:	0e 5f       	subi	r16, 0xFE	; 254
 9b6:	1f 4f       	sbci	r17, 0xFF	; 255
 9b8:	0e 94 b8 04 	call	0x970	; 0x970 <_Z10usart_sendc>
 9bc:	f8 01       	movw	r30, r16
 9be:	81 91       	ld	r24, Z+
 9c0:	8f 01       	movw	r16, r30
 9c2:	81 11       	cpse	r24, r1
 9c4:	f9 cf       	rjmp	.-14     	; 0x9b8 <_Z10usart_sendi+0x30>
 9c6:	2a 96       	adiw	r28, 0x0a	; 10
 9c8:	0f b6       	in	r0, 0x3f	; 63
 9ca:	f8 94       	cli
 9cc:	de bf       	out	0x3e, r29	; 62
 9ce:	0f be       	out	0x3f, r0	; 63
 9d0:	cd bf       	out	0x3d, r28	; 61
 9d2:	df 91       	pop	r29
 9d4:	cf 91       	pop	r28
 9d6:	1f 91       	pop	r17
 9d8:	0f 91       	pop	r16
 9da:	08 95       	ret

000009dc <_Z10usart_sendPc>:
 9dc:	cf 93       	push	r28
 9de:	df 93       	push	r29
 9e0:	ec 01       	movw	r28, r24
 9e2:	88 81       	ld	r24, Y
 9e4:	88 23       	and	r24, r24
 9e6:	31 f0       	breq	.+12     	; 0x9f4 <_Z10usart_sendPc+0x18>
 9e8:	21 96       	adiw	r28, 0x01	; 1
 9ea:	0e 94 b8 04 	call	0x970	; 0x970 <_Z10usart_sendc>
 9ee:	89 91       	ld	r24, Y+
 9f0:	81 11       	cpse	r24, r1
 9f2:	fb cf       	rjmp	.-10     	; 0x9ea <_Z10usart_sendPc+0xe>
 9f4:	df 91       	pop	r29
 9f6:	cf 91       	pop	r28
 9f8:	08 95       	ret

000009fa <_Z12usart_sendlni>:
 9fa:	0e 94 c4 04 	call	0x988	; 0x988 <_Z10usart_sendi>
 9fe:	0e 94 c0 04 	call	0x980	; 0x980 <_Z13usart_newlinev>
 a02:	08 95       	ret

00000a04 <_Z12usart_sendlnPc>:
}

 void usart_sendln(char * text){
	usart_send(text);
 a04:	0e 94 ee 04 	call	0x9dc	; 0x9dc <_Z10usart_sendPc>
	usart_newline();	
 a08:	0e 94 c0 04 	call	0x980	; 0x980 <_Z13usart_newlinev>
 a0c:	08 95       	ret

00000a0e <__subsf3>:
 a0e:	50 58       	subi	r21, 0x80	; 128

00000a10 <__addsf3>:
 a10:	bb 27       	eor	r27, r27
 a12:	aa 27       	eor	r26, r26
 a14:	0e 94 1f 05 	call	0xa3e	; 0xa3e <__addsf3x>
 a18:	0c 94 70 06 	jmp	0xce0	; 0xce0 <__fp_round>
 a1c:	0e 94 62 06 	call	0xcc4	; 0xcc4 <__fp_pscA>
 a20:	38 f0       	brcs	.+14     	; 0xa30 <__addsf3+0x20>
 a22:	0e 94 69 06 	call	0xcd2	; 0xcd2 <__fp_pscB>
 a26:	20 f0       	brcs	.+8      	; 0xa30 <__addsf3+0x20>
 a28:	39 f4       	brne	.+14     	; 0xa38 <__addsf3+0x28>
 a2a:	9f 3f       	cpi	r25, 0xFF	; 255
 a2c:	19 f4       	brne	.+6      	; 0xa34 <__addsf3+0x24>
 a2e:	26 f4       	brtc	.+8      	; 0xa38 <__addsf3+0x28>
 a30:	0c 94 5f 06 	jmp	0xcbe	; 0xcbe <__fp_nan>
 a34:	0e f4       	brtc	.+2      	; 0xa38 <__addsf3+0x28>
 a36:	e0 95       	com	r30
 a38:	e7 fb       	bst	r30, 7
 a3a:	0c 94 59 06 	jmp	0xcb2	; 0xcb2 <__fp_inf>

00000a3e <__addsf3x>:
 a3e:	e9 2f       	mov	r30, r25
 a40:	0e 94 81 06 	call	0xd02	; 0xd02 <__fp_split3>
 a44:	58 f3       	brcs	.-42     	; 0xa1c <__addsf3+0xc>
 a46:	ba 17       	cp	r27, r26
 a48:	62 07       	cpc	r22, r18
 a4a:	73 07       	cpc	r23, r19
 a4c:	84 07       	cpc	r24, r20
 a4e:	95 07       	cpc	r25, r21
 a50:	20 f0       	brcs	.+8      	; 0xa5a <__addsf3x+0x1c>
 a52:	79 f4       	brne	.+30     	; 0xa72 <__addsf3x+0x34>
 a54:	a6 f5       	brtc	.+104    	; 0xabe <__addsf3x+0x80>
 a56:	0c 94 a3 06 	jmp	0xd46	; 0xd46 <__fp_zero>
 a5a:	0e f4       	brtc	.+2      	; 0xa5e <__addsf3x+0x20>
 a5c:	e0 95       	com	r30
 a5e:	0b 2e       	mov	r0, r27
 a60:	ba 2f       	mov	r27, r26
 a62:	a0 2d       	mov	r26, r0
 a64:	0b 01       	movw	r0, r22
 a66:	b9 01       	movw	r22, r18
 a68:	90 01       	movw	r18, r0
 a6a:	0c 01       	movw	r0, r24
 a6c:	ca 01       	movw	r24, r20
 a6e:	a0 01       	movw	r20, r0
 a70:	11 24       	eor	r1, r1
 a72:	ff 27       	eor	r31, r31
 a74:	59 1b       	sub	r21, r25
 a76:	99 f0       	breq	.+38     	; 0xa9e <__addsf3x+0x60>
 a78:	59 3f       	cpi	r21, 0xF9	; 249
 a7a:	50 f4       	brcc	.+20     	; 0xa90 <__addsf3x+0x52>
 a7c:	50 3e       	cpi	r21, 0xE0	; 224
 a7e:	68 f1       	brcs	.+90     	; 0xada <__addsf3x+0x9c>
 a80:	1a 16       	cp	r1, r26
 a82:	f0 40       	sbci	r31, 0x00	; 0
 a84:	a2 2f       	mov	r26, r18
 a86:	23 2f       	mov	r18, r19
 a88:	34 2f       	mov	r19, r20
 a8a:	44 27       	eor	r20, r20
 a8c:	58 5f       	subi	r21, 0xF8	; 248
 a8e:	f3 cf       	rjmp	.-26     	; 0xa76 <__addsf3x+0x38>
 a90:	46 95       	lsr	r20
 a92:	37 95       	ror	r19
 a94:	27 95       	ror	r18
 a96:	a7 95       	ror	r26
 a98:	f0 40       	sbci	r31, 0x00	; 0
 a9a:	53 95       	inc	r21
 a9c:	c9 f7       	brne	.-14     	; 0xa90 <__addsf3x+0x52>
 a9e:	7e f4       	brtc	.+30     	; 0xabe <__addsf3x+0x80>
 aa0:	1f 16       	cp	r1, r31
 aa2:	ba 0b       	sbc	r27, r26
 aa4:	62 0b       	sbc	r22, r18
 aa6:	73 0b       	sbc	r23, r19
 aa8:	84 0b       	sbc	r24, r20
 aaa:	ba f0       	brmi	.+46     	; 0xada <__addsf3x+0x9c>
 aac:	91 50       	subi	r25, 0x01	; 1
 aae:	a1 f0       	breq	.+40     	; 0xad8 <__addsf3x+0x9a>
 ab0:	ff 0f       	add	r31, r31
 ab2:	bb 1f       	adc	r27, r27
 ab4:	66 1f       	adc	r22, r22
 ab6:	77 1f       	adc	r23, r23
 ab8:	88 1f       	adc	r24, r24
 aba:	c2 f7       	brpl	.-16     	; 0xaac <__addsf3x+0x6e>
 abc:	0e c0       	rjmp	.+28     	; 0xada <__addsf3x+0x9c>
 abe:	ba 0f       	add	r27, r26
 ac0:	62 1f       	adc	r22, r18
 ac2:	73 1f       	adc	r23, r19
 ac4:	84 1f       	adc	r24, r20
 ac6:	48 f4       	brcc	.+18     	; 0xada <__addsf3x+0x9c>
 ac8:	87 95       	ror	r24
 aca:	77 95       	ror	r23
 acc:	67 95       	ror	r22
 ace:	b7 95       	ror	r27
 ad0:	f7 95       	ror	r31
 ad2:	9e 3f       	cpi	r25, 0xFE	; 254
 ad4:	08 f0       	brcs	.+2      	; 0xad8 <__addsf3x+0x9a>
 ad6:	b0 cf       	rjmp	.-160    	; 0xa38 <__addsf3+0x28>
 ad8:	93 95       	inc	r25
 ada:	88 0f       	add	r24, r24
 adc:	08 f0       	brcs	.+2      	; 0xae0 <__addsf3x+0xa2>
 ade:	99 27       	eor	r25, r25
 ae0:	ee 0f       	add	r30, r30
 ae2:	97 95       	ror	r25
 ae4:	87 95       	ror	r24
 ae6:	08 95       	ret

00000ae8 <__divsf3>:
 ae8:	0e 94 88 05 	call	0xb10	; 0xb10 <__divsf3x>
 aec:	0c 94 70 06 	jmp	0xce0	; 0xce0 <__fp_round>
 af0:	0e 94 69 06 	call	0xcd2	; 0xcd2 <__fp_pscB>
 af4:	58 f0       	brcs	.+22     	; 0xb0c <__divsf3+0x24>
 af6:	0e 94 62 06 	call	0xcc4	; 0xcc4 <__fp_pscA>
 afa:	40 f0       	brcs	.+16     	; 0xb0c <__divsf3+0x24>
 afc:	29 f4       	brne	.+10     	; 0xb08 <__divsf3+0x20>
 afe:	5f 3f       	cpi	r21, 0xFF	; 255
 b00:	29 f0       	breq	.+10     	; 0xb0c <__divsf3+0x24>
 b02:	0c 94 59 06 	jmp	0xcb2	; 0xcb2 <__fp_inf>
 b06:	51 11       	cpse	r21, r1
 b08:	0c 94 a4 06 	jmp	0xd48	; 0xd48 <__fp_szero>
 b0c:	0c 94 5f 06 	jmp	0xcbe	; 0xcbe <__fp_nan>

00000b10 <__divsf3x>:
 b10:	0e 94 81 06 	call	0xd02	; 0xd02 <__fp_split3>
 b14:	68 f3       	brcs	.-38     	; 0xaf0 <__divsf3+0x8>

00000b16 <__divsf3_pse>:
 b16:	99 23       	and	r25, r25
 b18:	b1 f3       	breq	.-20     	; 0xb06 <__divsf3+0x1e>
 b1a:	55 23       	and	r21, r21
 b1c:	91 f3       	breq	.-28     	; 0xb02 <__divsf3+0x1a>
 b1e:	95 1b       	sub	r25, r21
 b20:	55 0b       	sbc	r21, r21
 b22:	bb 27       	eor	r27, r27
 b24:	aa 27       	eor	r26, r26
 b26:	62 17       	cp	r22, r18
 b28:	73 07       	cpc	r23, r19
 b2a:	84 07       	cpc	r24, r20
 b2c:	38 f0       	brcs	.+14     	; 0xb3c <__divsf3_pse+0x26>
 b2e:	9f 5f       	subi	r25, 0xFF	; 255
 b30:	5f 4f       	sbci	r21, 0xFF	; 255
 b32:	22 0f       	add	r18, r18
 b34:	33 1f       	adc	r19, r19
 b36:	44 1f       	adc	r20, r20
 b38:	aa 1f       	adc	r26, r26
 b3a:	a9 f3       	breq	.-22     	; 0xb26 <__divsf3_pse+0x10>
 b3c:	35 d0       	rcall	.+106    	; 0xba8 <__divsf3_pse+0x92>
 b3e:	0e 2e       	mov	r0, r30
 b40:	3a f0       	brmi	.+14     	; 0xb50 <__divsf3_pse+0x3a>
 b42:	e0 e8       	ldi	r30, 0x80	; 128
 b44:	32 d0       	rcall	.+100    	; 0xbaa <__divsf3_pse+0x94>
 b46:	91 50       	subi	r25, 0x01	; 1
 b48:	50 40       	sbci	r21, 0x00	; 0
 b4a:	e6 95       	lsr	r30
 b4c:	00 1c       	adc	r0, r0
 b4e:	ca f7       	brpl	.-14     	; 0xb42 <__divsf3_pse+0x2c>
 b50:	2b d0       	rcall	.+86     	; 0xba8 <__divsf3_pse+0x92>
 b52:	fe 2f       	mov	r31, r30
 b54:	29 d0       	rcall	.+82     	; 0xba8 <__divsf3_pse+0x92>
 b56:	66 0f       	add	r22, r22
 b58:	77 1f       	adc	r23, r23
 b5a:	88 1f       	adc	r24, r24
 b5c:	bb 1f       	adc	r27, r27
 b5e:	26 17       	cp	r18, r22
 b60:	37 07       	cpc	r19, r23
 b62:	48 07       	cpc	r20, r24
 b64:	ab 07       	cpc	r26, r27
 b66:	b0 e8       	ldi	r27, 0x80	; 128
 b68:	09 f0       	breq	.+2      	; 0xb6c <__divsf3_pse+0x56>
 b6a:	bb 0b       	sbc	r27, r27
 b6c:	80 2d       	mov	r24, r0
 b6e:	bf 01       	movw	r22, r30
 b70:	ff 27       	eor	r31, r31
 b72:	93 58       	subi	r25, 0x83	; 131
 b74:	5f 4f       	sbci	r21, 0xFF	; 255
 b76:	3a f0       	brmi	.+14     	; 0xb86 <__divsf3_pse+0x70>
 b78:	9e 3f       	cpi	r25, 0xFE	; 254
 b7a:	51 05       	cpc	r21, r1
 b7c:	78 f0       	brcs	.+30     	; 0xb9c <__divsf3_pse+0x86>
 b7e:	0c 94 59 06 	jmp	0xcb2	; 0xcb2 <__fp_inf>
 b82:	0c 94 a4 06 	jmp	0xd48	; 0xd48 <__fp_szero>
 b86:	5f 3f       	cpi	r21, 0xFF	; 255
 b88:	e4 f3       	brlt	.-8      	; 0xb82 <__divsf3_pse+0x6c>
 b8a:	98 3e       	cpi	r25, 0xE8	; 232
 b8c:	d4 f3       	brlt	.-12     	; 0xb82 <__divsf3_pse+0x6c>
 b8e:	86 95       	lsr	r24
 b90:	77 95       	ror	r23
 b92:	67 95       	ror	r22
 b94:	b7 95       	ror	r27
 b96:	f7 95       	ror	r31
 b98:	9f 5f       	subi	r25, 0xFF	; 255
 b9a:	c9 f7       	brne	.-14     	; 0xb8e <__divsf3_pse+0x78>
 b9c:	88 0f       	add	r24, r24
 b9e:	91 1d       	adc	r25, r1
 ba0:	96 95       	lsr	r25
 ba2:	87 95       	ror	r24
 ba4:	97 f9       	bld	r25, 7
 ba6:	08 95       	ret
 ba8:	e1 e0       	ldi	r30, 0x01	; 1
 baa:	66 0f       	add	r22, r22
 bac:	77 1f       	adc	r23, r23
 bae:	88 1f       	adc	r24, r24
 bb0:	bb 1f       	adc	r27, r27
 bb2:	62 17       	cp	r22, r18
 bb4:	73 07       	cpc	r23, r19
 bb6:	84 07       	cpc	r24, r20
 bb8:	ba 07       	cpc	r27, r26
 bba:	20 f0       	brcs	.+8      	; 0xbc4 <__divsf3_pse+0xae>
 bbc:	62 1b       	sub	r22, r18
 bbe:	73 0b       	sbc	r23, r19
 bc0:	84 0b       	sbc	r24, r20
 bc2:	ba 0b       	sbc	r27, r26
 bc4:	ee 1f       	adc	r30, r30
 bc6:	88 f7       	brcc	.-30     	; 0xbaa <__divsf3_pse+0x94>
 bc8:	e0 95       	com	r30
 bca:	08 95       	ret

00000bcc <__fixsfsi>:
 bcc:	0e 94 ed 05 	call	0xbda	; 0xbda <__fixunssfsi>
 bd0:	68 94       	set
 bd2:	b1 11       	cpse	r27, r1
 bd4:	0c 94 a4 06 	jmp	0xd48	; 0xd48 <__fp_szero>
 bd8:	08 95       	ret

00000bda <__fixunssfsi>:
 bda:	0e 94 89 06 	call	0xd12	; 0xd12 <__fp_splitA>
 bde:	88 f0       	brcs	.+34     	; 0xc02 <__fixunssfsi+0x28>
 be0:	9f 57       	subi	r25, 0x7F	; 127
 be2:	98 f0       	brcs	.+38     	; 0xc0a <__fixunssfsi+0x30>
 be4:	b9 2f       	mov	r27, r25
 be6:	99 27       	eor	r25, r25
 be8:	b7 51       	subi	r27, 0x17	; 23
 bea:	b0 f0       	brcs	.+44     	; 0xc18 <__fixunssfsi+0x3e>
 bec:	e1 f0       	breq	.+56     	; 0xc26 <__fixunssfsi+0x4c>
 bee:	66 0f       	add	r22, r22
 bf0:	77 1f       	adc	r23, r23
 bf2:	88 1f       	adc	r24, r24
 bf4:	99 1f       	adc	r25, r25
 bf6:	1a f0       	brmi	.+6      	; 0xbfe <__fixunssfsi+0x24>
 bf8:	ba 95       	dec	r27
 bfa:	c9 f7       	brne	.-14     	; 0xbee <__fixunssfsi+0x14>
 bfc:	14 c0       	rjmp	.+40     	; 0xc26 <__fixunssfsi+0x4c>
 bfe:	b1 30       	cpi	r27, 0x01	; 1
 c00:	91 f0       	breq	.+36     	; 0xc26 <__fixunssfsi+0x4c>
 c02:	0e 94 a3 06 	call	0xd46	; 0xd46 <__fp_zero>
 c06:	b1 e0       	ldi	r27, 0x01	; 1
 c08:	08 95       	ret
 c0a:	0c 94 a3 06 	jmp	0xd46	; 0xd46 <__fp_zero>
 c0e:	67 2f       	mov	r22, r23
 c10:	78 2f       	mov	r23, r24
 c12:	88 27       	eor	r24, r24
 c14:	b8 5f       	subi	r27, 0xF8	; 248
 c16:	39 f0       	breq	.+14     	; 0xc26 <__fixunssfsi+0x4c>
 c18:	b9 3f       	cpi	r27, 0xF9	; 249
 c1a:	cc f3       	brlt	.-14     	; 0xc0e <__fixunssfsi+0x34>
 c1c:	86 95       	lsr	r24
 c1e:	77 95       	ror	r23
 c20:	67 95       	ror	r22
 c22:	b3 95       	inc	r27
 c24:	d9 f7       	brne	.-10     	; 0xc1c <__fixunssfsi+0x42>
 c26:	3e f4       	brtc	.+14     	; 0xc36 <__fixunssfsi+0x5c>
 c28:	90 95       	com	r25
 c2a:	80 95       	com	r24
 c2c:	70 95       	com	r23
 c2e:	61 95       	neg	r22
 c30:	7f 4f       	sbci	r23, 0xFF	; 255
 c32:	8f 4f       	sbci	r24, 0xFF	; 255
 c34:	9f 4f       	sbci	r25, 0xFF	; 255
 c36:	08 95       	ret

00000c38 <__floatunsisf>:
 c38:	e8 94       	clt
 c3a:	09 c0       	rjmp	.+18     	; 0xc4e <__floatsisf+0x12>

00000c3c <__floatsisf>:
 c3c:	97 fb       	bst	r25, 7
 c3e:	3e f4       	brtc	.+14     	; 0xc4e <__floatsisf+0x12>
 c40:	90 95       	com	r25
 c42:	80 95       	com	r24
 c44:	70 95       	com	r23
 c46:	61 95       	neg	r22
 c48:	7f 4f       	sbci	r23, 0xFF	; 255
 c4a:	8f 4f       	sbci	r24, 0xFF	; 255
 c4c:	9f 4f       	sbci	r25, 0xFF	; 255
 c4e:	99 23       	and	r25, r25
 c50:	a9 f0       	breq	.+42     	; 0xc7c <__floatsisf+0x40>
 c52:	f9 2f       	mov	r31, r25
 c54:	96 e9       	ldi	r25, 0x96	; 150
 c56:	bb 27       	eor	r27, r27
 c58:	93 95       	inc	r25
 c5a:	f6 95       	lsr	r31
 c5c:	87 95       	ror	r24
 c5e:	77 95       	ror	r23
 c60:	67 95       	ror	r22
 c62:	b7 95       	ror	r27
 c64:	f1 11       	cpse	r31, r1
 c66:	f8 cf       	rjmp	.-16     	; 0xc58 <__floatsisf+0x1c>
 c68:	fa f4       	brpl	.+62     	; 0xca8 <__floatsisf+0x6c>
 c6a:	bb 0f       	add	r27, r27
 c6c:	11 f4       	brne	.+4      	; 0xc72 <__floatsisf+0x36>
 c6e:	60 ff       	sbrs	r22, 0
 c70:	1b c0       	rjmp	.+54     	; 0xca8 <__floatsisf+0x6c>
 c72:	6f 5f       	subi	r22, 0xFF	; 255
 c74:	7f 4f       	sbci	r23, 0xFF	; 255
 c76:	8f 4f       	sbci	r24, 0xFF	; 255
 c78:	9f 4f       	sbci	r25, 0xFF	; 255
 c7a:	16 c0       	rjmp	.+44     	; 0xca8 <__floatsisf+0x6c>
 c7c:	88 23       	and	r24, r24
 c7e:	11 f0       	breq	.+4      	; 0xc84 <__floatsisf+0x48>
 c80:	96 e9       	ldi	r25, 0x96	; 150
 c82:	11 c0       	rjmp	.+34     	; 0xca6 <__floatsisf+0x6a>
 c84:	77 23       	and	r23, r23
 c86:	21 f0       	breq	.+8      	; 0xc90 <__floatsisf+0x54>
 c88:	9e e8       	ldi	r25, 0x8E	; 142
 c8a:	87 2f       	mov	r24, r23
 c8c:	76 2f       	mov	r23, r22
 c8e:	05 c0       	rjmp	.+10     	; 0xc9a <__floatsisf+0x5e>
 c90:	66 23       	and	r22, r22
 c92:	71 f0       	breq	.+28     	; 0xcb0 <__floatsisf+0x74>
 c94:	96 e8       	ldi	r25, 0x86	; 134
 c96:	86 2f       	mov	r24, r22
 c98:	70 e0       	ldi	r23, 0x00	; 0
 c9a:	60 e0       	ldi	r22, 0x00	; 0
 c9c:	2a f0       	brmi	.+10     	; 0xca8 <__floatsisf+0x6c>
 c9e:	9a 95       	dec	r25
 ca0:	66 0f       	add	r22, r22
 ca2:	77 1f       	adc	r23, r23
 ca4:	88 1f       	adc	r24, r24
 ca6:	da f7       	brpl	.-10     	; 0xc9e <__floatsisf+0x62>
 ca8:	88 0f       	add	r24, r24
 caa:	96 95       	lsr	r25
 cac:	87 95       	ror	r24
 cae:	97 f9       	bld	r25, 7
 cb0:	08 95       	ret

00000cb2 <__fp_inf>:
 cb2:	97 f9       	bld	r25, 7
 cb4:	9f 67       	ori	r25, 0x7F	; 127
 cb6:	80 e8       	ldi	r24, 0x80	; 128
 cb8:	70 e0       	ldi	r23, 0x00	; 0
 cba:	60 e0       	ldi	r22, 0x00	; 0
 cbc:	08 95       	ret

00000cbe <__fp_nan>:
 cbe:	9f ef       	ldi	r25, 0xFF	; 255
 cc0:	80 ec       	ldi	r24, 0xC0	; 192
 cc2:	08 95       	ret

00000cc4 <__fp_pscA>:
 cc4:	00 24       	eor	r0, r0
 cc6:	0a 94       	dec	r0
 cc8:	16 16       	cp	r1, r22
 cca:	17 06       	cpc	r1, r23
 ccc:	18 06       	cpc	r1, r24
 cce:	09 06       	cpc	r0, r25
 cd0:	08 95       	ret

00000cd2 <__fp_pscB>:
 cd2:	00 24       	eor	r0, r0
 cd4:	0a 94       	dec	r0
 cd6:	12 16       	cp	r1, r18
 cd8:	13 06       	cpc	r1, r19
 cda:	14 06       	cpc	r1, r20
 cdc:	05 06       	cpc	r0, r21
 cde:	08 95       	ret

00000ce0 <__fp_round>:
 ce0:	09 2e       	mov	r0, r25
 ce2:	03 94       	inc	r0
 ce4:	00 0c       	add	r0, r0
 ce6:	11 f4       	brne	.+4      	; 0xcec <__fp_round+0xc>
 ce8:	88 23       	and	r24, r24
 cea:	52 f0       	brmi	.+20     	; 0xd00 <__fp_round+0x20>
 cec:	bb 0f       	add	r27, r27
 cee:	40 f4       	brcc	.+16     	; 0xd00 <__fp_round+0x20>
 cf0:	bf 2b       	or	r27, r31
 cf2:	11 f4       	brne	.+4      	; 0xcf8 <__fp_round+0x18>
 cf4:	60 ff       	sbrs	r22, 0
 cf6:	04 c0       	rjmp	.+8      	; 0xd00 <__fp_round+0x20>
 cf8:	6f 5f       	subi	r22, 0xFF	; 255
 cfa:	7f 4f       	sbci	r23, 0xFF	; 255
 cfc:	8f 4f       	sbci	r24, 0xFF	; 255
 cfe:	9f 4f       	sbci	r25, 0xFF	; 255
 d00:	08 95       	ret

00000d02 <__fp_split3>:
 d02:	57 fd       	sbrc	r21, 7
 d04:	90 58       	subi	r25, 0x80	; 128
 d06:	44 0f       	add	r20, r20
 d08:	55 1f       	adc	r21, r21
 d0a:	59 f0       	breq	.+22     	; 0xd22 <__fp_splitA+0x10>
 d0c:	5f 3f       	cpi	r21, 0xFF	; 255
 d0e:	71 f0       	breq	.+28     	; 0xd2c <__fp_splitA+0x1a>
 d10:	47 95       	ror	r20

00000d12 <__fp_splitA>:
 d12:	88 0f       	add	r24, r24
 d14:	97 fb       	bst	r25, 7
 d16:	99 1f       	adc	r25, r25
 d18:	61 f0       	breq	.+24     	; 0xd32 <__fp_splitA+0x20>
 d1a:	9f 3f       	cpi	r25, 0xFF	; 255
 d1c:	79 f0       	breq	.+30     	; 0xd3c <__fp_splitA+0x2a>
 d1e:	87 95       	ror	r24
 d20:	08 95       	ret
 d22:	12 16       	cp	r1, r18
 d24:	13 06       	cpc	r1, r19
 d26:	14 06       	cpc	r1, r20
 d28:	55 1f       	adc	r21, r21
 d2a:	f2 cf       	rjmp	.-28     	; 0xd10 <__fp_split3+0xe>
 d2c:	46 95       	lsr	r20
 d2e:	f1 df       	rcall	.-30     	; 0xd12 <__fp_splitA>
 d30:	08 c0       	rjmp	.+16     	; 0xd42 <__fp_splitA+0x30>
 d32:	16 16       	cp	r1, r22
 d34:	17 06       	cpc	r1, r23
 d36:	18 06       	cpc	r1, r24
 d38:	99 1f       	adc	r25, r25
 d3a:	f1 cf       	rjmp	.-30     	; 0xd1e <__fp_splitA+0xc>
 d3c:	86 95       	lsr	r24
 d3e:	71 05       	cpc	r23, r1
 d40:	61 05       	cpc	r22, r1
 d42:	08 94       	sec
 d44:	08 95       	ret

00000d46 <__fp_zero>:
 d46:	e8 94       	clt

00000d48 <__fp_szero>:
 d48:	bb 27       	eor	r27, r27
 d4a:	66 27       	eor	r22, r22
 d4c:	77 27       	eor	r23, r23
 d4e:	cb 01       	movw	r24, r22
 d50:	97 f9       	bld	r25, 7
 d52:	08 95       	ret

00000d54 <__mulsf3>:
 d54:	0e 94 bd 06 	call	0xd7a	; 0xd7a <__mulsf3x>
 d58:	0c 94 70 06 	jmp	0xce0	; 0xce0 <__fp_round>
 d5c:	0e 94 62 06 	call	0xcc4	; 0xcc4 <__fp_pscA>
 d60:	38 f0       	brcs	.+14     	; 0xd70 <__mulsf3+0x1c>
 d62:	0e 94 69 06 	call	0xcd2	; 0xcd2 <__fp_pscB>
 d66:	20 f0       	brcs	.+8      	; 0xd70 <__mulsf3+0x1c>
 d68:	95 23       	and	r25, r21
 d6a:	11 f0       	breq	.+4      	; 0xd70 <__mulsf3+0x1c>
 d6c:	0c 94 59 06 	jmp	0xcb2	; 0xcb2 <__fp_inf>
 d70:	0c 94 5f 06 	jmp	0xcbe	; 0xcbe <__fp_nan>
 d74:	11 24       	eor	r1, r1
 d76:	0c 94 a4 06 	jmp	0xd48	; 0xd48 <__fp_szero>

00000d7a <__mulsf3x>:
 d7a:	0e 94 81 06 	call	0xd02	; 0xd02 <__fp_split3>
 d7e:	70 f3       	brcs	.-36     	; 0xd5c <__mulsf3+0x8>

00000d80 <__mulsf3_pse>:
 d80:	95 9f       	mul	r25, r21
 d82:	c1 f3       	breq	.-16     	; 0xd74 <__mulsf3+0x20>
 d84:	95 0f       	add	r25, r21
 d86:	50 e0       	ldi	r21, 0x00	; 0
 d88:	55 1f       	adc	r21, r21
 d8a:	62 9f       	mul	r22, r18
 d8c:	f0 01       	movw	r30, r0
 d8e:	72 9f       	mul	r23, r18
 d90:	bb 27       	eor	r27, r27
 d92:	f0 0d       	add	r31, r0
 d94:	b1 1d       	adc	r27, r1
 d96:	63 9f       	mul	r22, r19
 d98:	aa 27       	eor	r26, r26
 d9a:	f0 0d       	add	r31, r0
 d9c:	b1 1d       	adc	r27, r1
 d9e:	aa 1f       	adc	r26, r26
 da0:	64 9f       	mul	r22, r20
 da2:	66 27       	eor	r22, r22
 da4:	b0 0d       	add	r27, r0
 da6:	a1 1d       	adc	r26, r1
 da8:	66 1f       	adc	r22, r22
 daa:	82 9f       	mul	r24, r18
 dac:	22 27       	eor	r18, r18
 dae:	b0 0d       	add	r27, r0
 db0:	a1 1d       	adc	r26, r1
 db2:	62 1f       	adc	r22, r18
 db4:	73 9f       	mul	r23, r19
 db6:	b0 0d       	add	r27, r0
 db8:	a1 1d       	adc	r26, r1
 dba:	62 1f       	adc	r22, r18
 dbc:	83 9f       	mul	r24, r19
 dbe:	a0 0d       	add	r26, r0
 dc0:	61 1d       	adc	r22, r1
 dc2:	22 1f       	adc	r18, r18
 dc4:	74 9f       	mul	r23, r20
 dc6:	33 27       	eor	r19, r19
 dc8:	a0 0d       	add	r26, r0
 dca:	61 1d       	adc	r22, r1
 dcc:	23 1f       	adc	r18, r19
 dce:	84 9f       	mul	r24, r20
 dd0:	60 0d       	add	r22, r0
 dd2:	21 1d       	adc	r18, r1
 dd4:	82 2f       	mov	r24, r18
 dd6:	76 2f       	mov	r23, r22
 dd8:	6a 2f       	mov	r22, r26
 dda:	11 24       	eor	r1, r1
 ddc:	9f 57       	subi	r25, 0x7F	; 127
 dde:	50 40       	sbci	r21, 0x00	; 0
 de0:	9a f0       	brmi	.+38     	; 0xe08 <__mulsf3_pse+0x88>
 de2:	f1 f0       	breq	.+60     	; 0xe20 <__mulsf3_pse+0xa0>
 de4:	88 23       	and	r24, r24
 de6:	4a f0       	brmi	.+18     	; 0xdfa <__mulsf3_pse+0x7a>
 de8:	ee 0f       	add	r30, r30
 dea:	ff 1f       	adc	r31, r31
 dec:	bb 1f       	adc	r27, r27
 dee:	66 1f       	adc	r22, r22
 df0:	77 1f       	adc	r23, r23
 df2:	88 1f       	adc	r24, r24
 df4:	91 50       	subi	r25, 0x01	; 1
 df6:	50 40       	sbci	r21, 0x00	; 0
 df8:	a9 f7       	brne	.-22     	; 0xde4 <__mulsf3_pse+0x64>
 dfa:	9e 3f       	cpi	r25, 0xFE	; 254
 dfc:	51 05       	cpc	r21, r1
 dfe:	80 f0       	brcs	.+32     	; 0xe20 <__mulsf3_pse+0xa0>
 e00:	0c 94 59 06 	jmp	0xcb2	; 0xcb2 <__fp_inf>
 e04:	0c 94 a4 06 	jmp	0xd48	; 0xd48 <__fp_szero>
 e08:	5f 3f       	cpi	r21, 0xFF	; 255
 e0a:	e4 f3       	brlt	.-8      	; 0xe04 <__mulsf3_pse+0x84>
 e0c:	98 3e       	cpi	r25, 0xE8	; 232
 e0e:	d4 f3       	brlt	.-12     	; 0xe04 <__mulsf3_pse+0x84>
 e10:	86 95       	lsr	r24
 e12:	77 95       	ror	r23
 e14:	67 95       	ror	r22
 e16:	b7 95       	ror	r27
 e18:	f7 95       	ror	r31
 e1a:	e7 95       	ror	r30
 e1c:	9f 5f       	subi	r25, 0xFF	; 255
 e1e:	c1 f7       	brne	.-16     	; 0xe10 <__mulsf3_pse+0x90>
 e20:	fe 2b       	or	r31, r30
 e22:	88 0f       	add	r24, r24
 e24:	91 1d       	adc	r25, r1
 e26:	96 95       	lsr	r25
 e28:	87 95       	ror	r24
 e2a:	97 f9       	bld	r25, 7
 e2c:	08 95       	ret
 e2e:	19 f4       	brne	.+6      	; 0xe36 <__mulsf3_pse+0xb6>
 e30:	16 f4       	brtc	.+4      	; 0xe36 <__mulsf3_pse+0xb6>
 e32:	0c 94 5f 06 	jmp	0xcbe	; 0xcbe <__fp_nan>
 e36:	0c 94 5d 07 	jmp	0xeba	; 0xeba <__fp_mpack>

00000e3a <sqrt>:
 e3a:	0e 94 89 06 	call	0xd12	; 0xd12 <__fp_splitA>
 e3e:	b8 f3       	brcs	.-18     	; 0xe2e <__mulsf3_pse+0xae>
 e40:	99 23       	and	r25, r25
 e42:	c9 f3       	breq	.-14     	; 0xe36 <__mulsf3_pse+0xb6>
 e44:	b6 f3       	brts	.-20     	; 0xe32 <__mulsf3_pse+0xb2>
 e46:	9f 57       	subi	r25, 0x7F	; 127
 e48:	55 0b       	sbc	r21, r21
 e4a:	87 ff       	sbrs	r24, 7
 e4c:	0e 94 6b 07 	call	0xed6	; 0xed6 <__fp_norm2>
 e50:	00 24       	eor	r0, r0
 e52:	a0 e6       	ldi	r26, 0x60	; 96
 e54:	40 ea       	ldi	r20, 0xA0	; 160
 e56:	90 01       	movw	r18, r0
 e58:	80 58       	subi	r24, 0x80	; 128
 e5a:	56 95       	lsr	r21
 e5c:	97 95       	ror	r25
 e5e:	28 f4       	brcc	.+10     	; 0xe6a <sqrt+0x30>
 e60:	80 5c       	subi	r24, 0xC0	; 192
 e62:	66 0f       	add	r22, r22
 e64:	77 1f       	adc	r23, r23
 e66:	88 1f       	adc	r24, r24
 e68:	20 f0       	brcs	.+8      	; 0xe72 <sqrt+0x38>
 e6a:	26 17       	cp	r18, r22
 e6c:	37 07       	cpc	r19, r23
 e6e:	48 07       	cpc	r20, r24
 e70:	30 f4       	brcc	.+12     	; 0xe7e <sqrt+0x44>
 e72:	62 1b       	sub	r22, r18
 e74:	73 0b       	sbc	r23, r19
 e76:	84 0b       	sbc	r24, r20
 e78:	20 29       	or	r18, r0
 e7a:	31 29       	or	r19, r1
 e7c:	4a 2b       	or	r20, r26
 e7e:	a6 95       	lsr	r26
 e80:	17 94       	ror	r1
 e82:	07 94       	ror	r0
 e84:	20 25       	eor	r18, r0
 e86:	31 25       	eor	r19, r1
 e88:	4a 27       	eor	r20, r26
 e8a:	58 f7       	brcc	.-42     	; 0xe62 <sqrt+0x28>
 e8c:	66 0f       	add	r22, r22
 e8e:	77 1f       	adc	r23, r23
 e90:	88 1f       	adc	r24, r24
 e92:	20 f0       	brcs	.+8      	; 0xe9c <sqrt+0x62>
 e94:	26 17       	cp	r18, r22
 e96:	37 07       	cpc	r19, r23
 e98:	48 07       	cpc	r20, r24
 e9a:	30 f4       	brcc	.+12     	; 0xea8 <sqrt+0x6e>
 e9c:	62 0b       	sbc	r22, r18
 e9e:	73 0b       	sbc	r23, r19
 ea0:	84 0b       	sbc	r24, r20
 ea2:	20 0d       	add	r18, r0
 ea4:	31 1d       	adc	r19, r1
 ea6:	41 1d       	adc	r20, r1
 ea8:	a0 95       	com	r26
 eaa:	81 f7       	brne	.-32     	; 0xe8c <sqrt+0x52>
 eac:	b9 01       	movw	r22, r18
 eae:	84 2f       	mov	r24, r20
 eb0:	91 58       	subi	r25, 0x81	; 129
 eb2:	88 0f       	add	r24, r24
 eb4:	96 95       	lsr	r25
 eb6:	87 95       	ror	r24
 eb8:	08 95       	ret

00000eba <__fp_mpack>:
 eba:	9f 3f       	cpi	r25, 0xFF	; 255
 ebc:	31 f0       	breq	.+12     	; 0xeca <__fp_mpack_finite+0xc>

00000ebe <__fp_mpack_finite>:
 ebe:	91 50       	subi	r25, 0x01	; 1
 ec0:	20 f4       	brcc	.+8      	; 0xeca <__fp_mpack_finite+0xc>
 ec2:	87 95       	ror	r24
 ec4:	77 95       	ror	r23
 ec6:	67 95       	ror	r22
 ec8:	b7 95       	ror	r27
 eca:	88 0f       	add	r24, r24
 ecc:	91 1d       	adc	r25, r1
 ece:	96 95       	lsr	r25
 ed0:	87 95       	ror	r24
 ed2:	97 f9       	bld	r25, 7
 ed4:	08 95       	ret

00000ed6 <__fp_norm2>:
 ed6:	91 50       	subi	r25, 0x01	; 1
 ed8:	50 40       	sbci	r21, 0x00	; 0
 eda:	66 0f       	add	r22, r22
 edc:	77 1f       	adc	r23, r23
 ede:	88 1f       	adc	r24, r24
 ee0:	d2 f7       	brpl	.-12     	; 0xed6 <__fp_norm2>
 ee2:	08 95       	ret

00000ee4 <__divmodhi4>:
 ee4:	97 fb       	bst	r25, 7
 ee6:	07 2e       	mov	r0, r23
 ee8:	16 f4       	brtc	.+4      	; 0xeee <__divmodhi4+0xa>
 eea:	00 94       	com	r0
 eec:	07 d0       	rcall	.+14     	; 0xefc <__divmodhi4_neg1>
 eee:	77 fd       	sbrc	r23, 7
 ef0:	09 d0       	rcall	.+18     	; 0xf04 <__divmodhi4_neg2>
 ef2:	0e 94 86 07 	call	0xf0c	; 0xf0c <__udivmodhi4>
 ef6:	07 fc       	sbrc	r0, 7
 ef8:	05 d0       	rcall	.+10     	; 0xf04 <__divmodhi4_neg2>
 efa:	3e f4       	brtc	.+14     	; 0xf0a <__divmodhi4_exit>

00000efc <__divmodhi4_neg1>:
 efc:	90 95       	com	r25
 efe:	81 95       	neg	r24
 f00:	9f 4f       	sbci	r25, 0xFF	; 255
 f02:	08 95       	ret

00000f04 <__divmodhi4_neg2>:
 f04:	70 95       	com	r23
 f06:	61 95       	neg	r22
 f08:	7f 4f       	sbci	r23, 0xFF	; 255

00000f0a <__divmodhi4_exit>:
 f0a:	08 95       	ret

00000f0c <__udivmodhi4>:
 f0c:	aa 1b       	sub	r26, r26
 f0e:	bb 1b       	sub	r27, r27
 f10:	51 e1       	ldi	r21, 0x11	; 17
 f12:	07 c0       	rjmp	.+14     	; 0xf22 <__udivmodhi4_ep>

00000f14 <__udivmodhi4_loop>:
 f14:	aa 1f       	adc	r26, r26
 f16:	bb 1f       	adc	r27, r27
 f18:	a6 17       	cp	r26, r22
 f1a:	b7 07       	cpc	r27, r23
 f1c:	10 f0       	brcs	.+4      	; 0xf22 <__udivmodhi4_ep>
 f1e:	a6 1b       	sub	r26, r22
 f20:	b7 0b       	sbc	r27, r23

00000f22 <__udivmodhi4_ep>:
 f22:	88 1f       	adc	r24, r24
 f24:	99 1f       	adc	r25, r25
 f26:	5a 95       	dec	r21
 f28:	a9 f7       	brne	.-22     	; 0xf14 <__udivmodhi4_loop>
 f2a:	80 95       	com	r24
 f2c:	90 95       	com	r25
 f2e:	bc 01       	movw	r22, r24
 f30:	cd 01       	movw	r24, r26
 f32:	08 95       	ret

00000f34 <__itoa_ncheck>:
 f34:	bb 27       	eor	r27, r27
 f36:	4a 30       	cpi	r20, 0x0A	; 10
 f38:	31 f4       	brne	.+12     	; 0xf46 <__itoa_ncheck+0x12>
 f3a:	99 23       	and	r25, r25
 f3c:	22 f4       	brpl	.+8      	; 0xf46 <__itoa_ncheck+0x12>
 f3e:	bd e2       	ldi	r27, 0x2D	; 45
 f40:	90 95       	com	r25
 f42:	81 95       	neg	r24
 f44:	9f 4f       	sbci	r25, 0xFF	; 255
 f46:	0c 94 a6 07 	jmp	0xf4c	; 0xf4c <__utoa_common>

00000f4a <__utoa_ncheck>:
 f4a:	bb 27       	eor	r27, r27

00000f4c <__utoa_common>:
 f4c:	fb 01       	movw	r30, r22
 f4e:	55 27       	eor	r21, r21
 f50:	aa 27       	eor	r26, r26
 f52:	88 0f       	add	r24, r24
 f54:	99 1f       	adc	r25, r25
 f56:	aa 1f       	adc	r26, r26
 f58:	a4 17       	cp	r26, r20
 f5a:	10 f0       	brcs	.+4      	; 0xf60 <__utoa_common+0x14>
 f5c:	a4 1b       	sub	r26, r20
 f5e:	83 95       	inc	r24
 f60:	50 51       	subi	r21, 0x10	; 16
 f62:	b9 f7       	brne	.-18     	; 0xf52 <__utoa_common+0x6>
 f64:	a0 5d       	subi	r26, 0xD0	; 208
 f66:	aa 33       	cpi	r26, 0x3A	; 58
 f68:	08 f0       	brcs	.+2      	; 0xf6c <__utoa_common+0x20>
 f6a:	a9 5d       	subi	r26, 0xD9	; 217
 f6c:	a1 93       	st	Z+, r26
 f6e:	00 97       	sbiw	r24, 0x00	; 0
 f70:	79 f7       	brne	.-34     	; 0xf50 <__utoa_common+0x4>
 f72:	b1 11       	cpse	r27, r1
 f74:	b1 93       	st	Z+, r27
 f76:	11 92       	st	Z+, r1
 f78:	cb 01       	movw	r24, r22
 f7a:	0c 94 bf 07 	jmp	0xf7e	; 0xf7e <strrev>

00000f7e <strrev>:
 f7e:	dc 01       	movw	r26, r24
 f80:	fc 01       	movw	r30, r24
 f82:	67 2f       	mov	r22, r23
 f84:	71 91       	ld	r23, Z+
 f86:	77 23       	and	r23, r23
 f88:	e1 f7       	brne	.-8      	; 0xf82 <strrev+0x4>
 f8a:	32 97       	sbiw	r30, 0x02	; 2
 f8c:	04 c0       	rjmp	.+8      	; 0xf96 <strrev+0x18>
 f8e:	7c 91       	ld	r23, X
 f90:	6d 93       	st	X+, r22
 f92:	70 83       	st	Z, r23
 f94:	62 91       	ld	r22, -Z
 f96:	ae 17       	cp	r26, r30
 f98:	bf 07       	cpc	r27, r31
 f9a:	c8 f3       	brcs	.-14     	; 0xf8e <strrev+0x10>
 f9c:	08 95       	ret

00000f9e <_exit>:
 f9e:	f8 94       	cli

00000fa0 <__stop_program>:
 fa0:	ff cf       	rjmp	.-2      	; 0xfa0 <__stop_program>
