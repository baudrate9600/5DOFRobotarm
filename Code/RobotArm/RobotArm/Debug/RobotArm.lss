
RobotArm.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000282  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000020e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000001c  00800100  00800100  00000282  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000282  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002b4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000078  00000000  00000000  000002f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000008fd  00000000  00000000  0000036c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000756  00000000  00000000  00000c69  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000040e  00000000  00000000  000013bf  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000100  00000000  00000000  000017d0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000551  00000000  00000000  000018d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000000fe  00000000  00000000  00001e21  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000058  00000000  00000000  00001f1f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__vector_11>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__vector_18>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ee e0       	ldi	r30, 0x0E	; 14
  7c:	f2 e0       	ldi	r31, 0x02	; 2
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a0 30       	cpi	r26, 0x00	; 0
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a0 e0       	ldi	r26, 0x00	; 0
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	ac 31       	cpi	r26, 0x1C	; 28
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 bc 00 	call	0x178	; 0x178 <main>
  9e:	0c 94 05 01 	jmp	0x20a	; 0x20a <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <__vector_18>:
	uint8_t motor_select; 
	int data[8];
	int done;
	};
Motor_status motor_status; 
ISR(USART_RX_vect){
  a6:	1f 92       	push	r1
  a8:	0f 92       	push	r0
  aa:	0f b6       	in	r0, 0x3f	; 63
  ac:	0f 92       	push	r0
  ae:	11 24       	eor	r1, r1
  b0:	2f 93       	push	r18
  b2:	3f 93       	push	r19
  b4:	8f 93       	push	r24
  b6:	9f 93       	push	r25
  b8:	ef 93       	push	r30
  ba:	ff 93       	push	r31
	motor_status.done = 0; 
  bc:	10 92 16 01 	sts	0x0116, r1	; 0x800116 <motor_status+0x12>
  c0:	10 92 15 01 	sts	0x0115, r1	; 0x800115 <motor_status+0x11>
	char c = UDR0;
  c4:	90 91 c6 00 	lds	r25, 0x00C6	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
	static int counter = 0; 
	static int sign;
	/*finite state machine for receiving data frame */
	switch(receive_state){
  c8:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <receive_state>
  cc:	81 30       	cpi	r24, 0x01	; 1
  ce:	81 f0       	breq	.+32     	; 0xf0 <__vector_18+0x4a>
  d0:	18 f0       	brcs	.+6      	; 0xd8 <__vector_18+0x32>
  d2:	82 30       	cpi	r24, 0x02	; 2
  d4:	c9 f0       	breq	.+50     	; 0x108 <__vector_18+0x62>
  d6:	35 c0       	rjmp	.+106    	; 0x142 <__vector_18+0x9c>
				case RECEIVE_WAIT : 
					if(c == 'M'){
  d8:	9d 34       	cpi	r25, 0x4D	; 77
  da:	21 f4       	brne	.+8      	; 0xe4 <__vector_18+0x3e>
						receive_state = RECEIVE_MOTOR_SELECT;
  dc:	81 e0       	ldi	r24, 0x01	; 1
  de:	80 93 17 01 	sts	0x0117, r24	; 0x800117 <receive_state>
  e2:	2f c0       	rjmp	.+94     	; 0x142 <__vector_18+0x9c>
					}else if(c== 'R'){
  e4:	92 35       	cpi	r25, 0x52	; 82
  e6:	69 f5       	brne	.+90     	; 0x142 <__vector_18+0x9c>
						receive_state = RECEIVE_RESET;
  e8:	83 e0       	ldi	r24, 0x03	; 3
  ea:	80 93 17 01 	sts	0x0117, r24	; 0x800117 <receive_state>
  ee:	29 c0       	rjmp	.+82     	; 0x142 <__vector_18+0x9c>
					}
					break;
				case RECEIVE_MOTOR_SELECT: 
					motor_status.motor_select = c-48; 
  f0:	80 ed       	ldi	r24, 0xD0	; 208
  f2:	89 0f       	add	r24, r25
  f4:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <motor_status>
					receive_state = RECEIVE_DATA;
  f8:	82 e0       	ldi	r24, 0x02	; 2
  fa:	80 93 17 01 	sts	0x0117, r24	; 0x800117 <receive_state>
					counter = 0;
  fe:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <__data_end+0x1>
 102:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__data_end>
					break; 
 106:	1d c0       	rjmp	.+58     	; 0x142 <__vector_18+0x9c>
				case RECEIVE_DATA:
					motor_status.data[counter] = c;
 108:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_end>
 10c:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_end+0x1>
 110:	f9 01       	movw	r30, r18
 112:	ee 0f       	add	r30, r30
 114:	ff 1f       	adc	r31, r31
 116:	ec 5f       	subi	r30, 0xFC	; 252
 118:	fe 4f       	sbci	r31, 0xFE	; 254
 11a:	89 2f       	mov	r24, r25
 11c:	90 e0       	ldi	r25, 0x00	; 0
 11e:	92 83       	std	Z+2, r25	; 0x02
 120:	81 83       	std	Z+1, r24	; 0x01
					counter++;
 122:	c9 01       	movw	r24, r18
 124:	01 96       	adiw	r24, 0x01	; 1
 126:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_end+0x1>
 12a:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_end>
					if(counter == 8){
 12e:	08 97       	sbiw	r24, 0x08	; 8
 130:	41 f4       	brne	.+16     	; 0x142 <__vector_18+0x9c>
						receive_state = RECEIVE_WAIT ; 
 132:	10 92 17 01 	sts	0x0117, r1	; 0x800117 <receive_state>
						motor_status.done = 1;
 136:	81 e0       	ldi	r24, 0x01	; 1
 138:	90 e0       	ldi	r25, 0x00	; 0
 13a:	90 93 16 01 	sts	0x0116, r25	; 0x800116 <motor_status+0x12>
 13e:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <motor_status+0x11>
					break; 
				case RECEIVE_RESET:
							
					break;
		}	
}
 142:	ff 91       	pop	r31
 144:	ef 91       	pop	r30
 146:	9f 91       	pop	r25
 148:	8f 91       	pop	r24
 14a:	3f 91       	pop	r19
 14c:	2f 91       	pop	r18
 14e:	0f 90       	pop	r0
 150:	0f be       	out	0x3f, r0	; 63
 152:	0f 90       	pop	r0
 154:	1f 90       	pop	r1
 156:	18 95       	reti

00000158 <_Z8spi_initv>:
	};
Direction_signal  direction_signal;

/*SPI enables as master with no prescaler */
void spi_init(){
	SHIFT_REGISTER |= SHIFT_MOSI | SHIFT_SCK | SHIFT_SS | SHIFT_REFRESH; //SHIFT_SS has to be high for the spi to work. 
 158:	84 b1       	in	r24, 0x04	; 4
 15a:	8d 62       	ori	r24, 0x2D	; 45
 15c:	84 b9       	out	0x04, r24	; 4
	SPCR |=  (1 << SPE) | (1 << MSTR); //Enable spi as master and enable SPI respectively.
 15e:	8c b5       	in	r24, 0x2c	; 44
 160:	80 65       	ori	r24, 0x50	; 80
 162:	8c bd       	out	0x2c, r24	; 44
 164:	08 95       	ret

00000166 <_Z18spi_send_directionv>:
}
/*This function sends the direction vector byte containing the direction signals for the L293D Motor driver */
void spi_send_direction(){
	SHIFT_PORT &= ~SHIFT_REFRESH;
 166:	28 98       	cbi	0x05, 0	; 5
	SPDR = direction_signal.direction;
 168:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <direction_signal>
 16c:	8e bd       	out	0x2e, r24	; 46
	while(!(SPSR & (1<<SPIF)));
 16e:	0d b4       	in	r0, 0x2d	; 45
 170:	07 fe       	sbrs	r0, 7
 172:	fd cf       	rjmp	.-6      	; 0x16e <_Z18spi_send_directionv+0x8>
	SHIFT_PORT |= SHIFT_REFRESH;
 174:	28 9a       	sbi	0x05, 0	; 5
 176:	08 95       	ret

00000178 <main>:
}
int main(void)
{
	/* Initialize SPI:	
	 *	the SPI is used to send the direction signals to the shift register */
	 spi_init();
 178:	0e 94 ac 00 	call	0x158	; 0x158 <_Z8spi_initv>
	/* Initialize motors: 
	/* End effector */
	TCCR1A |= (1 << COM1B1) | (1 << WGM11) | (1 << WGM10); //Enable 0C2B pin as pwm and 
 17c:	e0 e8       	ldi	r30, 0x80	; 128
 17e:	f0 e0       	ldi	r31, 0x00	; 0
 180:	80 81       	ld	r24, Z
 182:	83 62       	ori	r24, 0x23	; 35
 184:	80 83       	st	Z, r24
	TCCR1B |= (1 << CS12); //PWM frequency of 62,500 hz 
 186:	a1 e8       	ldi	r26, 0x81	; 129
 188:	b0 e0       	ldi	r27, 0x00	; 0
 18a:	8c 91       	ld	r24, X
 18c:	84 60       	ori	r24, 0x04	; 4
 18e:	8c 93       	st	X, r24
	/* Servo 0 */
	DDRD |= SERVO0;
 190:	52 9a       	sbi	0x0a, 2	; 10
	TCCR0A |= (1 << COM0B0) | (1 << WGM01) | (1 << WGM00); 
 192:	84 b5       	in	r24, 0x24	; 36
 194:	83 61       	ori	r24, 0x13	; 19
 196:	84 bd       	out	0x24, r24	; 36
	TCCR0B |= (1 << CS02); 
 198:	85 b5       	in	r24, 0x25	; 37
 19a:	84 60       	ori	r24, 0x04	; 4
 19c:	85 bd       	out	0x25, r24	; 37
	/* Servo 1 */ 
	TCCR0A |= (1 << COM0A0) | (1 << WGM01) | (1 << WGM00); 
 19e:	84 b5       	in	r24, 0x24	; 36
 1a0:	83 64       	ori	r24, 0x43	; 67
 1a2:	84 bd       	out	0x24, r24	; 36
	/* Servo 2 */
	TCCR1A |= (1 << COM1A1) | (1 << WGM12) | (1 << WGM10); 
 1a4:	80 81       	ld	r24, Z
 1a6:	89 68       	ori	r24, 0x89	; 137
 1a8:	80 83       	st	Z, r24
	
	/* Clear shift register */
	direction_signal.direction = 0;
	direction_signal.previous_direction = 0; 	
 1aa:	e2 e0       	ldi	r30, 0x02	; 2
 1ac:	f1 e0       	ldi	r31, 0x01	; 1
 1ae:	11 82       	std	Z+1, r1	; 0x01
	direction_signal.direction |= SERVO0_DIRA;
 1b0:	84 e0       	ldi	r24, 0x04	; 4
 1b2:	80 83       	st	Z, r24
	spi_send_direction();	
 1b4:	0e 94 b3 00 	call	0x166	; 0x166 <_Z18spi_send_directionv>
	SERVO0_PWM = 40;
 1b8:	88 e2       	ldi	r24, 0x28	; 40
 1ba:	80 93 b4 00 	sts	0x00B4, r24	; 0x8000b4 <__DATA_REGION_ORIGIN__+0x54>
 1be:	ff cf       	rjmp	.-2      	; 0x1be <main+0x46>

000001c0 <__vector_11>:
uint32_t timer_10k(){
	return timer_counter;
}

//interrupt vector 
ISR (TIMER1_COMPA_vect) {
 1c0:	1f 92       	push	r1
 1c2:	0f 92       	push	r0
 1c4:	0f b6       	in	r0, 0x3f	; 63
 1c6:	0f 92       	push	r0
 1c8:	11 24       	eor	r1, r1
 1ca:	8f 93       	push	r24
 1cc:	9f 93       	push	r25
 1ce:	af 93       	push	r26
 1d0:	bf 93       	push	r27
	timer_counter++;
 1d2:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <timer_counter>
 1d6:	90 91 19 01 	lds	r25, 0x0119	; 0x800119 <timer_counter+0x1>
 1da:	a0 91 1a 01 	lds	r26, 0x011A	; 0x80011a <timer_counter+0x2>
 1de:	b0 91 1b 01 	lds	r27, 0x011B	; 0x80011b <timer_counter+0x3>
 1e2:	01 96       	adiw	r24, 0x01	; 1
 1e4:	a1 1d       	adc	r26, r1
 1e6:	b1 1d       	adc	r27, r1
 1e8:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <timer_counter>
 1ec:	90 93 19 01 	sts	0x0119, r25	; 0x800119 <timer_counter+0x1>
 1f0:	a0 93 1a 01 	sts	0x011A, r26	; 0x80011a <timer_counter+0x2>
 1f4:	b0 93 1b 01 	sts	0x011B, r27	; 0x80011b <timer_counter+0x3>
 1f8:	bf 91       	pop	r27
 1fa:	af 91       	pop	r26
 1fc:	9f 91       	pop	r25
 1fe:	8f 91       	pop	r24
 200:	0f 90       	pop	r0
 202:	0f be       	out	0x3f, r0	; 63
 204:	0f 90       	pop	r0
 206:	1f 90       	pop	r1
 208:	18 95       	reti

0000020a <_exit>:
 20a:	f8 94       	cli

0000020c <__stop_program>:
 20c:	ff cf       	rjmp	.-2      	; 0x20c <__stop_program>
