
RobotArm.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000260  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001ec  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000001b  00800100  00800100  00000260  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000260  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000290  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000078  00000000  00000000  000002d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000008d4  00000000  00000000  00000348  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000756  00000000  00000000  00000c1c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000003ea  00000000  00000000  00001372  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000100  00000000  00000000  0000175c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000518  00000000  00000000  0000185c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000000fe  00000000  00000000  00001d74  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000058  00000000  00000000  00001e72  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 cf 00 	jmp	0x19e	; 0x19e <__vector_11>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__vector_18>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ec ee       	ldi	r30, 0xEC	; 236
  7c:	f1 e0       	ldi	r31, 0x01	; 1
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a0 30       	cpi	r26, 0x00	; 0
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a0 e0       	ldi	r26, 0x00	; 0
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	ab 31       	cpi	r26, 0x1B	; 27
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 bd 00 	call	0x17a	; 0x17a <main>
  9e:	0c 94 f4 00 	jmp	0x1e8	; 0x1e8 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <__vector_18>:
	uint8_t motor_select; 
	int data[8];
	int done;
	};
Motor_status motor_status; 
ISR(USART_RX_vect){
  a6:	1f 92       	push	r1
  a8:	0f 92       	push	r0
  aa:	0f b6       	in	r0, 0x3f	; 63
  ac:	0f 92       	push	r0
  ae:	11 24       	eor	r1, r1
  b0:	2f 93       	push	r18
  b2:	3f 93       	push	r19
  b4:	8f 93       	push	r24
  b6:	9f 93       	push	r25
  b8:	ef 93       	push	r30
  ba:	ff 93       	push	r31
	motor_status.done = 0; 
  bc:	10 92 15 01 	sts	0x0115, r1	; 0x800115 <motor_status+0x12>
  c0:	10 92 14 01 	sts	0x0114, r1	; 0x800114 <motor_status+0x11>
	char c = UDR0;
  c4:	90 91 c6 00 	lds	r25, 0x00C6	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
	static int counter = 0; 
	static int sign;
	/*finite state machine for receiving data frame */
	switch(receive_state){
  c8:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <receive_state>
  cc:	81 30       	cpi	r24, 0x01	; 1
  ce:	81 f0       	breq	.+32     	; 0xf0 <__vector_18+0x4a>
  d0:	18 f0       	brcs	.+6      	; 0xd8 <__vector_18+0x32>
  d2:	82 30       	cpi	r24, 0x02	; 2
  d4:	c9 f0       	breq	.+50     	; 0x108 <__vector_18+0x62>
  d6:	35 c0       	rjmp	.+106    	; 0x142 <__vector_18+0x9c>
				case RECEIVE_WAIT : 
					if(c == 'M'){
  d8:	9d 34       	cpi	r25, 0x4D	; 77
  da:	21 f4       	brne	.+8      	; 0xe4 <__vector_18+0x3e>
						receive_state = RECEIVE_MOTOR_SELECT;
  dc:	81 e0       	ldi	r24, 0x01	; 1
  de:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <receive_state>
  e2:	2f c0       	rjmp	.+94     	; 0x142 <__vector_18+0x9c>
					}else if(c== 'R'){
  e4:	92 35       	cpi	r25, 0x52	; 82
  e6:	69 f5       	brne	.+90     	; 0x142 <__vector_18+0x9c>
						receive_state = RECEIVE_RESET;
  e8:	83 e0       	ldi	r24, 0x03	; 3
  ea:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <receive_state>
  ee:	29 c0       	rjmp	.+82     	; 0x142 <__vector_18+0x9c>
					}
					break;
				case RECEIVE_MOTOR_SELECT: 
					motor_status.motor_select = c-48; 
  f0:	80 ed       	ldi	r24, 0xD0	; 208
  f2:	89 0f       	add	r24, r25
  f4:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <motor_status>
					receive_state = RECEIVE_DATA;
  f8:	82 e0       	ldi	r24, 0x02	; 2
  fa:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <receive_state>
					counter = 0;
  fe:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <__data_end+0x1>
 102:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__data_end>
					break; 
 106:	1d c0       	rjmp	.+58     	; 0x142 <__vector_18+0x9c>
				case RECEIVE_DATA:
					motor_status.data[counter] = c;
 108:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_end>
 10c:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_end+0x1>
 110:	f9 01       	movw	r30, r18
 112:	ee 0f       	add	r30, r30
 114:	ff 1f       	adc	r31, r31
 116:	ed 5f       	subi	r30, 0xFD	; 253
 118:	fe 4f       	sbci	r31, 0xFE	; 254
 11a:	89 2f       	mov	r24, r25
 11c:	90 e0       	ldi	r25, 0x00	; 0
 11e:	92 83       	std	Z+2, r25	; 0x02
 120:	81 83       	std	Z+1, r24	; 0x01
					counter++;
 122:	c9 01       	movw	r24, r18
 124:	01 96       	adiw	r24, 0x01	; 1
 126:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_end+0x1>
 12a:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_end>
					if(counter == 8){
 12e:	08 97       	sbiw	r24, 0x08	; 8
 130:	41 f4       	brne	.+16     	; 0x142 <__vector_18+0x9c>
						receive_state = RECEIVE_WAIT ; 
 132:	10 92 16 01 	sts	0x0116, r1	; 0x800116 <receive_state>
						motor_status.done = 1;
 136:	81 e0       	ldi	r24, 0x01	; 1
 138:	90 e0       	ldi	r25, 0x00	; 0
 13a:	90 93 15 01 	sts	0x0115, r25	; 0x800115 <motor_status+0x12>
 13e:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <motor_status+0x11>
					break; 
				case RECEIVE_RESET:
							
					break;
		}	
}
 142:	ff 91       	pop	r31
 144:	ef 91       	pop	r30
 146:	9f 91       	pop	r25
 148:	8f 91       	pop	r24
 14a:	3f 91       	pop	r19
 14c:	2f 91       	pop	r18
 14e:	0f 90       	pop	r0
 150:	0f be       	out	0x3f, r0	; 63
 152:	0f 90       	pop	r0
 154:	1f 90       	pop	r1
 156:	18 95       	reti

00000158 <_Z8spi_initv>:


uint8_t direction_vector;//Bit vector containing the directions for the servo motor drivers 

void spi_init(){
	DDRB |= SHIFT_MOSI | SHIFT_SCK | SHIFT_SS;
 158:	84 b1       	in	r24, 0x04	; 4
 15a:	8c 62       	ori	r24, 0x2C	; 44
 15c:	84 b9       	out	0x04, r24	; 4
	DDRD |= SHIFT_REFRESH;
 15e:	57 9a       	sbi	0x0a, 7	; 10
	SPCR |=  (1 << SPE) | (1 << MSTR); //Enable spi as master and enable SPI respectively 
 160:	8c b5       	in	r24, 0x2c	; 44
 162:	80 65       	ori	r24, 0x50	; 80
 164:	8c bd       	out	0x2c, r24	; 44
 166:	08 95       	ret

00000168 <_Z8spi_sendv>:
}
void spi_send(){
	PORTD &= ~SHIFT_REFRESH;
 168:	5f 98       	cbi	0x0b, 7	; 11
	SPDR = direction_vector;
 16a:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <direction_vector>
 16e:	8e bd       	out	0x2e, r24	; 46
	while(!(SPSR & (1<<SPIF)));
 170:	0d b4       	in	r0, 0x2d	; 45
 172:	07 fe       	sbrs	r0, 7
 174:	fd cf       	rjmp	.-6      	; 0x170 <_Z8spi_sendv+0x8>
	PORTD |= SHIFT_REFRESH;
 176:	5f 9a       	sbi	0x0b, 7	; 11
 178:	08 95       	ret

0000017a <main>:
}
int main(void)
{
	/* Initialize SPI:	
	 *	the SPI is used to send the direction signals to the shift register */
	 spi_init();
 17a:	0e 94 ac 00 	call	0x158	; 0x158 <_Z8spi_initv>
	/* Initialize servo motors: 
	/* Servo 0 0C2B */
	TCCR2A |= (1 << COM2B1) | (1 << WGM21) | (1 << WGM20); //Enable 0C2B pin as pwm and 
 17e:	e0 eb       	ldi	r30, 0xB0	; 176
 180:	f0 e0       	ldi	r31, 0x00	; 0
 182:	80 81       	ld	r24, Z
 184:	83 62       	ori	r24, 0x23	; 35
 186:	80 83       	st	Z, r24
	TCCR2B |= (1 << CS20); // No prescaling 
 188:	e1 eb       	ldi	r30, 0xB1	; 177
 18a:	f0 e0       	ldi	r31, 0x00	; 0
 18c:	80 81       	ld	r24, Z
 18e:	81 60       	ori	r24, 0x01	; 1
 190:	80 83       	st	Z, r24

	direction_vector = 0xFF;
 192:	8f ef       	ldi	r24, 0xFF	; 255
 194:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <direction_vector>
	spi_send();	
 198:	0e 94 b4 00 	call	0x168	; 0x168 <_Z8spi_sendv>
 19c:	ff cf       	rjmp	.-2      	; 0x19c <main+0x22>

0000019e <__vector_11>:
uint32_t timer_10k(){
	return timer_counter;
}

//interrupt vector 
ISR (TIMER1_COMPA_vect) {
 19e:	1f 92       	push	r1
 1a0:	0f 92       	push	r0
 1a2:	0f b6       	in	r0, 0x3f	; 63
 1a4:	0f 92       	push	r0
 1a6:	11 24       	eor	r1, r1
 1a8:	8f 93       	push	r24
 1aa:	9f 93       	push	r25
 1ac:	af 93       	push	r26
 1ae:	bf 93       	push	r27
	timer_counter++;
 1b0:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <timer_counter>
 1b4:	90 91 18 01 	lds	r25, 0x0118	; 0x800118 <timer_counter+0x1>
 1b8:	a0 91 19 01 	lds	r26, 0x0119	; 0x800119 <timer_counter+0x2>
 1bc:	b0 91 1a 01 	lds	r27, 0x011A	; 0x80011a <timer_counter+0x3>
 1c0:	01 96       	adiw	r24, 0x01	; 1
 1c2:	a1 1d       	adc	r26, r1
 1c4:	b1 1d       	adc	r27, r1
 1c6:	80 93 17 01 	sts	0x0117, r24	; 0x800117 <timer_counter>
 1ca:	90 93 18 01 	sts	0x0118, r25	; 0x800118 <timer_counter+0x1>
 1ce:	a0 93 19 01 	sts	0x0119, r26	; 0x800119 <timer_counter+0x2>
 1d2:	b0 93 1a 01 	sts	0x011A, r27	; 0x80011a <timer_counter+0x3>
 1d6:	bf 91       	pop	r27
 1d8:	af 91       	pop	r26
 1da:	9f 91       	pop	r25
 1dc:	8f 91       	pop	r24
 1de:	0f 90       	pop	r0
 1e0:	0f be       	out	0x3f, r0	; 63
 1e2:	0f 90       	pop	r0
 1e4:	1f 90       	pop	r1
 1e6:	18 95       	reti

000001e8 <_exit>:
 1e8:	f8 94       	cli

000001ea <__stop_program>:
 1ea:	ff cf       	rjmp	.-2      	; 0x1ea <__stop_program>
