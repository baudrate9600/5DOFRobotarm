
RobotArm.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000010  00800100  000009fa  00000a8e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000009fa  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000c  00800110  00800110  00000a9e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000a9e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000ad0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000f8  00000000  00000000  00000b10  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000fed  00000000  00000000  00000c08  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000009f1  00000000  00000000  00001bf5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000072f  00000000  00000000  000025e6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000228  00000000  00000000  00002d18  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000073c  00000000  00000000  00002f40  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000057f  00000000  00000000  0000367c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000c8  00000000  00000000  00003bfb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 7e 01 	jmp	0x2fc	; 0x2fc <__vector_11>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__vector_18>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 99 00 	jmp	0x132	; 0x132 <__vector_20>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ea ef       	ldi	r30, 0xFA	; 250
  7c:	f9 e0       	ldi	r31, 0x09	; 9
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a0 31       	cpi	r26, 0x10	; 16
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a0 e1       	ldi	r26, 0x10	; 16
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	ac 31       	cpi	r26, 0x1C	; 28
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 a3 00 	call	0x146	; 0x146 <main>
  9e:	0c 94 fb 04 	jmp	0x9f6	; 0x9f6 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <__vector_18>:
#define M0_DIR	(1 << PORTC1)

#define BUFFER_SEND_SIZE = 16  


ISR(USART_RX_vect){
  a6:	1f 92       	push	r1
  a8:	0f 92       	push	r0
  aa:	0f b6       	in	r0, 0x3f	; 63
  ac:	0f 92       	push	r0
  ae:	11 24       	eor	r1, r1
  b0:	8f 93       	push	r24
	UDR0;
  b2:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
}
  b6:	8f 91       	pop	r24
  b8:	0f 90       	pop	r0
  ba:	0f be       	out	0x3f, r0	; 63
  bc:	0f 90       	pop	r0
  be:	1f 90       	pop	r1
  c0:	18 95       	reti

000000c2 <_Z15buffer_set_headc>:
	char data; 
	buffer_element *next;
	};
buffer_element * buffer_head = NULL;
buffer_element * tail = NULL;
void buffer_set_head(char c){
  c2:	cf 93       	push	r28
  c4:	c8 2f       	mov	r28, r24
	buffer_head = (buffer_element*)malloc(sizeof(buffer_element));	
  c6:	83 e0       	ldi	r24, 0x03	; 3
  c8:	90 e0       	ldi	r25, 0x00	; 0
  ca:	0e 94 da 03 	call	0x7b4	; 0x7b4 <malloc>
  ce:	90 93 13 01 	sts	0x0113, r25	; 0x800113 <buffer_head+0x1>
  d2:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <buffer_head>
	buffer_head->data = c; 
  d6:	fc 01       	movw	r30, r24
  d8:	c0 83       	st	Z, r28
	tail = buffer_head;
  da:	90 93 11 01 	sts	0x0111, r25	; 0x800111 <__data_end+0x1>
  de:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <__data_end>
}
  e2:	cf 91       	pop	r28
  e4:	08 95       	ret

000000e6 <_Z10buffer_addc>:
void buffer_add(char c){
  e6:	cf 93       	push	r28
  e8:	c8 2f       	mov	r28, r24
	buffer_element * temp = (buffer_element*)malloc(sizeof(buffer_element));	
  ea:	83 e0       	ldi	r24, 0x03	; 3
  ec:	90 e0       	ldi	r25, 0x00	; 0
  ee:	0e 94 da 03 	call	0x7b4	; 0x7b4 <malloc>
    tail->next = temp ; 
  f2:	e0 91 10 01 	lds	r30, 0x0110	; 0x800110 <__data_end>
  f6:	f0 91 11 01 	lds	r31, 0x0111	; 0x800111 <__data_end+0x1>
  fa:	92 83       	std	Z+2, r25	; 0x02
  fc:	81 83       	std	Z+1, r24	; 0x01
	temp->data = c; 
  fe:	fc 01       	movw	r30, r24
 100:	c0 83       	st	Z, r28
	tail = temp;
 102:	90 93 11 01 	sts	0x0111, r25	; 0x800111 <__data_end+0x1>
 106:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <__data_end>
}
 10a:	cf 91       	pop	r28
 10c:	08 95       	ret

0000010e <_Z11buffer_readv>:
char buffer_read(){
 10e:	cf 93       	push	r28
	char c = buffer_head->data; 
 110:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <buffer_head>
 114:	90 91 13 01 	lds	r25, 0x0113	; 0x800113 <buffer_head+0x1>
 118:	fc 01       	movw	r30, r24
 11a:	c0 81       	ld	r28, Z
	buffer_element * temp = buffer_head; 
	buffer_head = buffer_head->next;
 11c:	21 81       	ldd	r18, Z+1	; 0x01
 11e:	32 81       	ldd	r19, Z+2	; 0x02
 120:	30 93 13 01 	sts	0x0113, r19	; 0x800113 <buffer_head+0x1>
 124:	20 93 12 01 	sts	0x0112, r18	; 0x800112 <buffer_head>
	free(temp);
 128:	0e 94 72 04 	call	0x8e4	; 0x8e4 <free>
	return c;
}
 12c:	8c 2f       	mov	r24, r28
 12e:	cf 91       	pop	r28
 130:	08 95       	ret

00000132 <__vector_20>:

ISR(USART_TX_vect){
 132:	1f 92       	push	r1
 134:	0f 92       	push	r0
 136:	0f b6       	in	r0, 0x3f	; 63
 138:	0f 92       	push	r0
 13a:	11 24       	eor	r1, r1
	//if(usart_fifo_counter > 0){
	//	UDR0 = usart_	
	//}	
}
 13c:	0f 90       	pop	r0
 13e:	0f be       	out	0x3f, r0	; 63
 140:	0f 90       	pop	r0
 142:	1f 90       	pop	r1
 144:	18 95       	reti

00000146 <main>:

int main(void)
{
 146:	cf 93       	push	r28
 148:	df 93       	push	r29
 14a:	cd b7       	in	r28, 0x3d	; 61
 14c:	de b7       	in	r29, 0x3e	; 62
 14e:	2a 97       	sbiw	r28, 0x0a	; 10
 150:	0f b6       	in	r0, 0x3f	; 63
 152:	f8 94       	cli
 154:	de bf       	out	0x3e, r29	; 62
 156:	0f be       	out	0x3f, r0	; 63
 158:	cd bf       	out	0x3d, r28	; 61
	/* initialize component */ 
	sei();
 15a:	78 94       	sei
	timer_enable();	
 15c:	0e 94 49 01 	call	0x292	; 0x292 <_Z12timer_enablev>
	usart_enable(9600);
 160:	80 e8       	ldi	r24, 0x80	; 128
 162:	95 e2       	ldi	r25, 0x25	; 37
 164:	0e 94 a3 01 	call	0x346	; 0x346 <_Z12usart_enablej>
	
    /* Replace with your application code */
	uint8_t tacho_values;
	uint8_t tacho_state = 0;
	int tacho = 0;
	DDRD &= ~TACHO_0_M;
 168:	55 98       	cbi	0x0a, 5	; 10
	DDRD &= ~TACHO_0_P; 
 16a:	52 98       	cbi	0x0a, 2	; 10

	/* Initialize servo motors */
	DDRD |= SERVO_0_EN | SERVO_0_DIR_A | SERVO_0_DIR_B;
 16c:	8a b1       	in	r24, 0x0a	; 10
 16e:	88 6c       	ori	r24, 0xC8	; 200
 170:	8a b9       	out	0x0a, r24	; 10
	TCCR2A |= (1 << COM2B1 ) | (1 << WGM21) | (1 << WGM20); /*Fast PWM */
 172:	e0 eb       	ldi	r30, 0xB0	; 176
 174:	f0 e0       	ldi	r31, 0x00	; 0
 176:	80 81       	ld	r24, Z
 178:	83 62       	ori	r24, 0x23	; 35
 17a:	80 83       	st	Z, r24
	TCCR2B |= (1 << CS20); /*No prescaling */
 17c:	e1 eb       	ldi	r30, 0xB1	; 177
 17e:	f0 e0       	ldi	r31, 0x00	; 0
 180:	80 81       	ld	r24, Z
 182:	81 60       	ori	r24, 0x01	; 1
 184:	80 83       	st	Z, r24
	int I   = 5; 
	uint16_t integral_time_base = 0; 
	float integral = 0;
	
	
	int target_vector[] = {0, 20, -40, 20, -50};
 186:	8a e0       	ldi	r24, 0x0A	; 10
 188:	e6 e0       	ldi	r30, 0x06	; 6
 18a:	f1 e0       	ldi	r31, 0x01	; 1
 18c:	de 01       	movw	r26, r28
 18e:	11 96       	adiw	r26, 0x01	; 1
 190:	01 90       	ld	r0, Z+
 192:	0d 92       	st	X+, r0
 194:	8a 95       	dec	r24
 196:	e1 f7       	brne	.-8      	; 0x190 <main+0x4a>
	int index = 0; 
	buffer_set_head('h');
 198:	88 e6       	ldi	r24, 0x68	; 104
 19a:	0e 94 61 00 	call	0xc2	; 0xc2 <_Z15buffer_set_headc>
	buffer_add('e');
 19e:	85 e6       	ldi	r24, 0x65	; 101
 1a0:	0e 94 73 00 	call	0xe6	; 0xe6 <_Z10buffer_addc>
	buffer_add('l');
 1a4:	8c e6       	ldi	r24, 0x6C	; 108
 1a6:	0e 94 73 00 	call	0xe6	; 0xe6 <_Z10buffer_addc>
	buffer_add('l');
 1aa:	8c e6       	ldi	r24, 0x6C	; 108
 1ac:	0e 94 73 00 	call	0xe6	; 0xe6 <_Z10buffer_addc>
	buffer_add('o');
 1b0:	8f e6       	ldi	r24, 0x6F	; 111
 1b2:	0e 94 73 00 	call	0xe6	; 0xe6 <_Z10buffer_addc>
 1b6:	05 e0       	ldi	r16, 0x05	; 5
 1b8:	10 e0       	ldi	r17, 0x00	; 0
	
	for(int i = 0; i < 5; i++){
		usart_send(buffer_read());
 1ba:	0e 94 87 00 	call	0x10e	; 0x10e <_Z11buffer_readv>
 1be:	0e 94 c9 01 	call	0x392	; 0x392 <_Z10usart_sendc>
 1c2:	01 50       	subi	r16, 0x01	; 1
 1c4:	11 09       	sbc	r17, r1
	buffer_add('e');
	buffer_add('l');
	buffer_add('l');
	buffer_add('o');
	
	for(int i = 0; i < 5; i++){
 1c6:	c9 f7       	brne	.-14     	; 0x1ba <main+0x74>
		usart_send(buffer_read());
	}
		buffer_set_head('h');
 1c8:	88 e6       	ldi	r24, 0x68	; 104
 1ca:	0e 94 61 00 	call	0xc2	; 0xc2 <_Z15buffer_set_headc>
	buffer_add('e');
 1ce:	85 e6       	ldi	r24, 0x65	; 101
 1d0:	0e 94 73 00 	call	0xe6	; 0xe6 <_Z10buffer_addc>
	buffer_add('l');
 1d4:	8c e6       	ldi	r24, 0x6C	; 108
 1d6:	0e 94 73 00 	call	0xe6	; 0xe6 <_Z10buffer_addc>
	buffer_add('l');
 1da:	8c e6       	ldi	r24, 0x6C	; 108
 1dc:	0e 94 73 00 	call	0xe6	; 0xe6 <_Z10buffer_addc>
	buffer_add('o');
 1e0:	8f e6       	ldi	r24, 0x6F	; 111
 1e2:	0e 94 73 00 	call	0xe6	; 0xe6 <_Z10buffer_addc>
 1e6:	05 e0       	ldi	r16, 0x05	; 5
 1e8:	10 e0       	ldi	r17, 0x00	; 0
	
	for(int i = 0; i < 5; i++){
		usart_send(buffer_read());
 1ea:	0e 94 87 00 	call	0x10e	; 0x10e <_Z11buffer_readv>
 1ee:	0e 94 c9 01 	call	0x392	; 0x392 <_Z10usart_sendc>
 1f2:	01 50       	subi	r16, 0x01	; 1
 1f4:	11 09       	sbc	r17, r1
	buffer_add('e');
	buffer_add('l');
	buffer_add('l');
	buffer_add('o');
	
	for(int i = 0; i < 5; i++){
 1f6:	c9 f7       	brne	.-14     	; 0x1ea <main+0xa4>
 1f8:	00 e0       	ldi	r16, 0x00	; 0
 1fa:	10 e0       	ldi	r17, 0x00	; 0
 1fc:	e1 2c       	mov	r14, r1
 1fe:	f1 2c       	mov	r15, r1
 200:	b1 2c       	mov	r11, r1
		
		
	//	usart_sendln((int)timer_ms()); 
		integral_time_base = timer_ms();
		error = target_vector[index] - tacho;
		SERVO_0_PWM = P * error ; 				
 202:	0f 2e       	mov	r0, r31
 204:	f4 eb       	ldi	r31, 0xB4	; 180
 206:	cf 2e       	mov	r12, r31
 208:	d1 2c       	mov	r13, r1
 20a:	f0 2d       	mov	r31, r0
				}
				tacho_state = 1; 
			}
		}else{
			if (!(PIND & TACHO_0_P)){
				tacho_state = 0; 
 20c:	91 2c       	mov	r9, r1
				if(PIND & TACHO_0_M){
					tacho++;
				}else{
					tacho--;
				}
				tacho_state = 1; 
 20e:	aa 24       	eor	r10, r10
 210:	a3 94       	inc	r10
    while (1) 
    {
		
		
	//	usart_sendln((int)timer_ms()); 
		integral_time_base = timer_ms();
 212:	0e 94 75 01 	call	0x2ea	; 0x2ea <_Z8timer_msv>
		error = target_vector[index] - tacho;
 216:	f8 01       	movw	r30, r16
 218:	ee 0f       	add	r30, r30
 21a:	ff 1f       	adc	r31, r31
 21c:	81 e0       	ldi	r24, 0x01	; 1
 21e:	90 e0       	ldi	r25, 0x00	; 0
 220:	8c 0f       	add	r24, r28
 222:	9d 1f       	adc	r25, r29
 224:	e8 0f       	add	r30, r24
 226:	f9 1f       	adc	r31, r25
 228:	80 81       	ld	r24, Z
 22a:	91 81       	ldd	r25, Z+1	; 0x01
 22c:	8e 19       	sub	r24, r14
 22e:	9f 09       	sbc	r25, r15
		SERVO_0_PWM = P * error ; 				
 230:	f6 01       	movw	r30, r12
 232:	80 83       	st	Z, r24
		if(error > 0){
 234:	18 16       	cp	r1, r24
 236:	19 06       	cpc	r1, r25
 238:	1c f4       	brge	.+6      	; 0x240 <main+0xfa>
			PORTD |= SERVO_0_DIR_A;
 23a:	5e 9a       	sbi	0x0b, 6	; 11
			PORTD &= ~SERVO_0_DIR_B;
 23c:	5f 98       	cbi	0x0b, 7	; 11
 23e:	04 c0       	rjmp	.+8      	; 0x248 <main+0x102>
		}else if (error < 0){
 240:	99 23       	and	r25, r25
 242:	14 f4       	brge	.+4      	; 0x248 <main+0x102>
			PORTD &= ~SERVO_0_DIR_A;
 244:	5e 98       	cbi	0x0b, 6	; 11
			PORTD |= SERVO_0_DIR_B;
 246:	5f 9a       	sbi	0x0b, 7	; 11
		if(integral_time_base){
			integral += 0.001 * error; 
			integral_time_base = 0; 
		}

	    if(timer_ms() > 2000){
 248:	0e 94 75 01 	call	0x2ea	; 0x2ea <_Z8timer_msv>
 24c:	61 3d       	cpi	r22, 0xD1	; 209
 24e:	77 40       	sbci	r23, 0x07	; 7
 250:	81 05       	cpc	r24, r1
 252:	91 05       	cpc	r25, r1
 254:	48 f0       	brcs	.+18     	; 0x268 <main+0x122>
			timer_reset();
 256:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <_Z11timer_resetv>
			index++; 
 25a:	0f 5f       	subi	r16, 0xFF	; 255
 25c:	1f 4f       	sbci	r17, 0xFF	; 255
			if(index == 4){
 25e:	04 30       	cpi	r16, 0x04	; 4
 260:	11 05       	cpc	r17, r1
 262:	11 f4       	brne	.+4      	; 0x268 <main+0x122>
				index = 0;
 264:	00 e0       	ldi	r16, 0x00	; 0
 266:	10 e0       	ldi	r17, 0x00	; 0


		


		tacho_values= PIND;
 268:	89 b1       	in	r24, 0x09	; 9
		if (tacho_state == 0){
 26a:	b1 10       	cpse	r11, r1
 26c:	0e c0       	rjmp	.+28     	; 0x28a <main+0x144>
			if (PIND & TACHO_0_P){
 26e:	4a 9b       	sbis	0x09, 2	; 9
 270:	d0 cf       	rjmp	.-96     	; 0x212 <main+0xcc>
				if(PIND & TACHO_0_M){
 272:	4d 9b       	sbis	0x09, 5	; 9
 274:	05 c0       	rjmp	.+10     	; 0x280 <main+0x13a>
					tacho++;
 276:	2f ef       	ldi	r18, 0xFF	; 255
 278:	e2 1a       	sub	r14, r18
 27a:	f2 0a       	sbc	r15, r18
				}else{
					tacho--;
				}
				tacho_state = 1; 
 27c:	ba 2c       	mov	r11, r10
 27e:	c9 cf       	rjmp	.-110    	; 0x212 <main+0xcc>
		if (tacho_state == 0){
			if (PIND & TACHO_0_P){
				if(PIND & TACHO_0_M){
					tacho++;
				}else{
					tacho--;
 280:	81 e0       	ldi	r24, 0x01	; 1
 282:	e8 1a       	sub	r14, r24
 284:	f1 08       	sbc	r15, r1
				}
				tacho_state = 1; 
 286:	ba 2c       	mov	r11, r10
 288:	c4 cf       	rjmp	.-120    	; 0x212 <main+0xcc>
			}
		}else{
			if (!(PIND & TACHO_0_P)){
 28a:	4a 99       	sbic	0x09, 2	; 9
 28c:	c2 cf       	rjmp	.-124    	; 0x212 <main+0xcc>
				tacho_state = 0; 
 28e:	b9 2c       	mov	r11, r9
 290:	c0 cf       	rjmp	.-128    	; 0x212 <main+0xcc>

00000292 <_Z12timer_enablev>:
	timer_counter = 0;
}
//Stop the  timer
void timer_disable(){
	TIMSK1 |= (1 << OCIE1A);
	timer_counter = 0; 
 292:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
 296:	e1 e8       	ldi	r30, 0x81	; 129
 298:	f0 e0       	ldi	r31, 0x00	; 0
 29a:	10 82       	st	Z, r1
 29c:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
 2a0:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
 2a4:	89 ef       	ldi	r24, 0xF9	; 249
 2a6:	90 e0       	ldi	r25, 0x00	; 0
 2a8:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__DATA_REGION_ORIGIN__+0x29>
 2ac:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__DATA_REGION_ORIGIN__+0x28>
 2b0:	80 81       	ld	r24, Z
 2b2:	88 60       	ori	r24, 0x08	; 8
 2b4:	80 83       	st	Z, r24
 2b6:	80 81       	ld	r24, Z
 2b8:	83 60       	ori	r24, 0x03	; 3
 2ba:	80 83       	st	Z, r24
 2bc:	ef e6       	ldi	r30, 0x6F	; 111
 2be:	f0 e0       	ldi	r31, 0x00	; 0
 2c0:	80 81       	ld	r24, Z
 2c2:	82 60       	ori	r24, 0x02	; 2
 2c4:	80 83       	st	Z, r24
 2c6:	10 92 14 01 	sts	0x0114, r1	; 0x800114 <timer_counter>
 2ca:	10 92 15 01 	sts	0x0115, r1	; 0x800115 <timer_counter+0x1>
 2ce:	10 92 16 01 	sts	0x0116, r1	; 0x800116 <timer_counter+0x2>
 2d2:	10 92 17 01 	sts	0x0117, r1	; 0x800117 <timer_counter+0x3>
 2d6:	08 95       	ret

000002d8 <_Z11timer_resetv>:
}

//Reset the counter
void timer_reset(){
	timer_counter = 0; 
 2d8:	10 92 14 01 	sts	0x0114, r1	; 0x800114 <timer_counter>
 2dc:	10 92 15 01 	sts	0x0115, r1	; 0x800115 <timer_counter+0x1>
 2e0:	10 92 16 01 	sts	0x0116, r1	; 0x800116 <timer_counter+0x2>
 2e4:	10 92 17 01 	sts	0x0117, r1	; 0x800117 <timer_counter+0x3>
 2e8:	08 95       	ret

000002ea <_Z8timer_msv>:
}

//Return the elapsed time since the counter was enable 
uint32_t timer_ms(){
	return timer_counter;
 2ea:	60 91 14 01 	lds	r22, 0x0114	; 0x800114 <timer_counter>
 2ee:	70 91 15 01 	lds	r23, 0x0115	; 0x800115 <timer_counter+0x1>
 2f2:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <timer_counter+0x2>
 2f6:	90 91 17 01 	lds	r25, 0x0117	; 0x800117 <timer_counter+0x3>
}
 2fa:	08 95       	ret

000002fc <__vector_11>:

//interrupt vector 
ISR (TIMER1_COMPA_vect) {
 2fc:	1f 92       	push	r1
 2fe:	0f 92       	push	r0
 300:	0f b6       	in	r0, 0x3f	; 63
 302:	0f 92       	push	r0
 304:	11 24       	eor	r1, r1
 306:	8f 93       	push	r24
 308:	9f 93       	push	r25
 30a:	af 93       	push	r26
 30c:	bf 93       	push	r27
	timer_counter++;
 30e:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <timer_counter>
 312:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <timer_counter+0x1>
 316:	a0 91 16 01 	lds	r26, 0x0116	; 0x800116 <timer_counter+0x2>
 31a:	b0 91 17 01 	lds	r27, 0x0117	; 0x800117 <timer_counter+0x3>
 31e:	01 96       	adiw	r24, 0x01	; 1
 320:	a1 1d       	adc	r26, r1
 322:	b1 1d       	adc	r27, r1
 324:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <timer_counter>
 328:	90 93 15 01 	sts	0x0115, r25	; 0x800115 <timer_counter+0x1>
 32c:	a0 93 16 01 	sts	0x0116, r26	; 0x800116 <timer_counter+0x2>
 330:	b0 93 17 01 	sts	0x0117, r27	; 0x800117 <timer_counter+0x3>
 334:	bf 91       	pop	r27
 336:	af 91       	pop	r26
 338:	9f 91       	pop	r25
 33a:	8f 91       	pop	r24
 33c:	0f 90       	pop	r0
 33e:	0f be       	out	0x3f, r0	; 63
 340:	0f 90       	pop	r0
 342:	1f 90       	pop	r1
 344:	18 95       	reti

00000346 <_Z12usart_enablej>:
void usart_block(){
	UCSR0B &= ~(1 << RXCIE0 ); //turn off interrupts  
}
//Unblock the RX interrupt 
void usart_unblock(){
	UCSR0B |= (1 << RXCIE0 ); //turn on interrupts  
 346:	28 e9       	ldi	r18, 0x98	; 152
 348:	20 93 c1 00 	sts	0x00C1, r18	; 0x8000c1 <__DATA_REGION_ORIGIN__+0x61>
 34c:	26 e0       	ldi	r18, 0x06	; 6
 34e:	20 93 c2 00 	sts	0x00C2, r18	; 0x8000c2 <__DATA_REGION_ORIGIN__+0x62>
 352:	bc 01       	movw	r22, r24
 354:	80 e0       	ldi	r24, 0x00	; 0
 356:	90 e0       	ldi	r25, 0x00	; 0
 358:	0e 94 df 02 	call	0x5be	; 0x5be <__floatunsisf>
 35c:	20 e0       	ldi	r18, 0x00	; 0
 35e:	30 e0       	ldi	r19, 0x00	; 0
 360:	40 e8       	ldi	r20, 0x80	; 128
 362:	51 e4       	ldi	r21, 0x41	; 65
 364:	0e 94 6d 03 	call	0x6da	; 0x6da <__mulsf3>
 368:	9b 01       	movw	r18, r22
 36a:	ac 01       	movw	r20, r24
 36c:	60 e0       	ldi	r22, 0x00	; 0
 36e:	74 e2       	ldi	r23, 0x24	; 36
 370:	84 e7       	ldi	r24, 0x74	; 116
 372:	9b e4       	ldi	r25, 0x4B	; 75
 374:	0e 94 3e 02 	call	0x47c	; 0x47c <__divsf3>
 378:	20 e0       	ldi	r18, 0x00	; 0
 37a:	30 e0       	ldi	r19, 0x00	; 0
 37c:	40 e8       	ldi	r20, 0x80	; 128
 37e:	5f e3       	ldi	r21, 0x3F	; 63
 380:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <__subsf3>
 384:	0e 94 b0 02 	call	0x560	; 0x560 <__fixunssfsi>
 388:	70 93 c5 00 	sts	0x00C5, r23	; 0x8000c5 <__DATA_REGION_ORIGIN__+0x65>
 38c:	60 93 c4 00 	sts	0x00C4, r22	; 0x8000c4 <__DATA_REGION_ORIGIN__+0x64>
 390:	08 95       	ret

00000392 <_Z10usart_sendc>:
}

//Send character 
void usart_send(char character){
	//wait till register is empty 
	while (~UCSR0A & (1 << UDRE0));
 392:	e0 ec       	ldi	r30, 0xC0	; 192
 394:	f0 e0       	ldi	r31, 0x00	; 0
 396:	90 81       	ld	r25, Z
 398:	95 ff       	sbrs	r25, 5
 39a:	fd cf       	rjmp	.-6      	; 0x396 <_Z10usart_sendc+0x4>
	UDR0 = character;
 39c:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
 3a0:	08 95       	ret

000003a2 <__subsf3>:
 3a2:	50 58       	subi	r21, 0x80	; 128

000003a4 <__addsf3>:
 3a4:	bb 27       	eor	r27, r27
 3a6:	aa 27       	eor	r26, r26
 3a8:	0e 94 e9 01 	call	0x3d2	; 0x3d2 <__addsf3x>
 3ac:	0c 94 33 03 	jmp	0x666	; 0x666 <__fp_round>
 3b0:	0e 94 25 03 	call	0x64a	; 0x64a <__fp_pscA>
 3b4:	38 f0       	brcs	.+14     	; 0x3c4 <__addsf3+0x20>
 3b6:	0e 94 2c 03 	call	0x658	; 0x658 <__fp_pscB>
 3ba:	20 f0       	brcs	.+8      	; 0x3c4 <__addsf3+0x20>
 3bc:	39 f4       	brne	.+14     	; 0x3cc <__addsf3+0x28>
 3be:	9f 3f       	cpi	r25, 0xFF	; 255
 3c0:	19 f4       	brne	.+6      	; 0x3c8 <__addsf3+0x24>
 3c2:	26 f4       	brtc	.+8      	; 0x3cc <__addsf3+0x28>
 3c4:	0c 94 22 03 	jmp	0x644	; 0x644 <__fp_nan>
 3c8:	0e f4       	brtc	.+2      	; 0x3cc <__addsf3+0x28>
 3ca:	e0 95       	com	r30
 3cc:	e7 fb       	bst	r30, 7
 3ce:	0c 94 1c 03 	jmp	0x638	; 0x638 <__fp_inf>

000003d2 <__addsf3x>:
 3d2:	e9 2f       	mov	r30, r25
 3d4:	0e 94 44 03 	call	0x688	; 0x688 <__fp_split3>
 3d8:	58 f3       	brcs	.-42     	; 0x3b0 <__addsf3+0xc>
 3da:	ba 17       	cp	r27, r26
 3dc:	62 07       	cpc	r22, r18
 3de:	73 07       	cpc	r23, r19
 3e0:	84 07       	cpc	r24, r20
 3e2:	95 07       	cpc	r25, r21
 3e4:	20 f0       	brcs	.+8      	; 0x3ee <__addsf3x+0x1c>
 3e6:	79 f4       	brne	.+30     	; 0x406 <__LOCK_REGION_LENGTH__+0x6>
 3e8:	a6 f5       	brtc	.+104    	; 0x452 <__LOCK_REGION_LENGTH__+0x52>
 3ea:	0c 94 66 03 	jmp	0x6cc	; 0x6cc <__fp_zero>
 3ee:	0e f4       	brtc	.+2      	; 0x3f2 <__addsf3x+0x20>
 3f0:	e0 95       	com	r30
 3f2:	0b 2e       	mov	r0, r27
 3f4:	ba 2f       	mov	r27, r26
 3f6:	a0 2d       	mov	r26, r0
 3f8:	0b 01       	movw	r0, r22
 3fa:	b9 01       	movw	r22, r18
 3fc:	90 01       	movw	r18, r0
 3fe:	0c 01       	movw	r0, r24
 400:	ca 01       	movw	r24, r20
 402:	a0 01       	movw	r20, r0
 404:	11 24       	eor	r1, r1
 406:	ff 27       	eor	r31, r31
 408:	59 1b       	sub	r21, r25
 40a:	99 f0       	breq	.+38     	; 0x432 <__LOCK_REGION_LENGTH__+0x32>
 40c:	59 3f       	cpi	r21, 0xF9	; 249
 40e:	50 f4       	brcc	.+20     	; 0x424 <__LOCK_REGION_LENGTH__+0x24>
 410:	50 3e       	cpi	r21, 0xE0	; 224
 412:	68 f1       	brcs	.+90     	; 0x46e <__LOCK_REGION_LENGTH__+0x6e>
 414:	1a 16       	cp	r1, r26
 416:	f0 40       	sbci	r31, 0x00	; 0
 418:	a2 2f       	mov	r26, r18
 41a:	23 2f       	mov	r18, r19
 41c:	34 2f       	mov	r19, r20
 41e:	44 27       	eor	r20, r20
 420:	58 5f       	subi	r21, 0xF8	; 248
 422:	f3 cf       	rjmp	.-26     	; 0x40a <__LOCK_REGION_LENGTH__+0xa>
 424:	46 95       	lsr	r20
 426:	37 95       	ror	r19
 428:	27 95       	ror	r18
 42a:	a7 95       	ror	r26
 42c:	f0 40       	sbci	r31, 0x00	; 0
 42e:	53 95       	inc	r21
 430:	c9 f7       	brne	.-14     	; 0x424 <__LOCK_REGION_LENGTH__+0x24>
 432:	7e f4       	brtc	.+30     	; 0x452 <__LOCK_REGION_LENGTH__+0x52>
 434:	1f 16       	cp	r1, r31
 436:	ba 0b       	sbc	r27, r26
 438:	62 0b       	sbc	r22, r18
 43a:	73 0b       	sbc	r23, r19
 43c:	84 0b       	sbc	r24, r20
 43e:	ba f0       	brmi	.+46     	; 0x46e <__LOCK_REGION_LENGTH__+0x6e>
 440:	91 50       	subi	r25, 0x01	; 1
 442:	a1 f0       	breq	.+40     	; 0x46c <__LOCK_REGION_LENGTH__+0x6c>
 444:	ff 0f       	add	r31, r31
 446:	bb 1f       	adc	r27, r27
 448:	66 1f       	adc	r22, r22
 44a:	77 1f       	adc	r23, r23
 44c:	88 1f       	adc	r24, r24
 44e:	c2 f7       	brpl	.-16     	; 0x440 <__LOCK_REGION_LENGTH__+0x40>
 450:	0e c0       	rjmp	.+28     	; 0x46e <__LOCK_REGION_LENGTH__+0x6e>
 452:	ba 0f       	add	r27, r26
 454:	62 1f       	adc	r22, r18
 456:	73 1f       	adc	r23, r19
 458:	84 1f       	adc	r24, r20
 45a:	48 f4       	brcc	.+18     	; 0x46e <__LOCK_REGION_LENGTH__+0x6e>
 45c:	87 95       	ror	r24
 45e:	77 95       	ror	r23
 460:	67 95       	ror	r22
 462:	b7 95       	ror	r27
 464:	f7 95       	ror	r31
 466:	9e 3f       	cpi	r25, 0xFE	; 254
 468:	08 f0       	brcs	.+2      	; 0x46c <__LOCK_REGION_LENGTH__+0x6c>
 46a:	b0 cf       	rjmp	.-160    	; 0x3cc <__addsf3+0x28>
 46c:	93 95       	inc	r25
 46e:	88 0f       	add	r24, r24
 470:	08 f0       	brcs	.+2      	; 0x474 <__LOCK_REGION_LENGTH__+0x74>
 472:	99 27       	eor	r25, r25
 474:	ee 0f       	add	r30, r30
 476:	97 95       	ror	r25
 478:	87 95       	ror	r24
 47a:	08 95       	ret

0000047c <__divsf3>:
 47c:	0e 94 52 02 	call	0x4a4	; 0x4a4 <__divsf3x>
 480:	0c 94 33 03 	jmp	0x666	; 0x666 <__fp_round>
 484:	0e 94 2c 03 	call	0x658	; 0x658 <__fp_pscB>
 488:	58 f0       	brcs	.+22     	; 0x4a0 <__divsf3+0x24>
 48a:	0e 94 25 03 	call	0x64a	; 0x64a <__fp_pscA>
 48e:	40 f0       	brcs	.+16     	; 0x4a0 <__divsf3+0x24>
 490:	29 f4       	brne	.+10     	; 0x49c <__divsf3+0x20>
 492:	5f 3f       	cpi	r21, 0xFF	; 255
 494:	29 f0       	breq	.+10     	; 0x4a0 <__divsf3+0x24>
 496:	0c 94 1c 03 	jmp	0x638	; 0x638 <__fp_inf>
 49a:	51 11       	cpse	r21, r1
 49c:	0c 94 67 03 	jmp	0x6ce	; 0x6ce <__fp_szero>
 4a0:	0c 94 22 03 	jmp	0x644	; 0x644 <__fp_nan>

000004a4 <__divsf3x>:
 4a4:	0e 94 44 03 	call	0x688	; 0x688 <__fp_split3>
 4a8:	68 f3       	brcs	.-38     	; 0x484 <__divsf3+0x8>

000004aa <__divsf3_pse>:
 4aa:	99 23       	and	r25, r25
 4ac:	b1 f3       	breq	.-20     	; 0x49a <__divsf3+0x1e>
 4ae:	55 23       	and	r21, r21
 4b0:	91 f3       	breq	.-28     	; 0x496 <__divsf3+0x1a>
 4b2:	95 1b       	sub	r25, r21
 4b4:	55 0b       	sbc	r21, r21
 4b6:	bb 27       	eor	r27, r27
 4b8:	aa 27       	eor	r26, r26
 4ba:	62 17       	cp	r22, r18
 4bc:	73 07       	cpc	r23, r19
 4be:	84 07       	cpc	r24, r20
 4c0:	38 f0       	brcs	.+14     	; 0x4d0 <__divsf3_pse+0x26>
 4c2:	9f 5f       	subi	r25, 0xFF	; 255
 4c4:	5f 4f       	sbci	r21, 0xFF	; 255
 4c6:	22 0f       	add	r18, r18
 4c8:	33 1f       	adc	r19, r19
 4ca:	44 1f       	adc	r20, r20
 4cc:	aa 1f       	adc	r26, r26
 4ce:	a9 f3       	breq	.-22     	; 0x4ba <__divsf3_pse+0x10>
 4d0:	35 d0       	rcall	.+106    	; 0x53c <__divsf3_pse+0x92>
 4d2:	0e 2e       	mov	r0, r30
 4d4:	3a f0       	brmi	.+14     	; 0x4e4 <__divsf3_pse+0x3a>
 4d6:	e0 e8       	ldi	r30, 0x80	; 128
 4d8:	32 d0       	rcall	.+100    	; 0x53e <__divsf3_pse+0x94>
 4da:	91 50       	subi	r25, 0x01	; 1
 4dc:	50 40       	sbci	r21, 0x00	; 0
 4de:	e6 95       	lsr	r30
 4e0:	00 1c       	adc	r0, r0
 4e2:	ca f7       	brpl	.-14     	; 0x4d6 <__divsf3_pse+0x2c>
 4e4:	2b d0       	rcall	.+86     	; 0x53c <__divsf3_pse+0x92>
 4e6:	fe 2f       	mov	r31, r30
 4e8:	29 d0       	rcall	.+82     	; 0x53c <__divsf3_pse+0x92>
 4ea:	66 0f       	add	r22, r22
 4ec:	77 1f       	adc	r23, r23
 4ee:	88 1f       	adc	r24, r24
 4f0:	bb 1f       	adc	r27, r27
 4f2:	26 17       	cp	r18, r22
 4f4:	37 07       	cpc	r19, r23
 4f6:	48 07       	cpc	r20, r24
 4f8:	ab 07       	cpc	r26, r27
 4fa:	b0 e8       	ldi	r27, 0x80	; 128
 4fc:	09 f0       	breq	.+2      	; 0x500 <__divsf3_pse+0x56>
 4fe:	bb 0b       	sbc	r27, r27
 500:	80 2d       	mov	r24, r0
 502:	bf 01       	movw	r22, r30
 504:	ff 27       	eor	r31, r31
 506:	93 58       	subi	r25, 0x83	; 131
 508:	5f 4f       	sbci	r21, 0xFF	; 255
 50a:	3a f0       	brmi	.+14     	; 0x51a <__divsf3_pse+0x70>
 50c:	9e 3f       	cpi	r25, 0xFE	; 254
 50e:	51 05       	cpc	r21, r1
 510:	78 f0       	brcs	.+30     	; 0x530 <__divsf3_pse+0x86>
 512:	0c 94 1c 03 	jmp	0x638	; 0x638 <__fp_inf>
 516:	0c 94 67 03 	jmp	0x6ce	; 0x6ce <__fp_szero>
 51a:	5f 3f       	cpi	r21, 0xFF	; 255
 51c:	e4 f3       	brlt	.-8      	; 0x516 <__divsf3_pse+0x6c>
 51e:	98 3e       	cpi	r25, 0xE8	; 232
 520:	d4 f3       	brlt	.-12     	; 0x516 <__divsf3_pse+0x6c>
 522:	86 95       	lsr	r24
 524:	77 95       	ror	r23
 526:	67 95       	ror	r22
 528:	b7 95       	ror	r27
 52a:	f7 95       	ror	r31
 52c:	9f 5f       	subi	r25, 0xFF	; 255
 52e:	c9 f7       	brne	.-14     	; 0x522 <__divsf3_pse+0x78>
 530:	88 0f       	add	r24, r24
 532:	91 1d       	adc	r25, r1
 534:	96 95       	lsr	r25
 536:	87 95       	ror	r24
 538:	97 f9       	bld	r25, 7
 53a:	08 95       	ret
 53c:	e1 e0       	ldi	r30, 0x01	; 1
 53e:	66 0f       	add	r22, r22
 540:	77 1f       	adc	r23, r23
 542:	88 1f       	adc	r24, r24
 544:	bb 1f       	adc	r27, r27
 546:	62 17       	cp	r22, r18
 548:	73 07       	cpc	r23, r19
 54a:	84 07       	cpc	r24, r20
 54c:	ba 07       	cpc	r27, r26
 54e:	20 f0       	brcs	.+8      	; 0x558 <__divsf3_pse+0xae>
 550:	62 1b       	sub	r22, r18
 552:	73 0b       	sbc	r23, r19
 554:	84 0b       	sbc	r24, r20
 556:	ba 0b       	sbc	r27, r26
 558:	ee 1f       	adc	r30, r30
 55a:	88 f7       	brcc	.-30     	; 0x53e <__divsf3_pse+0x94>
 55c:	e0 95       	com	r30
 55e:	08 95       	ret

00000560 <__fixunssfsi>:
 560:	0e 94 4c 03 	call	0x698	; 0x698 <__fp_splitA>
 564:	88 f0       	brcs	.+34     	; 0x588 <__fixunssfsi+0x28>
 566:	9f 57       	subi	r25, 0x7F	; 127
 568:	98 f0       	brcs	.+38     	; 0x590 <__fixunssfsi+0x30>
 56a:	b9 2f       	mov	r27, r25
 56c:	99 27       	eor	r25, r25
 56e:	b7 51       	subi	r27, 0x17	; 23
 570:	b0 f0       	brcs	.+44     	; 0x59e <__fixunssfsi+0x3e>
 572:	e1 f0       	breq	.+56     	; 0x5ac <__fixunssfsi+0x4c>
 574:	66 0f       	add	r22, r22
 576:	77 1f       	adc	r23, r23
 578:	88 1f       	adc	r24, r24
 57a:	99 1f       	adc	r25, r25
 57c:	1a f0       	brmi	.+6      	; 0x584 <__fixunssfsi+0x24>
 57e:	ba 95       	dec	r27
 580:	c9 f7       	brne	.-14     	; 0x574 <__fixunssfsi+0x14>
 582:	14 c0       	rjmp	.+40     	; 0x5ac <__fixunssfsi+0x4c>
 584:	b1 30       	cpi	r27, 0x01	; 1
 586:	91 f0       	breq	.+36     	; 0x5ac <__fixunssfsi+0x4c>
 588:	0e 94 66 03 	call	0x6cc	; 0x6cc <__fp_zero>
 58c:	b1 e0       	ldi	r27, 0x01	; 1
 58e:	08 95       	ret
 590:	0c 94 66 03 	jmp	0x6cc	; 0x6cc <__fp_zero>
 594:	67 2f       	mov	r22, r23
 596:	78 2f       	mov	r23, r24
 598:	88 27       	eor	r24, r24
 59a:	b8 5f       	subi	r27, 0xF8	; 248
 59c:	39 f0       	breq	.+14     	; 0x5ac <__fixunssfsi+0x4c>
 59e:	b9 3f       	cpi	r27, 0xF9	; 249
 5a0:	cc f3       	brlt	.-14     	; 0x594 <__fixunssfsi+0x34>
 5a2:	86 95       	lsr	r24
 5a4:	77 95       	ror	r23
 5a6:	67 95       	ror	r22
 5a8:	b3 95       	inc	r27
 5aa:	d9 f7       	brne	.-10     	; 0x5a2 <__fixunssfsi+0x42>
 5ac:	3e f4       	brtc	.+14     	; 0x5bc <__fixunssfsi+0x5c>
 5ae:	90 95       	com	r25
 5b0:	80 95       	com	r24
 5b2:	70 95       	com	r23
 5b4:	61 95       	neg	r22
 5b6:	7f 4f       	sbci	r23, 0xFF	; 255
 5b8:	8f 4f       	sbci	r24, 0xFF	; 255
 5ba:	9f 4f       	sbci	r25, 0xFF	; 255
 5bc:	08 95       	ret

000005be <__floatunsisf>:
 5be:	e8 94       	clt
 5c0:	09 c0       	rjmp	.+18     	; 0x5d4 <__floatsisf+0x12>

000005c2 <__floatsisf>:
 5c2:	97 fb       	bst	r25, 7
 5c4:	3e f4       	brtc	.+14     	; 0x5d4 <__floatsisf+0x12>
 5c6:	90 95       	com	r25
 5c8:	80 95       	com	r24
 5ca:	70 95       	com	r23
 5cc:	61 95       	neg	r22
 5ce:	7f 4f       	sbci	r23, 0xFF	; 255
 5d0:	8f 4f       	sbci	r24, 0xFF	; 255
 5d2:	9f 4f       	sbci	r25, 0xFF	; 255
 5d4:	99 23       	and	r25, r25
 5d6:	a9 f0       	breq	.+42     	; 0x602 <__floatsisf+0x40>
 5d8:	f9 2f       	mov	r31, r25
 5da:	96 e9       	ldi	r25, 0x96	; 150
 5dc:	bb 27       	eor	r27, r27
 5de:	93 95       	inc	r25
 5e0:	f6 95       	lsr	r31
 5e2:	87 95       	ror	r24
 5e4:	77 95       	ror	r23
 5e6:	67 95       	ror	r22
 5e8:	b7 95       	ror	r27
 5ea:	f1 11       	cpse	r31, r1
 5ec:	f8 cf       	rjmp	.-16     	; 0x5de <__floatsisf+0x1c>
 5ee:	fa f4       	brpl	.+62     	; 0x62e <__floatsisf+0x6c>
 5f0:	bb 0f       	add	r27, r27
 5f2:	11 f4       	brne	.+4      	; 0x5f8 <__floatsisf+0x36>
 5f4:	60 ff       	sbrs	r22, 0
 5f6:	1b c0       	rjmp	.+54     	; 0x62e <__floatsisf+0x6c>
 5f8:	6f 5f       	subi	r22, 0xFF	; 255
 5fa:	7f 4f       	sbci	r23, 0xFF	; 255
 5fc:	8f 4f       	sbci	r24, 0xFF	; 255
 5fe:	9f 4f       	sbci	r25, 0xFF	; 255
 600:	16 c0       	rjmp	.+44     	; 0x62e <__floatsisf+0x6c>
 602:	88 23       	and	r24, r24
 604:	11 f0       	breq	.+4      	; 0x60a <__floatsisf+0x48>
 606:	96 e9       	ldi	r25, 0x96	; 150
 608:	11 c0       	rjmp	.+34     	; 0x62c <__floatsisf+0x6a>
 60a:	77 23       	and	r23, r23
 60c:	21 f0       	breq	.+8      	; 0x616 <__floatsisf+0x54>
 60e:	9e e8       	ldi	r25, 0x8E	; 142
 610:	87 2f       	mov	r24, r23
 612:	76 2f       	mov	r23, r22
 614:	05 c0       	rjmp	.+10     	; 0x620 <__floatsisf+0x5e>
 616:	66 23       	and	r22, r22
 618:	71 f0       	breq	.+28     	; 0x636 <__floatsisf+0x74>
 61a:	96 e8       	ldi	r25, 0x86	; 134
 61c:	86 2f       	mov	r24, r22
 61e:	70 e0       	ldi	r23, 0x00	; 0
 620:	60 e0       	ldi	r22, 0x00	; 0
 622:	2a f0       	brmi	.+10     	; 0x62e <__floatsisf+0x6c>
 624:	9a 95       	dec	r25
 626:	66 0f       	add	r22, r22
 628:	77 1f       	adc	r23, r23
 62a:	88 1f       	adc	r24, r24
 62c:	da f7       	brpl	.-10     	; 0x624 <__floatsisf+0x62>
 62e:	88 0f       	add	r24, r24
 630:	96 95       	lsr	r25
 632:	87 95       	ror	r24
 634:	97 f9       	bld	r25, 7
 636:	08 95       	ret

00000638 <__fp_inf>:
 638:	97 f9       	bld	r25, 7
 63a:	9f 67       	ori	r25, 0x7F	; 127
 63c:	80 e8       	ldi	r24, 0x80	; 128
 63e:	70 e0       	ldi	r23, 0x00	; 0
 640:	60 e0       	ldi	r22, 0x00	; 0
 642:	08 95       	ret

00000644 <__fp_nan>:
 644:	9f ef       	ldi	r25, 0xFF	; 255
 646:	80 ec       	ldi	r24, 0xC0	; 192
 648:	08 95       	ret

0000064a <__fp_pscA>:
 64a:	00 24       	eor	r0, r0
 64c:	0a 94       	dec	r0
 64e:	16 16       	cp	r1, r22
 650:	17 06       	cpc	r1, r23
 652:	18 06       	cpc	r1, r24
 654:	09 06       	cpc	r0, r25
 656:	08 95       	ret

00000658 <__fp_pscB>:
 658:	00 24       	eor	r0, r0
 65a:	0a 94       	dec	r0
 65c:	12 16       	cp	r1, r18
 65e:	13 06       	cpc	r1, r19
 660:	14 06       	cpc	r1, r20
 662:	05 06       	cpc	r0, r21
 664:	08 95       	ret

00000666 <__fp_round>:
 666:	09 2e       	mov	r0, r25
 668:	03 94       	inc	r0
 66a:	00 0c       	add	r0, r0
 66c:	11 f4       	brne	.+4      	; 0x672 <__fp_round+0xc>
 66e:	88 23       	and	r24, r24
 670:	52 f0       	brmi	.+20     	; 0x686 <__fp_round+0x20>
 672:	bb 0f       	add	r27, r27
 674:	40 f4       	brcc	.+16     	; 0x686 <__fp_round+0x20>
 676:	bf 2b       	or	r27, r31
 678:	11 f4       	brne	.+4      	; 0x67e <__fp_round+0x18>
 67a:	60 ff       	sbrs	r22, 0
 67c:	04 c0       	rjmp	.+8      	; 0x686 <__fp_round+0x20>
 67e:	6f 5f       	subi	r22, 0xFF	; 255
 680:	7f 4f       	sbci	r23, 0xFF	; 255
 682:	8f 4f       	sbci	r24, 0xFF	; 255
 684:	9f 4f       	sbci	r25, 0xFF	; 255
 686:	08 95       	ret

00000688 <__fp_split3>:
 688:	57 fd       	sbrc	r21, 7
 68a:	90 58       	subi	r25, 0x80	; 128
 68c:	44 0f       	add	r20, r20
 68e:	55 1f       	adc	r21, r21
 690:	59 f0       	breq	.+22     	; 0x6a8 <__fp_splitA+0x10>
 692:	5f 3f       	cpi	r21, 0xFF	; 255
 694:	71 f0       	breq	.+28     	; 0x6b2 <__fp_splitA+0x1a>
 696:	47 95       	ror	r20

00000698 <__fp_splitA>:
 698:	88 0f       	add	r24, r24
 69a:	97 fb       	bst	r25, 7
 69c:	99 1f       	adc	r25, r25
 69e:	61 f0       	breq	.+24     	; 0x6b8 <__fp_splitA+0x20>
 6a0:	9f 3f       	cpi	r25, 0xFF	; 255
 6a2:	79 f0       	breq	.+30     	; 0x6c2 <__fp_splitA+0x2a>
 6a4:	87 95       	ror	r24
 6a6:	08 95       	ret
 6a8:	12 16       	cp	r1, r18
 6aa:	13 06       	cpc	r1, r19
 6ac:	14 06       	cpc	r1, r20
 6ae:	55 1f       	adc	r21, r21
 6b0:	f2 cf       	rjmp	.-28     	; 0x696 <__fp_split3+0xe>
 6b2:	46 95       	lsr	r20
 6b4:	f1 df       	rcall	.-30     	; 0x698 <__fp_splitA>
 6b6:	08 c0       	rjmp	.+16     	; 0x6c8 <__fp_splitA+0x30>
 6b8:	16 16       	cp	r1, r22
 6ba:	17 06       	cpc	r1, r23
 6bc:	18 06       	cpc	r1, r24
 6be:	99 1f       	adc	r25, r25
 6c0:	f1 cf       	rjmp	.-30     	; 0x6a4 <__fp_splitA+0xc>
 6c2:	86 95       	lsr	r24
 6c4:	71 05       	cpc	r23, r1
 6c6:	61 05       	cpc	r22, r1
 6c8:	08 94       	sec
 6ca:	08 95       	ret

000006cc <__fp_zero>:
 6cc:	e8 94       	clt

000006ce <__fp_szero>:
 6ce:	bb 27       	eor	r27, r27
 6d0:	66 27       	eor	r22, r22
 6d2:	77 27       	eor	r23, r23
 6d4:	cb 01       	movw	r24, r22
 6d6:	97 f9       	bld	r25, 7
 6d8:	08 95       	ret

000006da <__mulsf3>:
 6da:	0e 94 80 03 	call	0x700	; 0x700 <__mulsf3x>
 6de:	0c 94 33 03 	jmp	0x666	; 0x666 <__fp_round>
 6e2:	0e 94 25 03 	call	0x64a	; 0x64a <__fp_pscA>
 6e6:	38 f0       	brcs	.+14     	; 0x6f6 <__mulsf3+0x1c>
 6e8:	0e 94 2c 03 	call	0x658	; 0x658 <__fp_pscB>
 6ec:	20 f0       	brcs	.+8      	; 0x6f6 <__mulsf3+0x1c>
 6ee:	95 23       	and	r25, r21
 6f0:	11 f0       	breq	.+4      	; 0x6f6 <__mulsf3+0x1c>
 6f2:	0c 94 1c 03 	jmp	0x638	; 0x638 <__fp_inf>
 6f6:	0c 94 22 03 	jmp	0x644	; 0x644 <__fp_nan>
 6fa:	11 24       	eor	r1, r1
 6fc:	0c 94 67 03 	jmp	0x6ce	; 0x6ce <__fp_szero>

00000700 <__mulsf3x>:
 700:	0e 94 44 03 	call	0x688	; 0x688 <__fp_split3>
 704:	70 f3       	brcs	.-36     	; 0x6e2 <__mulsf3+0x8>

00000706 <__mulsf3_pse>:
 706:	95 9f       	mul	r25, r21
 708:	c1 f3       	breq	.-16     	; 0x6fa <__mulsf3+0x20>
 70a:	95 0f       	add	r25, r21
 70c:	50 e0       	ldi	r21, 0x00	; 0
 70e:	55 1f       	adc	r21, r21
 710:	62 9f       	mul	r22, r18
 712:	f0 01       	movw	r30, r0
 714:	72 9f       	mul	r23, r18
 716:	bb 27       	eor	r27, r27
 718:	f0 0d       	add	r31, r0
 71a:	b1 1d       	adc	r27, r1
 71c:	63 9f       	mul	r22, r19
 71e:	aa 27       	eor	r26, r26
 720:	f0 0d       	add	r31, r0
 722:	b1 1d       	adc	r27, r1
 724:	aa 1f       	adc	r26, r26
 726:	64 9f       	mul	r22, r20
 728:	66 27       	eor	r22, r22
 72a:	b0 0d       	add	r27, r0
 72c:	a1 1d       	adc	r26, r1
 72e:	66 1f       	adc	r22, r22
 730:	82 9f       	mul	r24, r18
 732:	22 27       	eor	r18, r18
 734:	b0 0d       	add	r27, r0
 736:	a1 1d       	adc	r26, r1
 738:	62 1f       	adc	r22, r18
 73a:	73 9f       	mul	r23, r19
 73c:	b0 0d       	add	r27, r0
 73e:	a1 1d       	adc	r26, r1
 740:	62 1f       	adc	r22, r18
 742:	83 9f       	mul	r24, r19
 744:	a0 0d       	add	r26, r0
 746:	61 1d       	adc	r22, r1
 748:	22 1f       	adc	r18, r18
 74a:	74 9f       	mul	r23, r20
 74c:	33 27       	eor	r19, r19
 74e:	a0 0d       	add	r26, r0
 750:	61 1d       	adc	r22, r1
 752:	23 1f       	adc	r18, r19
 754:	84 9f       	mul	r24, r20
 756:	60 0d       	add	r22, r0
 758:	21 1d       	adc	r18, r1
 75a:	82 2f       	mov	r24, r18
 75c:	76 2f       	mov	r23, r22
 75e:	6a 2f       	mov	r22, r26
 760:	11 24       	eor	r1, r1
 762:	9f 57       	subi	r25, 0x7F	; 127
 764:	50 40       	sbci	r21, 0x00	; 0
 766:	9a f0       	brmi	.+38     	; 0x78e <__mulsf3_pse+0x88>
 768:	f1 f0       	breq	.+60     	; 0x7a6 <__mulsf3_pse+0xa0>
 76a:	88 23       	and	r24, r24
 76c:	4a f0       	brmi	.+18     	; 0x780 <__mulsf3_pse+0x7a>
 76e:	ee 0f       	add	r30, r30
 770:	ff 1f       	adc	r31, r31
 772:	bb 1f       	adc	r27, r27
 774:	66 1f       	adc	r22, r22
 776:	77 1f       	adc	r23, r23
 778:	88 1f       	adc	r24, r24
 77a:	91 50       	subi	r25, 0x01	; 1
 77c:	50 40       	sbci	r21, 0x00	; 0
 77e:	a9 f7       	brne	.-22     	; 0x76a <__mulsf3_pse+0x64>
 780:	9e 3f       	cpi	r25, 0xFE	; 254
 782:	51 05       	cpc	r21, r1
 784:	80 f0       	brcs	.+32     	; 0x7a6 <__mulsf3_pse+0xa0>
 786:	0c 94 1c 03 	jmp	0x638	; 0x638 <__fp_inf>
 78a:	0c 94 67 03 	jmp	0x6ce	; 0x6ce <__fp_szero>
 78e:	5f 3f       	cpi	r21, 0xFF	; 255
 790:	e4 f3       	brlt	.-8      	; 0x78a <__mulsf3_pse+0x84>
 792:	98 3e       	cpi	r25, 0xE8	; 232
 794:	d4 f3       	brlt	.-12     	; 0x78a <__mulsf3_pse+0x84>
 796:	86 95       	lsr	r24
 798:	77 95       	ror	r23
 79a:	67 95       	ror	r22
 79c:	b7 95       	ror	r27
 79e:	f7 95       	ror	r31
 7a0:	e7 95       	ror	r30
 7a2:	9f 5f       	subi	r25, 0xFF	; 255
 7a4:	c1 f7       	brne	.-16     	; 0x796 <__mulsf3_pse+0x90>
 7a6:	fe 2b       	or	r31, r30
 7a8:	88 0f       	add	r24, r24
 7aa:	91 1d       	adc	r25, r1
 7ac:	96 95       	lsr	r25
 7ae:	87 95       	ror	r24
 7b0:	97 f9       	bld	r25, 7
 7b2:	08 95       	ret

000007b4 <malloc>:
 7b4:	0f 93       	push	r16
 7b6:	1f 93       	push	r17
 7b8:	cf 93       	push	r28
 7ba:	df 93       	push	r29
 7bc:	82 30       	cpi	r24, 0x02	; 2
 7be:	91 05       	cpc	r25, r1
 7c0:	10 f4       	brcc	.+4      	; 0x7c6 <malloc+0x12>
 7c2:	82 e0       	ldi	r24, 0x02	; 2
 7c4:	90 e0       	ldi	r25, 0x00	; 0
 7c6:	e0 91 1a 01 	lds	r30, 0x011A	; 0x80011a <__flp>
 7ca:	f0 91 1b 01 	lds	r31, 0x011B	; 0x80011b <__flp+0x1>
 7ce:	20 e0       	ldi	r18, 0x00	; 0
 7d0:	30 e0       	ldi	r19, 0x00	; 0
 7d2:	a0 e0       	ldi	r26, 0x00	; 0
 7d4:	b0 e0       	ldi	r27, 0x00	; 0
 7d6:	30 97       	sbiw	r30, 0x00	; 0
 7d8:	19 f1       	breq	.+70     	; 0x820 <malloc+0x6c>
 7da:	40 81       	ld	r20, Z
 7dc:	51 81       	ldd	r21, Z+1	; 0x01
 7de:	02 81       	ldd	r16, Z+2	; 0x02
 7e0:	13 81       	ldd	r17, Z+3	; 0x03
 7e2:	48 17       	cp	r20, r24
 7e4:	59 07       	cpc	r21, r25
 7e6:	c8 f0       	brcs	.+50     	; 0x81a <malloc+0x66>
 7e8:	84 17       	cp	r24, r20
 7ea:	95 07       	cpc	r25, r21
 7ec:	69 f4       	brne	.+26     	; 0x808 <malloc+0x54>
 7ee:	10 97       	sbiw	r26, 0x00	; 0
 7f0:	31 f0       	breq	.+12     	; 0x7fe <malloc+0x4a>
 7f2:	12 96       	adiw	r26, 0x02	; 2
 7f4:	0c 93       	st	X, r16
 7f6:	12 97       	sbiw	r26, 0x02	; 2
 7f8:	13 96       	adiw	r26, 0x03	; 3
 7fa:	1c 93       	st	X, r17
 7fc:	27 c0       	rjmp	.+78     	; 0x84c <malloc+0x98>
 7fe:	00 93 1a 01 	sts	0x011A, r16	; 0x80011a <__flp>
 802:	10 93 1b 01 	sts	0x011B, r17	; 0x80011b <__flp+0x1>
 806:	22 c0       	rjmp	.+68     	; 0x84c <malloc+0x98>
 808:	21 15       	cp	r18, r1
 80a:	31 05       	cpc	r19, r1
 80c:	19 f0       	breq	.+6      	; 0x814 <malloc+0x60>
 80e:	42 17       	cp	r20, r18
 810:	53 07       	cpc	r21, r19
 812:	18 f4       	brcc	.+6      	; 0x81a <malloc+0x66>
 814:	9a 01       	movw	r18, r20
 816:	bd 01       	movw	r22, r26
 818:	ef 01       	movw	r28, r30
 81a:	df 01       	movw	r26, r30
 81c:	f8 01       	movw	r30, r16
 81e:	db cf       	rjmp	.-74     	; 0x7d6 <malloc+0x22>
 820:	21 15       	cp	r18, r1
 822:	31 05       	cpc	r19, r1
 824:	f9 f0       	breq	.+62     	; 0x864 <malloc+0xb0>
 826:	28 1b       	sub	r18, r24
 828:	39 0b       	sbc	r19, r25
 82a:	24 30       	cpi	r18, 0x04	; 4
 82c:	31 05       	cpc	r19, r1
 82e:	80 f4       	brcc	.+32     	; 0x850 <malloc+0x9c>
 830:	8a 81       	ldd	r24, Y+2	; 0x02
 832:	9b 81       	ldd	r25, Y+3	; 0x03
 834:	61 15       	cp	r22, r1
 836:	71 05       	cpc	r23, r1
 838:	21 f0       	breq	.+8      	; 0x842 <malloc+0x8e>
 83a:	fb 01       	movw	r30, r22
 83c:	93 83       	std	Z+3, r25	; 0x03
 83e:	82 83       	std	Z+2, r24	; 0x02
 840:	04 c0       	rjmp	.+8      	; 0x84a <malloc+0x96>
 842:	90 93 1b 01 	sts	0x011B, r25	; 0x80011b <__flp+0x1>
 846:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <__flp>
 84a:	fe 01       	movw	r30, r28
 84c:	32 96       	adiw	r30, 0x02	; 2
 84e:	44 c0       	rjmp	.+136    	; 0x8d8 <malloc+0x124>
 850:	fe 01       	movw	r30, r28
 852:	e2 0f       	add	r30, r18
 854:	f3 1f       	adc	r31, r19
 856:	81 93       	st	Z+, r24
 858:	91 93       	st	Z+, r25
 85a:	22 50       	subi	r18, 0x02	; 2
 85c:	31 09       	sbc	r19, r1
 85e:	39 83       	std	Y+1, r19	; 0x01
 860:	28 83       	st	Y, r18
 862:	3a c0       	rjmp	.+116    	; 0x8d8 <malloc+0x124>
 864:	20 91 18 01 	lds	r18, 0x0118	; 0x800118 <__brkval>
 868:	30 91 19 01 	lds	r19, 0x0119	; 0x800119 <__brkval+0x1>
 86c:	23 2b       	or	r18, r19
 86e:	41 f4       	brne	.+16     	; 0x880 <malloc+0xcc>
 870:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
 874:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
 878:	30 93 19 01 	sts	0x0119, r19	; 0x800119 <__brkval+0x1>
 87c:	20 93 18 01 	sts	0x0118, r18	; 0x800118 <__brkval>
 880:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
 884:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
 888:	21 15       	cp	r18, r1
 88a:	31 05       	cpc	r19, r1
 88c:	41 f4       	brne	.+16     	; 0x89e <malloc+0xea>
 88e:	2d b7       	in	r18, 0x3d	; 61
 890:	3e b7       	in	r19, 0x3e	; 62
 892:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
 896:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
 89a:	24 1b       	sub	r18, r20
 89c:	35 0b       	sbc	r19, r21
 89e:	e0 91 18 01 	lds	r30, 0x0118	; 0x800118 <__brkval>
 8a2:	f0 91 19 01 	lds	r31, 0x0119	; 0x800119 <__brkval+0x1>
 8a6:	e2 17       	cp	r30, r18
 8a8:	f3 07       	cpc	r31, r19
 8aa:	a0 f4       	brcc	.+40     	; 0x8d4 <malloc+0x120>
 8ac:	2e 1b       	sub	r18, r30
 8ae:	3f 0b       	sbc	r19, r31
 8b0:	28 17       	cp	r18, r24
 8b2:	39 07       	cpc	r19, r25
 8b4:	78 f0       	brcs	.+30     	; 0x8d4 <malloc+0x120>
 8b6:	ac 01       	movw	r20, r24
 8b8:	4e 5f       	subi	r20, 0xFE	; 254
 8ba:	5f 4f       	sbci	r21, 0xFF	; 255
 8bc:	24 17       	cp	r18, r20
 8be:	35 07       	cpc	r19, r21
 8c0:	48 f0       	brcs	.+18     	; 0x8d4 <malloc+0x120>
 8c2:	4e 0f       	add	r20, r30
 8c4:	5f 1f       	adc	r21, r31
 8c6:	50 93 19 01 	sts	0x0119, r21	; 0x800119 <__brkval+0x1>
 8ca:	40 93 18 01 	sts	0x0118, r20	; 0x800118 <__brkval>
 8ce:	81 93       	st	Z+, r24
 8d0:	91 93       	st	Z+, r25
 8d2:	02 c0       	rjmp	.+4      	; 0x8d8 <malloc+0x124>
 8d4:	e0 e0       	ldi	r30, 0x00	; 0
 8d6:	f0 e0       	ldi	r31, 0x00	; 0
 8d8:	cf 01       	movw	r24, r30
 8da:	df 91       	pop	r29
 8dc:	cf 91       	pop	r28
 8de:	1f 91       	pop	r17
 8e0:	0f 91       	pop	r16
 8e2:	08 95       	ret

000008e4 <free>:
 8e4:	cf 93       	push	r28
 8e6:	df 93       	push	r29
 8e8:	00 97       	sbiw	r24, 0x00	; 0
 8ea:	09 f4       	brne	.+2      	; 0x8ee <free+0xa>
 8ec:	81 c0       	rjmp	.+258    	; 0x9f0 <__stack+0xf1>
 8ee:	fc 01       	movw	r30, r24
 8f0:	32 97       	sbiw	r30, 0x02	; 2
 8f2:	13 82       	std	Z+3, r1	; 0x03
 8f4:	12 82       	std	Z+2, r1	; 0x02
 8f6:	a0 91 1a 01 	lds	r26, 0x011A	; 0x80011a <__flp>
 8fa:	b0 91 1b 01 	lds	r27, 0x011B	; 0x80011b <__flp+0x1>
 8fe:	10 97       	sbiw	r26, 0x00	; 0
 900:	81 f4       	brne	.+32     	; 0x922 <__stack+0x23>
 902:	20 81       	ld	r18, Z
 904:	31 81       	ldd	r19, Z+1	; 0x01
 906:	82 0f       	add	r24, r18
 908:	93 1f       	adc	r25, r19
 90a:	20 91 18 01 	lds	r18, 0x0118	; 0x800118 <__brkval>
 90e:	30 91 19 01 	lds	r19, 0x0119	; 0x800119 <__brkval+0x1>
 912:	28 17       	cp	r18, r24
 914:	39 07       	cpc	r19, r25
 916:	51 f5       	brne	.+84     	; 0x96c <__stack+0x6d>
 918:	f0 93 19 01 	sts	0x0119, r31	; 0x800119 <__brkval+0x1>
 91c:	e0 93 18 01 	sts	0x0118, r30	; 0x800118 <__brkval>
 920:	67 c0       	rjmp	.+206    	; 0x9f0 <__stack+0xf1>
 922:	ed 01       	movw	r28, r26
 924:	20 e0       	ldi	r18, 0x00	; 0
 926:	30 e0       	ldi	r19, 0x00	; 0
 928:	ce 17       	cp	r28, r30
 92a:	df 07       	cpc	r29, r31
 92c:	40 f4       	brcc	.+16     	; 0x93e <__stack+0x3f>
 92e:	4a 81       	ldd	r20, Y+2	; 0x02
 930:	5b 81       	ldd	r21, Y+3	; 0x03
 932:	9e 01       	movw	r18, r28
 934:	41 15       	cp	r20, r1
 936:	51 05       	cpc	r21, r1
 938:	f1 f0       	breq	.+60     	; 0x976 <__stack+0x77>
 93a:	ea 01       	movw	r28, r20
 93c:	f5 cf       	rjmp	.-22     	; 0x928 <__stack+0x29>
 93e:	d3 83       	std	Z+3, r29	; 0x03
 940:	c2 83       	std	Z+2, r28	; 0x02
 942:	40 81       	ld	r20, Z
 944:	51 81       	ldd	r21, Z+1	; 0x01
 946:	84 0f       	add	r24, r20
 948:	95 1f       	adc	r25, r21
 94a:	c8 17       	cp	r28, r24
 94c:	d9 07       	cpc	r29, r25
 94e:	59 f4       	brne	.+22     	; 0x966 <__stack+0x67>
 950:	88 81       	ld	r24, Y
 952:	99 81       	ldd	r25, Y+1	; 0x01
 954:	84 0f       	add	r24, r20
 956:	95 1f       	adc	r25, r21
 958:	02 96       	adiw	r24, 0x02	; 2
 95a:	91 83       	std	Z+1, r25	; 0x01
 95c:	80 83       	st	Z, r24
 95e:	8a 81       	ldd	r24, Y+2	; 0x02
 960:	9b 81       	ldd	r25, Y+3	; 0x03
 962:	93 83       	std	Z+3, r25	; 0x03
 964:	82 83       	std	Z+2, r24	; 0x02
 966:	21 15       	cp	r18, r1
 968:	31 05       	cpc	r19, r1
 96a:	29 f4       	brne	.+10     	; 0x976 <__stack+0x77>
 96c:	f0 93 1b 01 	sts	0x011B, r31	; 0x80011b <__flp+0x1>
 970:	e0 93 1a 01 	sts	0x011A, r30	; 0x80011a <__flp>
 974:	3d c0       	rjmp	.+122    	; 0x9f0 <__stack+0xf1>
 976:	e9 01       	movw	r28, r18
 978:	fb 83       	std	Y+3, r31	; 0x03
 97a:	ea 83       	std	Y+2, r30	; 0x02
 97c:	49 91       	ld	r20, Y+
 97e:	59 91       	ld	r21, Y+
 980:	c4 0f       	add	r28, r20
 982:	d5 1f       	adc	r29, r21
 984:	ec 17       	cp	r30, r28
 986:	fd 07       	cpc	r31, r29
 988:	61 f4       	brne	.+24     	; 0x9a2 <__stack+0xa3>
 98a:	80 81       	ld	r24, Z
 98c:	91 81       	ldd	r25, Z+1	; 0x01
 98e:	84 0f       	add	r24, r20
 990:	95 1f       	adc	r25, r21
 992:	02 96       	adiw	r24, 0x02	; 2
 994:	e9 01       	movw	r28, r18
 996:	99 83       	std	Y+1, r25	; 0x01
 998:	88 83       	st	Y, r24
 99a:	82 81       	ldd	r24, Z+2	; 0x02
 99c:	93 81       	ldd	r25, Z+3	; 0x03
 99e:	9b 83       	std	Y+3, r25	; 0x03
 9a0:	8a 83       	std	Y+2, r24	; 0x02
 9a2:	e0 e0       	ldi	r30, 0x00	; 0
 9a4:	f0 e0       	ldi	r31, 0x00	; 0
 9a6:	12 96       	adiw	r26, 0x02	; 2
 9a8:	8d 91       	ld	r24, X+
 9aa:	9c 91       	ld	r25, X
 9ac:	13 97       	sbiw	r26, 0x03	; 3
 9ae:	00 97       	sbiw	r24, 0x00	; 0
 9b0:	19 f0       	breq	.+6      	; 0x9b8 <__stack+0xb9>
 9b2:	fd 01       	movw	r30, r26
 9b4:	dc 01       	movw	r26, r24
 9b6:	f7 cf       	rjmp	.-18     	; 0x9a6 <__stack+0xa7>
 9b8:	8d 91       	ld	r24, X+
 9ba:	9c 91       	ld	r25, X
 9bc:	11 97       	sbiw	r26, 0x01	; 1
 9be:	9d 01       	movw	r18, r26
 9c0:	2e 5f       	subi	r18, 0xFE	; 254
 9c2:	3f 4f       	sbci	r19, 0xFF	; 255
 9c4:	82 0f       	add	r24, r18
 9c6:	93 1f       	adc	r25, r19
 9c8:	20 91 18 01 	lds	r18, 0x0118	; 0x800118 <__brkval>
 9cc:	30 91 19 01 	lds	r19, 0x0119	; 0x800119 <__brkval+0x1>
 9d0:	28 17       	cp	r18, r24
 9d2:	39 07       	cpc	r19, r25
 9d4:	69 f4       	brne	.+26     	; 0x9f0 <__stack+0xf1>
 9d6:	30 97       	sbiw	r30, 0x00	; 0
 9d8:	29 f4       	brne	.+10     	; 0x9e4 <__stack+0xe5>
 9da:	10 92 1b 01 	sts	0x011B, r1	; 0x80011b <__flp+0x1>
 9de:	10 92 1a 01 	sts	0x011A, r1	; 0x80011a <__flp>
 9e2:	02 c0       	rjmp	.+4      	; 0x9e8 <__stack+0xe9>
 9e4:	13 82       	std	Z+3, r1	; 0x03
 9e6:	12 82       	std	Z+2, r1	; 0x02
 9e8:	b0 93 19 01 	sts	0x0119, r27	; 0x800119 <__brkval+0x1>
 9ec:	a0 93 18 01 	sts	0x0118, r26	; 0x800118 <__brkval>
 9f0:	df 91       	pop	r29
 9f2:	cf 91       	pop	r28
 9f4:	08 95       	ret

000009f6 <_exit>:
 9f6:	f8 94       	cli

000009f8 <__stop_program>:
 9f8:	ff cf       	rjmp	.-2      	; 0x9f8 <__stop_program>
