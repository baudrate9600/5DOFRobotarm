
RobotArm.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000074  00800100  00001478  0000150c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001478  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000001a  00800174  00800174  00001580  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001580  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000015b0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001c0  00000000  00000000  000015f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002931  00000000  00000000  000017b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000fef  00000000  00000000  000040e1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000ddf  00000000  00000000  000050d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000524  00000000  00000000  00005eb0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000cea  00000000  00000000  000063d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000115e  00000000  00000000  000070be  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000188  00000000  00000000  0000821c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
       4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      2c:	0c 94 1c 06 	jmp	0xc38	; 0xc38 <__vector_11>
      30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      48:	0c 94 5d 00 	jmp	0xba	; 0xba <__vector_18>
      4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      50:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__vector_20>
      54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf ef       	ldi	r28, 0xFF	; 255
      6e:	d8 e0       	ldi	r29, 0x08	; 8
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
      74:	11 e0       	ldi	r17, 0x01	; 1
      76:	a0 e0       	ldi	r26, 0x00	; 0
      78:	b1 e0       	ldi	r27, 0x01	; 1
      7a:	e8 e7       	ldi	r30, 0x78	; 120
      7c:	f4 e1       	ldi	r31, 0x14	; 20
      7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
      80:	05 90       	lpm	r0, Z+
      82:	0d 92       	st	X+, r0
      84:	a4 37       	cpi	r26, 0x74	; 116
      86:	b1 07       	cpc	r27, r17
      88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
      8a:	21 e0       	ldi	r18, 0x01	; 1
      8c:	a4 e7       	ldi	r26, 0x74	; 116
      8e:	b1 e0       	ldi	r27, 0x01	; 1
      90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
      92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
      94:	ae 38       	cpi	r26, 0x8E	; 142
      96:	b2 07       	cpc	r27, r18
      98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
      9a:	0e 94 b5 00 	call	0x16a	; 0x16a <main>
      9e:	0c 94 3a 0a 	jmp	0x1474	; 0x1474 <_exit>

000000a2 <__bad_interrupt>:
      a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <__vector_20>:
		SERVO_REGISTER &= ~dir_a;
		SERVO_REGISTER |= dir_b;
		speed *= -1;
	}
	*pwm = speed;
}
      a6:	1f 92       	push	r1
      a8:	0f 92       	push	r0
      aa:	0f b6       	in	r0, 0x3f	; 63
      ac:	0f 92       	push	r0
      ae:	11 24       	eor	r1, r1
      b0:	0f 90       	pop	r0
      b2:	0f be       	out	0x3f, r0	; 63
      b4:	0f 90       	pop	r0
      b6:	1f 90       	pop	r1
      b8:	18 95       	reti

000000ba <__vector_18>:
      ba:	1f 92       	push	r1
      bc:	0f 92       	push	r0
      be:	0f b6       	in	r0, 0x3f	; 63
      c0:	0f 92       	push	r0
      c2:	11 24       	eor	r1, r1
      c4:	2f 93       	push	r18
      c6:	3f 93       	push	r19
      c8:	8f 93       	push	r24
      ca:	9f 93       	push	r25
      cc:	ef 93       	push	r30
      ce:	ff 93       	push	r31
      d0:	10 92 88 01 	sts	0x0188, r1	; 0x800188 <motor_status+0x12>
      d4:	10 92 87 01 	sts	0x0187, r1	; 0x800187 <motor_status+0x11>
      d8:	90 91 c6 00 	lds	r25, 0x00C6	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
      dc:	80 91 89 01 	lds	r24, 0x0189	; 0x800189 <parse_state>
      e0:	81 30       	cpi	r24, 0x01	; 1
      e2:	61 f0       	breq	.+24     	; 0xfc <__vector_18+0x42>
      e4:	28 f0       	brcs	.+10     	; 0xf0 <__vector_18+0x36>
      e6:	82 30       	cpi	r24, 0x02	; 2
      e8:	a9 f0       	breq	.+42     	; 0x114 <__vector_18+0x5a>
      ea:	83 30       	cpi	r24, 0x03	; 3
      ec:	89 f1       	breq	.+98     	; 0x150 <__vector_18+0x96>
      ee:	32 c0       	rjmp	.+100    	; 0x154 <__vector_18+0x9a>
      f0:	9d 34       	cpi	r25, 0x4D	; 77
      f2:	81 f5       	brne	.+96     	; 0x154 <__vector_18+0x9a>
      f4:	81 e0       	ldi	r24, 0x01	; 1
      f6:	80 93 89 01 	sts	0x0189, r24	; 0x800189 <parse_state>
      fa:	2c c0       	rjmp	.+88     	; 0x154 <__vector_18+0x9a>
      fc:	80 ed       	ldi	r24, 0xD0	; 208
      fe:	89 0f       	add	r24, r25
     100:	80 93 76 01 	sts	0x0176, r24	; 0x800176 <motor_status>
     104:	82 e0       	ldi	r24, 0x02	; 2
     106:	80 93 89 01 	sts	0x0189, r24	; 0x800189 <parse_state>
     10a:	10 92 75 01 	sts	0x0175, r1	; 0x800175 <__data_end+0x1>
     10e:	10 92 74 01 	sts	0x0174, r1	; 0x800174 <__data_end>
     112:	20 c0       	rjmp	.+64     	; 0x154 <__vector_18+0x9a>
     114:	20 91 74 01 	lds	r18, 0x0174	; 0x800174 <__data_end>
     118:	30 91 75 01 	lds	r19, 0x0175	; 0x800175 <__data_end+0x1>
     11c:	f9 01       	movw	r30, r18
     11e:	ee 0f       	add	r30, r30
     120:	ff 1f       	adc	r31, r31
     122:	ea 58       	subi	r30, 0x8A	; 138
     124:	fe 4f       	sbci	r31, 0xFE	; 254
     126:	89 2f       	mov	r24, r25
     128:	90 e0       	ldi	r25, 0x00	; 0
     12a:	92 83       	std	Z+2, r25	; 0x02
     12c:	81 83       	std	Z+1, r24	; 0x01
     12e:	c9 01       	movw	r24, r18
     130:	01 96       	adiw	r24, 0x01	; 1
     132:	90 93 75 01 	sts	0x0175, r25	; 0x800175 <__data_end+0x1>
     136:	80 93 74 01 	sts	0x0174, r24	; 0x800174 <__data_end>
     13a:	08 97       	sbiw	r24, 0x08	; 8
     13c:	59 f4       	brne	.+22     	; 0x154 <__vector_18+0x9a>
     13e:	10 92 89 01 	sts	0x0189, r1	; 0x800189 <parse_state>
     142:	81 e0       	ldi	r24, 0x01	; 1
     144:	90 e0       	ldi	r25, 0x00	; 0
     146:	90 93 88 01 	sts	0x0188, r25	; 0x800188 <motor_status+0x12>
     14a:	80 93 87 01 	sts	0x0187, r24	; 0x800187 <motor_status+0x11>
     14e:	02 c0       	rjmp	.+4      	; 0x154 <__vector_18+0x9a>
     150:	10 92 89 01 	sts	0x0189, r1	; 0x800189 <parse_state>
     154:	ff 91       	pop	r31
     156:	ef 91       	pop	r30
     158:	9f 91       	pop	r25
     15a:	8f 91       	pop	r24
     15c:	3f 91       	pop	r19
     15e:	2f 91       	pop	r18
     160:	0f 90       	pop	r0
     162:	0f be       	out	0x3f, r0	; 63
     164:	0f 90       	pop	r0
     166:	1f 90       	pop	r1
     168:	18 95       	reti

0000016a <main>:

/*some comment*/
int main(void)
{
     16a:	cf 93       	push	r28
     16c:	df 93       	push	r29
     16e:	cd b7       	in	r28, 0x3d	; 61
     170:	de b7       	in	r29, 0x3e	; 62
     172:	c5 58       	subi	r28, 0x85	; 133
     174:	d1 09       	sbc	r29, r1
     176:	0f b6       	in	r0, 0x3f	; 63
     178:	f8 94       	cli
     17a:	de bf       	out	0x3e, r29	; 62
     17c:	0f be       	out	0x3f, r0	; 63
     17e:	cd bf       	out	0x3d, r28	; 61

	
	/* initialize component */ 
	sei();
     180:	78 94       	sei
	timer_enable();	
     182:	0e 94 f0 05 	call	0xbe0	; 0xbe0 <_Z12timer_enablev>
	usart_enable(9600);
     186:	80 e8       	ldi	r24, 0x80	; 128
     188:	95 e2       	ldi	r25, 0x25	; 37
     18a:	0e 94 41 06 	call	0xc82	; 0xc82 <_Z12usart_enablej>
	/* Initialize motors */ 
	
    /* Replace with your application code */
	uint8_t tacho_values;
	uint8_t old_tacho_values;
	DDRD &= ~SERVO_TACHO_0_M;
     18e:	55 98       	cbi	0x0a, 5	; 10
	DDRD &= ~SERVO_TACHO_0_P; 
     190:	52 98       	cbi	0x0a, 2	; 10

	/* Initialize servo motors */
	DDRD |= SERVO_0_EN | SERVO_0_DIR_A | SERVO_0_DIR_B;
     192:	8a b1       	in	r24, 0x0a	; 10
     194:	88 6c       	ori	r24, 0xC8	; 200
     196:	8a b9       	out	0x0a, r24	; 10
	TCCR2A |= (1 << COM2B1 ) | (1 << WGM21) | (1 << WGM20); /*Fast PWM */
     198:	e0 eb       	ldi	r30, 0xB0	; 176
     19a:	f0 e0       	ldi	r31, 0x00	; 0
     19c:	80 81       	ld	r24, Z
     19e:	83 62       	ori	r24, 0x23	; 35
     1a0:	80 83       	st	Z, r24
	TCCR2B |= (1 << CS20); /*No prescaling */
     1a2:	e1 eb       	ldi	r30, 0xB1	; 177
     1a4:	f0 e0       	ldi	r31, 0x00	; 0
     1a6:	80 81       	ld	r24, Z
     1a8:	81 60       	ori	r24, 0x01	; 1
     1aa:	80 83       	st	Z, r24
	/* PID */
		
	DDRB |= M0_DIR | M0_STEP | M1_STEP | M1_DIR;
     1ac:	84 b1       	in	r24, 0x04	; 4
     1ae:	8f 60       	ori	r24, 0x0F	; 15
     1b0:	84 b9       	out	0x04, r24	; 4
	StepperMotor stepper0(0,0.043182,M0_DIR,M0_STEP);
     1b2:	ee 24       	eor	r14, r14
     1b4:	e3 94       	inc	r14
     1b6:	02 e0       	ldi	r16, 0x02	; 2
     1b8:	2c e9       	ldi	r18, 0x9C	; 156
     1ba:	3f ed       	ldi	r19, 0xDF	; 223
     1bc:	40 e3       	ldi	r20, 0x30	; 48
     1be:	5d e3       	ldi	r21, 0x3D	; 61
     1c0:	60 e0       	ldi	r22, 0x00	; 0
     1c2:	70 e0       	ldi	r23, 0x00	; 0
     1c4:	ce 01       	movw	r24, r28
     1c6:	01 96       	adiw	r24, 0x01	; 1
     1c8:	0e 94 09 03 	call	0x612	; 0x612 <_ZN12StepperMotorC1Eifhh>
	StepperMotor stepper1(0,0.2571426, M1_DIR,M1_STEP); 
     1cc:	68 94       	set
     1ce:	ee 24       	eor	r14, r14
     1d0:	e2 f8       	bld	r14, 2
     1d2:	08 e0       	ldi	r16, 0x08	; 8
     1d4:	22 e3       	ldi	r18, 0x32	; 50
     1d6:	38 ea       	ldi	r19, 0xA8	; 168
     1d8:	43 e8       	ldi	r20, 0x83	; 131
     1da:	5e e3       	ldi	r21, 0x3E	; 62
     1dc:	60 e0       	ldi	r22, 0x00	; 0
     1de:	70 e0       	ldi	r23, 0x00	; 0
     1e0:	ce 01       	movw	r24, r28
     1e2:	89 96       	adiw	r24, 0x29	; 41
     1e4:	0e 94 09 03 	call	0x612	; 0x612 <_ZN12StepperMotorC1Eifhh>
	ServoMotor  servo0(&SERVO0_PWM,&SERVO_REGISTER,SERVO_0_DIR_A,SERVO_0_DIR_B);
     1e8:	00 e8       	ldi	r16, 0x80	; 128
     1ea:	20 e4       	ldi	r18, 0x40	; 64
     1ec:	4b e2       	ldi	r20, 0x2B	; 43
     1ee:	50 e0       	ldi	r21, 0x00	; 0
     1f0:	64 eb       	ldi	r22, 0xB4	; 180
     1f2:	70 e0       	ldi	r23, 0x00	; 0
     1f4:	ce 01       	movw	r24, r28
     1f6:	8f 5a       	subi	r24, 0xAF	; 175
     1f8:	9f 4f       	sbci	r25, 0xFF	; 255
     1fa:	0e 94 d2 01 	call	0x3a4	; 0x3a4 <_ZN10ServoMotorC1EPVhS1_hh>
	servo0.target_pos = 0;
     1fe:	a7 96       	adiw	r28, 0x27	; 39
     200:	1c ae       	std	Y+60, r1	; 0x3c
     202:	1d ae       	std	Y+61, r1	; 0x3d
     204:	1e ae       	std	Y+62, r1	; 0x3e
     206:	1f ae       	std	Y+63, r1	; 0x3f
     208:	a7 97       	sbiw	r28, 0x27	; 39
	servo0.set_pid(20,1,0);
     20a:	20 e0       	ldi	r18, 0x00	; 0
     20c:	30 e0       	ldi	r19, 0x00	; 0
     20e:	41 e0       	ldi	r20, 0x01	; 1
     210:	50 e0       	ldi	r21, 0x00	; 0
     212:	64 e1       	ldi	r22, 0x14	; 20
     214:	70 e0       	ldi	r23, 0x00	; 0
     216:	ce 01       	movw	r24, r28
     218:	8f 5a       	subi	r24, 0xAF	; 175
     21a:	9f 4f       	sbci	r25, 0xFF	; 255
     21c:	0e 94 ed 01 	call	0x3da	; 0x3da <_ZN10ServoMotor7set_pidEjjj>
	while (1) 
    {
		
		/*character FSM */ 
		char buff[50]; 
		if(motor_status.done == 1){
     220:	06 e7       	ldi	r16, 0x76	; 118
     222:	11 e0       	ldi	r17, 0x01	; 1
	//		sprintf(buff,"Motor %d, angle =  %d\n",motor_status.motor_select,motor_status.angle);
	//		usart_send(buff);
			motor_status.done = 0; 
			uint16_t duration = (motor_status.data[0]-48)*10 + (motor_status.data[1]-48);
			uint16_t acceleration = (motor_status.data[2]-48)*10 + (motor_status.data[3]-48);
			int16_t angle = (motor_status.data[5]-48)*100 + (motor_status.data[6]-48)*10 + (motor_status.data[7]-48);
     224:	0f 2e       	mov	r0, r31
     226:	f4 e6       	ldi	r31, 0x64	; 100
     228:	ff 2e       	mov	r15, r31
     22a:	f0 2d       	mov	r31, r0
					break;
				case 1 :
					stepper0.target_pos = angle; 
					stepper0.duration = duration;
					stepper0.acceleration = acceleration;
					stepper0.start = 1; 
     22c:	ee 24       	eor	r14, r14
     22e:	e3 94       	inc	r14
	while (1) 
    {
		
		/*character FSM */ 
		char buff[50]; 
		if(motor_status.done == 1){
     230:	d8 01       	movw	r26, r16
     232:	51 96       	adiw	r26, 0x11	; 17
     234:	8d 91       	ld	r24, X+
     236:	9c 91       	ld	r25, X
     238:	52 97       	sbiw	r26, 0x12	; 18
     23a:	01 97       	sbiw	r24, 0x01	; 1
     23c:	09 f0       	breq	.+2      	; 0x240 <main+0xd6>
     23e:	8c c0       	rjmp	.+280    	; 0x358 <main+0x1ee>
	//		sprintf(buff,"Motor %d, angle =  %d\n",motor_status.motor_select,motor_status.angle);
	//		usart_send(buff);
			motor_status.done = 0; 
     240:	52 96       	adiw	r26, 0x12	; 18
     242:	1c 92       	st	X, r1
     244:	1e 92       	st	-X, r1
     246:	51 97       	sbiw	r26, 0x11	; 17
			uint16_t duration = (motor_status.data[0]-48)*10 + (motor_status.data[1]-48);
     248:	11 96       	adiw	r26, 0x01	; 1
     24a:	8d 91       	ld	r24, X+
     24c:	9c 91       	ld	r25, X
     24e:	12 97       	sbiw	r26, 0x02	; 2
     250:	c0 97       	sbiw	r24, 0x30	; 48
     252:	ac 01       	movw	r20, r24
     254:	44 0f       	add	r20, r20
     256:	55 1f       	adc	r21, r21
     258:	88 0f       	add	r24, r24
     25a:	99 1f       	adc	r25, r25
     25c:	88 0f       	add	r24, r24
     25e:	99 1f       	adc	r25, r25
     260:	88 0f       	add	r24, r24
     262:	99 1f       	adc	r25, r25
     264:	84 0f       	add	r24, r20
     266:	95 1f       	adc	r25, r21
     268:	13 96       	adiw	r26, 0x03	; 3
     26a:	4d 91       	ld	r20, X+
     26c:	5c 91       	ld	r21, X
     26e:	14 97       	sbiw	r26, 0x04	; 4
     270:	40 53       	subi	r20, 0x30	; 48
     272:	51 09       	sbc	r21, r1
     274:	48 0f       	add	r20, r24
     276:	59 1f       	adc	r21, r25
			uint16_t acceleration = (motor_status.data[2]-48)*10 + (motor_status.data[3]-48);
     278:	15 96       	adiw	r26, 0x05	; 5
     27a:	8d 91       	ld	r24, X+
     27c:	9c 91       	ld	r25, X
     27e:	16 97       	sbiw	r26, 0x06	; 6
     280:	c0 97       	sbiw	r24, 0x30	; 48
     282:	9c 01       	movw	r18, r24
     284:	22 0f       	add	r18, r18
     286:	33 1f       	adc	r19, r19
     288:	88 0f       	add	r24, r24
     28a:	99 1f       	adc	r25, r25
     28c:	88 0f       	add	r24, r24
     28e:	99 1f       	adc	r25, r25
     290:	88 0f       	add	r24, r24
     292:	99 1f       	adc	r25, r25
     294:	82 0f       	add	r24, r18
     296:	93 1f       	adc	r25, r19
     298:	17 96       	adiw	r26, 0x07	; 7
     29a:	6d 91       	ld	r22, X+
     29c:	7c 91       	ld	r23, X
     29e:	18 97       	sbiw	r26, 0x08	; 8
     2a0:	60 53       	subi	r22, 0x30	; 48
     2a2:	71 09       	sbc	r23, r1
     2a4:	68 0f       	add	r22, r24
     2a6:	79 1f       	adc	r23, r25
			int16_t angle = (motor_status.data[5]-48)*100 + (motor_status.data[6]-48)*10 + (motor_status.data[7]-48);
     2a8:	1b 96       	adiw	r26, 0x0b	; 11
     2aa:	8d 91       	ld	r24, X+
     2ac:	9c 91       	ld	r25, X
     2ae:	1c 97       	sbiw	r26, 0x0c	; 12
     2b0:	c0 97       	sbiw	r24, 0x30	; 48
     2b2:	f8 9e       	mul	r15, r24
     2b4:	f0 01       	movw	r30, r0
     2b6:	f9 9e       	mul	r15, r25
     2b8:	f0 0d       	add	r31, r0
     2ba:	11 24       	eor	r1, r1
     2bc:	1d 96       	adiw	r26, 0x0d	; 13
     2be:	2d 91       	ld	r18, X+
     2c0:	3c 91       	ld	r19, X
     2c2:	1e 97       	sbiw	r26, 0x0e	; 14
     2c4:	c9 01       	movw	r24, r18
     2c6:	c0 97       	sbiw	r24, 0x30	; 48
     2c8:	dc 01       	movw	r26, r24
     2ca:	aa 0f       	add	r26, r26
     2cc:	bb 1f       	adc	r27, r27
     2ce:	9c 01       	movw	r18, r24
     2d0:	22 0f       	add	r18, r18
     2d2:	33 1f       	adc	r19, r19
     2d4:	22 0f       	add	r18, r18
     2d6:	33 1f       	adc	r19, r19
     2d8:	22 0f       	add	r18, r18
     2da:	33 1f       	adc	r19, r19
     2dc:	cd 01       	movw	r24, r26
     2de:	82 0f       	add	r24, r18
     2e0:	93 1f       	adc	r25, r19
     2e2:	8e 0f       	add	r24, r30
     2e4:	9f 1f       	adc	r25, r31
     2e6:	f8 01       	movw	r30, r16
     2e8:	c7 84       	ldd	r12, Z+15	; 0x0f
     2ea:	d0 88       	ldd	r13, Z+16	; 0x10
     2ec:	f0 e3       	ldi	r31, 0x30	; 48
     2ee:	cf 1a       	sub	r12, r31
     2f0:	d1 08       	sbc	r13, r1
     2f2:	c8 0e       	add	r12, r24
     2f4:	d9 1e       	adc	r13, r25

			if(motor_status.data[4] == '-'){
     2f6:	d8 01       	movw	r26, r16
     2f8:	19 96       	adiw	r26, 0x09	; 9
     2fa:	8d 91       	ld	r24, X+
     2fc:	9c 91       	ld	r25, X
     2fe:	1a 97       	sbiw	r26, 0x0a	; 10
     300:	8d 97       	sbiw	r24, 0x2d	; 45
     302:	19 f4       	brne	.+6      	; 0x30a <main+0x1a0>
				angle = angle * -1;
     304:	d1 94       	neg	r13
     306:	c1 94       	neg	r12
     308:	d1 08       	sbc	r13, r1
			}
			switch(motor_status.motor_select){
     30a:	f8 01       	movw	r30, r16
     30c:	80 81       	ld	r24, Z
     30e:	81 30       	cpi	r24, 0x01	; 1
     310:	a1 f0       	breq	.+40     	; 0x33a <main+0x1d0>
     312:	18 f0       	brcs	.+6      	; 0x31a <main+0x1b0>
     314:	82 30       	cpi	r24, 0x02	; 2
     316:	c9 f0       	breq	.+50     	; 0x34a <main+0x1e0>
     318:	1f c0       	rjmp	.+62     	; 0x358 <main+0x1ee>
				case 0 : 
					//usart_send("hello");
					servo0.reset_summation();
     31a:	ce 01       	movw	r24, r28
     31c:	8f 5a       	subi	r24, 0xAF	; 175
     31e:	9f 4f       	sbci	r25, 0xFF	; 255
     320:	0e 94 03 03 	call	0x606	; 0x606 <_ZN10ServoMotor15reset_summationEv>
					servo0.target_pos = angle; 
     324:	c6 01       	movw	r24, r12
     326:	dd 0c       	add	r13, r13
     328:	aa 0b       	sbc	r26, r26
     32a:	bb 0b       	sbc	r27, r27
     32c:	a7 96       	adiw	r28, 0x27	; 39
     32e:	8c af       	std	Y+60, r24	; 0x3c
     330:	9d af       	std	Y+61, r25	; 0x3d
     332:	ae af       	std	Y+62, r26	; 0x3e
     334:	bf af       	std	Y+63, r27	; 0x3f
     336:	a7 97       	sbiw	r28, 0x27	; 39
					break;
     338:	0f c0       	rjmp	.+30     	; 0x358 <main+0x1ee>
				case 1 :
					stepper0.target_pos = angle; 
     33a:	dd 82       	std	Y+5, r13	; 0x05
     33c:	cc 82       	std	Y+4, r12	; 0x04
					stepper0.duration = duration;
     33e:	5f 87       	std	Y+15, r21	; 0x0f
     340:	4e 87       	std	Y+14, r20	; 0x0e
					stepper0.acceleration = acceleration;
     342:	7d 87       	std	Y+13, r23	; 0x0d
     344:	6c 87       	std	Y+12, r22	; 0x0c
					stepper0.start = 1; 
     346:	e9 82       	std	Y+1, r14	; 0x01
					break; 
     348:	07 c0       	rjmp	.+14     	; 0x358 <main+0x1ee>
				case 2 : 
					stepper1.target_pos = angle; 
     34a:	dd a6       	std	Y+45, r13	; 0x2d
     34c:	cc a6       	std	Y+44, r12	; 0x2c
					stepper1.duration = duration;
     34e:	5f ab       	std	Y+55, r21	; 0x37
     350:	4e ab       	std	Y+54, r20	; 0x36
					stepper1.acceleration = acceleration;
     352:	7d ab       	std	Y+53, r23	; 0x35
     354:	6c ab       	std	Y+52, r22	; 0x34
					stepper1.start = 1;
     356:	e9 a6       	std	Y+41, r14	; 0x29
			}
		}

			//usart_sendln(temp);	
		
		stepper0.rotate(timer_10k());
     358:	0e 94 13 06 	call	0xc26	; 0xc26 <_Z9timer_10kv>
     35c:	ab 01       	movw	r20, r22
     35e:	bc 01       	movw	r22, r24
     360:	ce 01       	movw	r24, r28
     362:	01 96       	adiw	r24, 0x01	; 1
     364:	0e 94 19 04 	call	0x832	; 0x832 <_ZN12StepperMotor6rotateEm>
		stepper1.rotate(timer_10k());
     368:	0e 94 13 06 	call	0xc26	; 0xc26 <_Z9timer_10kv>
     36c:	ab 01       	movw	r20, r22
     36e:	bc 01       	movw	r22, r24
     370:	ce 01       	movw	r24, r28
     372:	89 96       	adiw	r24, 0x29	; 41
     374:	0e 94 19 04 	call	0x832	; 0x832 <_ZN12StepperMotor6rotateEm>
		servo0.rotate(timer_10k());
     378:	0e 94 13 06 	call	0xc26	; 0xc26 <_Z9timer_10kv>
     37c:	ab 01       	movw	r20, r22
     37e:	bc 01       	movw	r22, r24
     380:	ce 01       	movw	r24, r28
     382:	8f 5a       	subi	r24, 0xAF	; 175
     384:	9f 4f       	sbci	r25, 0xFF	; 255
     386:	0e 94 8f 02 	call	0x51e	; 0x51e <_ZN10ServoMotor6rotateEm>
	
		tacho_values= PIND; 
     38a:	89 b1       	in	r24, 0x09	; 9
		servo0.tacho(PIND & SERVO_TACHO_0_P, PIND & SERVO_TACHO_0_M);
     38c:	49 b1       	in	r20, 0x09	; 9
     38e:	69 b1       	in	r22, 0x09	; 9
     390:	40 72       	andi	r20, 0x20	; 32
     392:	64 70       	andi	r22, 0x04	; 4
     394:	ce 01       	movw	r24, r28
     396:	8f 5a       	subi	r24, 0xAF	; 175
     398:	9f 4f       	sbci	r25, 0xFF	; 255
     39a:	0e 94 dd 02 	call	0x5ba	; 0x5ba <_ZN10ServoMotor5tachoEhh>
		/*Check if any bits have toggled */
		if(tacho_values ^ old_tacho_values){
			old_tacho_values = tacho_values;
			
		}
		if(timer_10k()-temp > 100){
     39e:	0e 94 13 06 	call	0xc26	; 0xc26 <_Z9timer_10kv>
	StepperMotor stepper1(0,0.2571426, M1_DIR,M1_STEP); 
	ServoMotor  servo0(&SERVO0_PWM,&SERVO_REGISTER,SERVO_0_DIR_A,SERVO_0_DIR_B);
	servo0.target_pos = 0;
	servo0.set_pid(20,1,0);
	uint32_t temp = 0 ;
	while (1) 
     3a2:	46 cf       	rjmp	.-372    	; 0x230 <main+0xc6>

000003a4 <_ZN10ServoMotorC1EPVhS1_hh>:
#include <avr/io.h>	
// default constructor
#define MAX_INT 100
#define MAX_SUMMATION 5
#define SCALER 1L
ServoMotor::ServoMotor(volatile uint8_t * pwm,volatile uint8_t * servo_register ,uint8_t dir_a,uint8_t dir_b)
     3a4:	0f 93       	push	r16
     3a6:	fc 01       	movw	r30, r24
{
	this->tacho_state = 0;
     3a8:	12 aa       	std	Z+50, r1	; 0x32
	this->target_pos = 0; 
     3aa:	12 8a       	std	Z+18, r1	; 0x12
     3ac:	13 8a       	std	Z+19, r1	; 0x13
     3ae:	14 8a       	std	Z+20, r1	; 0x14
     3b0:	15 8a       	std	Z+21, r1	; 0x15
	this->integral_term = 0; 
     3b2:	16 8e       	std	Z+30, r1	; 0x1e
     3b4:	17 8e       	std	Z+31, r1	; 0x1f
     3b6:	10 a2       	std	Z+32, r1	; 0x20
     3b8:	11 a2       	std	Z+33, r1	; 0x21
	this->old_error = 0; 
     3ba:	16 a2       	std	Z+38, r1	; 0x26
     3bc:	17 a2       	std	Z+39, r1	; 0x27
     3be:	10 a6       	std	Z+40, r1	; 0x28
     3c0:	11 a6       	std	Z+41, r1	; 0x29
	this->dir_a = dir_a;
     3c2:	23 ab       	std	Z+51, r18	; 0x33
	this->dir_b = dir_b;
     3c4:	04 ab       	std	Z+52, r16	; 0x34
	this->servo_register = servo_register;
     3c6:	57 a7       	std	Z+47, r21	; 0x2f
     3c8:	46 a7       	std	Z+46, r20	; 0x2e
	this->servo_pwm = pwm; 
     3ca:	71 ab       	std	Z+49, r23	; 0x31
     3cc:	60 ab       	std	Z+48, r22	; 0x30
	summation = 0; 
     3ce:	16 82       	std	Z+6, r1	; 0x06
     3d0:	17 82       	std	Z+7, r1	; 0x07
     3d2:	10 86       	std	Z+8, r1	; 0x08
     3d4:	11 86       	std	Z+9, r1	; 0x09
	

} //ServoMotor
     3d6:	0f 91       	pop	r16
     3d8:	08 95       	ret

000003da <_ZN10ServoMotor7set_pidEjjj>:
void ServoMotor::set_pid(uint16_t P, uint16_t I, uint16_t D){
     3da:	cf 93       	push	r28
     3dc:	df 93       	push	r29
     3de:	fc 01       	movw	r30, r24
     3e0:	ea 01       	movw	r28, r20
	P_factor = P;
     3e2:	71 83       	std	Z+1, r23	; 0x01
     3e4:	60 83       	st	Z, r22
	I_factor = I; 
     3e6:	53 83       	std	Z+3, r21	; 0x03
     3e8:	42 83       	std	Z+2, r20	; 0x02
	D_factor = D; 
     3ea:	35 83       	std	Z+5, r19	; 0x05
     3ec:	24 83       	std	Z+4, r18	; 0x04
	
	max_error = MAX_INT / (P_factor + 1)*SCALER;
     3ee:	6f 5f       	subi	r22, 0xFF	; 255
     3f0:	7f 4f       	sbci	r23, 0xFF	; 255
     3f2:	84 e6       	ldi	r24, 0x64	; 100
     3f4:	90 e0       	ldi	r25, 0x00	; 0
     3f6:	0e 94 7f 09 	call	0x12fe	; 0x12fe <__udivmodhi4>
     3fa:	cb 01       	movw	r24, r22
     3fc:	a0 e0       	ldi	r26, 0x00	; 0
     3fe:	b0 e0       	ldi	r27, 0x00	; 0
     400:	86 87       	std	Z+14, r24	; 0x0e
     402:	97 87       	std	Z+15, r25	; 0x0f
     404:	a0 8b       	std	Z+16, r26	; 0x10
     406:	b1 8b       	std	Z+17, r27	; 0x11
	max_summation = MAX_SUMMATION /(I_factor +1)*SCALER; 
     408:	be 01       	movw	r22, r28
     40a:	6f 5f       	subi	r22, 0xFF	; 255
     40c:	7f 4f       	sbci	r23, 0xFF	; 255
     40e:	85 e0       	ldi	r24, 0x05	; 5
     410:	90 e0       	ldi	r25, 0x00	; 0
     412:	0e 94 7f 09 	call	0x12fe	; 0x12fe <__udivmodhi4>
     416:	cb 01       	movw	r24, r22
     418:	a0 e0       	ldi	r26, 0x00	; 0
     41a:	b0 e0       	ldi	r27, 0x00	; 0
     41c:	82 87       	std	Z+10, r24	; 0x0a
     41e:	93 87       	std	Z+11, r25	; 0x0b
     420:	a4 87       	std	Z+12, r26	; 0x0c
     422:	b5 87       	std	Z+13, r27	; 0x0d
}
     424:	df 91       	pop	r29
     426:	cf 91       	pop	r28
     428:	08 95       	ret

0000042a <_ZN10ServoMotor3pidEv>:

/* this function is called at fixed intervals and computes the 
 * output of the transfer function */
/* Current implementation with floating point */
int16_t ServoMotor::pid(){
     42a:	cf 92       	push	r12
     42c:	df 92       	push	r13
     42e:	ef 92       	push	r14
     430:	ff 92       	push	r15
     432:	0f 93       	push	r16
     434:	1f 93       	push	r17
     436:	cf 93       	push	r28
     438:	df 93       	push	r29
     43a:	ec 01       	movw	r28, r24
	error = (target_pos -absolute_position/5.0f)*SCALER;
     43c:	6a 89       	ldd	r22, Y+18	; 0x12
     43e:	7b 89       	ldd	r23, Y+19	; 0x13
     440:	8c 89       	ldd	r24, Y+20	; 0x14
     442:	9d 89       	ldd	r25, Y+21	; 0x15
     444:	0e 94 2b 08 	call	0x1056	; 0x1056 <__floatsisf>
     448:	6b 01       	movw	r12, r22
     44a:	7c 01       	movw	r14, r24
     44c:	6e 89       	ldd	r22, Y+22	; 0x16
     44e:	7f 89       	ldd	r23, Y+23	; 0x17
     450:	88 8d       	ldd	r24, Y+24	; 0x18
     452:	99 8d       	ldd	r25, Y+25	; 0x19
     454:	0e 94 2b 08 	call	0x1056	; 0x1056 <__floatsisf>
     458:	20 e0       	ldi	r18, 0x00	; 0
     45a:	30 e0       	ldi	r19, 0x00	; 0
     45c:	40 ea       	ldi	r20, 0xA0	; 160
     45e:	50 e4       	ldi	r21, 0x40	; 64
     460:	0e 94 81 07 	call	0xf02	; 0xf02 <__divsf3>
     464:	9b 01       	movw	r18, r22
     466:	ac 01       	movw	r20, r24
     468:	c7 01       	movw	r24, r14
     46a:	b6 01       	movw	r22, r12
     46c:	0e 94 14 07 	call	0xe28	; 0xe28 <__subsf3>
     470:	0e 94 f3 07 	call	0xfe6	; 0xfe6 <__fixsfsi>
     474:	6a a3       	std	Y+34, r22	; 0x22
     476:	7b a3       	std	Y+35, r23	; 0x23
     478:	8c a3       	std	Y+36, r24	; 0x24
     47a:	9d a3       	std	Y+37, r25	; 0x25
	int16_t pterm;
	int16_t iterm;
	int32_t temp;
	
	if(error > max_error){
     47c:	0e 85       	ldd	r16, Y+14	; 0x0e
     47e:	1f 85       	ldd	r17, Y+15	; 0x0f
     480:	28 89       	ldd	r18, Y+16	; 0x10
     482:	39 89       	ldd	r19, Y+17	; 0x11
     484:	06 17       	cp	r16, r22
     486:	17 07       	cpc	r17, r23
     488:	28 07       	cpc	r18, r24
     48a:	39 07       	cpc	r19, r25
     48c:	b4 f0       	brlt	.+44     	; 0x4ba <_ZN10ServoMotor3pidEv+0x90>
		pterm = MAX_INT;
	}else if(error < -max_error){
     48e:	30 95       	com	r19
     490:	20 95       	com	r18
     492:	10 95       	com	r17
     494:	01 95       	neg	r16
     496:	1f 4f       	sbci	r17, 0xFF	; 255
     498:	2f 4f       	sbci	r18, 0xFF	; 255
     49a:	3f 4f       	sbci	r19, 0xFF	; 255
     49c:	60 17       	cp	r22, r16
     49e:	71 07       	cpc	r23, r17
     4a0:	82 07       	cpc	r24, r18
     4a2:	93 07       	cpc	r25, r19
     4a4:	6c f0       	brlt	.+26     	; 0x4c0 <_ZN10ServoMotor3pidEv+0x96>
		pterm = -MAX_INT;	
	}else{
		pterm = P_factor * error;		
     4a6:	28 81       	ld	r18, Y
     4a8:	39 81       	ldd	r19, Y+1	; 0x01
     4aa:	26 9f       	mul	r18, r22
     4ac:	f0 01       	movw	r30, r0
     4ae:	27 9f       	mul	r18, r23
     4b0:	f0 0d       	add	r31, r0
     4b2:	36 9f       	mul	r19, r22
     4b4:	f0 0d       	add	r31, r0
     4b6:	11 24       	eor	r1, r1
     4b8:	05 c0       	rjmp	.+10     	; 0x4c4 <_ZN10ServoMotor3pidEv+0x9a>
	int16_t pterm;
	int16_t iterm;
	int32_t temp;
	
	if(error > max_error){
		pterm = MAX_INT;
     4ba:	e4 e6       	ldi	r30, 0x64	; 100
     4bc:	f0 e0       	ldi	r31, 0x00	; 0
     4be:	02 c0       	rjmp	.+4      	; 0x4c4 <_ZN10ServoMotor3pidEv+0x9a>
	}else if(error < -max_error){
		pterm = -MAX_INT;	
     4c0:	ec e9       	ldi	r30, 0x9C	; 156
     4c2:	ff ef       	ldi	r31, 0xFF	; 255
	}else{
		pterm = P_factor * error;		
	}
	temp = summation + error;
     4c4:	0e 81       	ldd	r16, Y+6	; 0x06
     4c6:	1f 81       	ldd	r17, Y+7	; 0x07
     4c8:	28 85       	ldd	r18, Y+8	; 0x08
     4ca:	39 85       	ldd	r19, Y+9	; 0x09
     4cc:	dc 01       	movw	r26, r24
     4ce:	cb 01       	movw	r24, r22
     4d0:	80 0f       	add	r24, r16
     4d2:	91 1f       	adc	r25, r17
     4d4:	a2 1f       	adc	r26, r18
     4d6:	b3 1f       	adc	r27, r19
	
	if(temp > max_summation){
     4d8:	0a 85       	ldd	r16, Y+10	; 0x0a
     4da:	1b 85       	ldd	r17, Y+11	; 0x0b
     4dc:	2c 85       	ldd	r18, Y+12	; 0x0c
     4de:	3d 85       	ldd	r19, Y+13	; 0x0d
     4e0:	08 17       	cp	r16, r24
     4e2:	19 07       	cpc	r17, r25
     4e4:	2a 07       	cpc	r18, r26
     4e6:	3b 07       	cpc	r19, r27
     4e8:	84 f0       	brlt	.+32     	; 0x50a <_ZN10ServoMotor3pidEv+0xe0>
		iterm = MAX_SUMMATION; 
	}else if(temp < -max_summation){
     4ea:	30 95       	com	r19
     4ec:	20 95       	com	r18
     4ee:	10 95       	com	r17
     4f0:	01 95       	neg	r16
     4f2:	1f 4f       	sbci	r17, 0xFF	; 255
     4f4:	2f 4f       	sbci	r18, 0xFF	; 255
     4f6:	3f 4f       	sbci	r19, 0xFF	; 255
     4f8:	80 17       	cp	r24, r16
     4fa:	91 07       	cpc	r25, r17
     4fc:	a2 07       	cpc	r26, r18
     4fe:	b3 07       	cpc	r27, r19
     500:	24 f0       	brlt	.+8      	; 0x50a <_ZN10ServoMotor3pidEv+0xe0>
		iterm = -MAX_SUMMATION;
	}else{
		summation = temp;
     502:	8e 83       	std	Y+6, r24	; 0x06
     504:	9f 83       	std	Y+7, r25	; 0x07
     506:	a8 87       	std	Y+8, r26	; 0x08
     508:	b9 87       	std	Y+9, r27	; 0x09
		iterm = summation * I_factor ;
	}
	return int16_t((pterm)/SCALER);
}
     50a:	cf 01       	movw	r24, r30
     50c:	df 91       	pop	r29
     50e:	cf 91       	pop	r28
     510:	1f 91       	pop	r17
     512:	0f 91       	pop	r16
     514:	ff 90       	pop	r15
     516:	ef 90       	pop	r14
     518:	df 90       	pop	r13
     51a:	cf 90       	pop	r12
     51c:	08 95       	ret

0000051e <_ZN10ServoMotor6rotateEm>:

void ServoMotor::rotate(uint32_t current_time){
     51e:	cf 92       	push	r12
     520:	df 92       	push	r13
     522:	ef 92       	push	r14
     524:	ff 92       	push	r15
     526:	0f 93       	push	r16
     528:	1f 93       	push	r17
     52a:	cf 93       	push	r28
     52c:	df 93       	push	r29
	int16_t output;
	/*Update the PID at a frequency of 1khz */
	if(current_time - old_time > 10){
     52e:	fc 01       	movw	r30, r24
     530:	02 a5       	ldd	r16, Z+42	; 0x2a
     532:	13 a5       	ldd	r17, Z+43	; 0x2b
     534:	24 a5       	ldd	r18, Z+44	; 0x2c
     536:	35 a5       	ldd	r19, Z+45	; 0x2d
     538:	6a 01       	movw	r12, r20
     53a:	7b 01       	movw	r14, r22
     53c:	c0 1a       	sub	r12, r16
     53e:	d1 0a       	sbc	r13, r17
     540:	e2 0a       	sbc	r14, r18
     542:	f3 0a       	sbc	r15, r19
     544:	97 01       	movw	r18, r14
     546:	86 01       	movw	r16, r12
     548:	0b 30       	cpi	r16, 0x0B	; 11
     54a:	11 05       	cpc	r17, r1
     54c:	21 05       	cpc	r18, r1
     54e:	31 05       	cpc	r19, r1
     550:	58 f1       	brcs	.+86     	; 0x5a8 <_ZN10ServoMotor6rotateEm+0x8a>
     552:	ec 01       	movw	r28, r24
		old_time = current_time;
     554:	42 a7       	std	Z+42, r20	; 0x2a
     556:	53 a7       	std	Z+43, r21	; 0x2b
     558:	64 a7       	std	Z+44, r22	; 0x2c
     55a:	75 a7       	std	Z+45, r23	; 0x2d
		output = pid(); 
     55c:	0e 94 15 02 	call	0x42a	; 0x42a <_ZN10ServoMotor3pidEv>
	
		/*Change direction if output is less than zero */
	//	usart_sendln(output);
		if(output > 0){
     560:	18 16       	cp	r1, r24
     562:	19 06       	cpc	r1, r25
     564:	74 f4       	brge	.+28     	; 0x582 <_ZN10ServoMotor6rotateEm+0x64>
			*servo_register |= dir_a  ;
     566:	ee a5       	ldd	r30, Y+46	; 0x2e
     568:	ff a5       	ldd	r31, Y+47	; 0x2f
     56a:	30 81       	ld	r19, Z
     56c:	2b a9       	ldd	r18, Y+51	; 0x33
     56e:	23 2b       	or	r18, r19
     570:	20 83       	st	Z, r18
			*servo_register &= ~dir_b;
     572:	ee a5       	ldd	r30, Y+46	; 0x2e
     574:	ff a5       	ldd	r31, Y+47	; 0x2f
     576:	30 81       	ld	r19, Z
     578:	2c a9       	ldd	r18, Y+52	; 0x34
     57a:	20 95       	com	r18
     57c:	23 23       	and	r18, r19
     57e:	20 83       	st	Z, r18
     580:	10 c0       	rjmp	.+32     	; 0x5a2 <_ZN10ServoMotor6rotateEm+0x84>
		}else{
			*servo_register &= ~dir_a;
     582:	ee a5       	ldd	r30, Y+46	; 0x2e
     584:	ff a5       	ldd	r31, Y+47	; 0x2f
     586:	30 81       	ld	r19, Z
     588:	2b a9       	ldd	r18, Y+51	; 0x33
     58a:	20 95       	com	r18
     58c:	23 23       	and	r18, r19
     58e:	20 83       	st	Z, r18
			*servo_register |= dir_b;
     590:	ee a5       	ldd	r30, Y+46	; 0x2e
     592:	ff a5       	ldd	r31, Y+47	; 0x2f
     594:	30 81       	ld	r19, Z
     596:	2c a9       	ldd	r18, Y+52	; 0x34
     598:	23 2b       	or	r18, r19
     59a:	20 83       	st	Z, r18
			output = output * -1;
     59c:	91 95       	neg	r25
     59e:	81 95       	neg	r24
     5a0:	91 09       	sbc	r25, r1
		}
		/* Limit the maximum output */ 	
	
		*servo_pwm = output;
     5a2:	e8 a9       	ldd	r30, Y+48	; 0x30
     5a4:	f9 a9       	ldd	r31, Y+49	; 0x31
     5a6:	80 83       	st	Z, r24
	//	usart_sendln(summation);
		
	}
}
     5a8:	df 91       	pop	r29
     5aa:	cf 91       	pop	r28
     5ac:	1f 91       	pop	r17
     5ae:	0f 91       	pop	r16
     5b0:	ff 90       	pop	r15
     5b2:	ef 90       	pop	r14
     5b4:	df 90       	pop	r13
     5b6:	cf 90       	pop	r12
     5b8:	08 95       	ret

000005ba <_ZN10ServoMotor5tachoEhh>:
/*Updates the absolute position from the tachometer in the motor*/
void ServoMotor::tacho(uint8_t plus, uint8_t min){
     5ba:	fc 01       	movw	r30, r24
	if(tacho_state == 0){
     5bc:	82 a9       	ldd	r24, Z+50	; 0x32
     5be:	81 11       	cpse	r24, r1
     5c0:	1e c0       	rjmp	.+60     	; 0x5fe <_ZN10ServoMotor5tachoEhh+0x44>
		/* If plus goes high and min is also high it went fowards 
		 * else it went backwards */
		if(plus){
     5c2:	66 23       	and	r22, r22
     5c4:	f9 f0       	breq	.+62     	; 0x604 <_ZN10ServoMotor5tachoEhh+0x4a>
			if(min){
     5c6:	44 23       	and	r20, r20
     5c8:	61 f0       	breq	.+24     	; 0x5e2 <_ZN10ServoMotor5tachoEhh+0x28>
				absolute_position++;
     5ca:	86 89       	ldd	r24, Z+22	; 0x16
     5cc:	97 89       	ldd	r25, Z+23	; 0x17
     5ce:	a0 8d       	ldd	r26, Z+24	; 0x18
     5d0:	b1 8d       	ldd	r27, Z+25	; 0x19
     5d2:	01 96       	adiw	r24, 0x01	; 1
     5d4:	a1 1d       	adc	r26, r1
     5d6:	b1 1d       	adc	r27, r1
     5d8:	86 8b       	std	Z+22, r24	; 0x16
     5da:	97 8b       	std	Z+23, r25	; 0x17
     5dc:	a0 8f       	std	Z+24, r26	; 0x18
     5de:	b1 8f       	std	Z+25, r27	; 0x19
     5e0:	0b c0       	rjmp	.+22     	; 0x5f8 <_ZN10ServoMotor5tachoEhh+0x3e>
			}else{
				absolute_position--;
     5e2:	86 89       	ldd	r24, Z+22	; 0x16
     5e4:	97 89       	ldd	r25, Z+23	; 0x17
     5e6:	a0 8d       	ldd	r26, Z+24	; 0x18
     5e8:	b1 8d       	ldd	r27, Z+25	; 0x19
     5ea:	01 97       	sbiw	r24, 0x01	; 1
     5ec:	a1 09       	sbc	r26, r1
     5ee:	b1 09       	sbc	r27, r1
     5f0:	86 8b       	std	Z+22, r24	; 0x16
     5f2:	97 8b       	std	Z+23, r25	; 0x17
     5f4:	a0 8f       	std	Z+24, r26	; 0x18
     5f6:	b1 8f       	std	Z+25, r27	; 0x19
			}
			tacho_state=1; 
     5f8:	81 e0       	ldi	r24, 0x01	; 1
     5fa:	82 ab       	std	Z+50, r24	; 0x32
     5fc:	08 95       	ret
		}
	}else{
		if(!plus){
     5fe:	61 11       	cpse	r22, r1
     600:	01 c0       	rjmp	.+2      	; 0x604 <_ZN10ServoMotor5tachoEhh+0x4a>
			tacho_state = 0; 
     602:	12 aa       	std	Z+50, r1	; 0x32
     604:	08 95       	ret

00000606 <_ZN10ServoMotor15reset_summationEv>:
	}

}

void ServoMotor::reset_summation(){
	summation = 0; 
     606:	fc 01       	movw	r30, r24
     608:	16 82       	std	Z+6, r1	; 0x06
     60a:	17 82       	std	Z+7, r1	; 0x07
     60c:	10 86       	std	Z+8, r1	; 0x08
     60e:	11 86       	std	Z+9, r1	; 0x09
     610:	08 95       	ret

00000612 <_ZN12StepperMotorC1Eifhh>:

#define DEBUG_
#define S_SCALER 1000UL

/* Iniatialize the stepper motor */
StepperMotor::StepperMotor(int16_t current_pos, float step_to_angle, uint8_t dir_pin, uint8_t step_pin)
     612:	ef 92       	push	r14
     614:	0f 93       	push	r16
     616:	cf 93       	push	r28
     618:	df 93       	push	r29
     61a:	ec 01       	movw	r28, r24
{
	state = S_WAIT; 
     61c:	1f a2       	std	Y+39, r1	; 0x27
	this->current_pos	= current_pos;
     61e:	7a 83       	std	Y+2, r23	; 0x02
     620:	69 83       	std	Y+1, r22	; 0x01
	/*this value should ideally be an integer */
	this->step_to_angle	= 1.0f/step_to_angle; 
     622:	60 e0       	ldi	r22, 0x00	; 0
     624:	70 e0       	ldi	r23, 0x00	; 0
     626:	80 e8       	ldi	r24, 0x80	; 128
     628:	9f e3       	ldi	r25, 0x3F	; 63
     62a:	0e 94 81 07 	call	0xf02	; 0xf02 <__divsf3>
     62e:	6b a3       	std	Y+35, r22	; 0x23
     630:	7c a3       	std	Y+36, r23	; 0x24
     632:	8d a3       	std	Y+37, r24	; 0x25
     634:	9e a3       	std	Y+38, r25	; 0x26
	this->dir_pin		= dir_pin;
     636:	09 a3       	std	Y+33, r16	; 0x21
	this->step_pin		= step_pin;		
     638:	ea a2       	std	Y+34, r14	; 0x22
	stepper_time = 0;
     63a:	1d 8e       	std	Y+29, r1	; 0x1d
     63c:	1e 8e       	std	Y+30, r1	; 0x1e
     63e:	1f 8e       	std	Y+31, r1	; 0x1f
     640:	18 a2       	std	Y+32, r1	; 0x20
	long_pulse_width = 0;
     642:	1f 86       	std	Y+15, r1	; 0x0f
     644:	18 8a       	std	Y+16, r1	; 0x10
     646:	19 8a       	std	Y+17, r1	; 0x11
     648:	1a 8a       	std	Y+18, r1	; 0x12
} 
     64a:	df 91       	pop	r29
     64c:	cf 91       	pop	r28
     64e:	0f 91       	pop	r16
     650:	ef 90       	pop	r14
     652:	08 95       	ret

00000654 <_ZN12StepperMotor3fsmEm>:
		fsm(current_time); 
	}

}
stepper_fsm StepperMotor::fsm(uint32_t current_time)
{
     654:	cf 92       	push	r12
     656:	df 92       	push	r13
     658:	ef 92       	push	r14
     65a:	ff 92       	push	r15
     65c:	0f 93       	push	r16
     65e:	1f 93       	push	r17
     660:	cf 93       	push	r28
     662:	df 93       	push	r29
     664:	ec 01       	movw	r28, r24
	STEPPER_REGISTER |= step_pin;
     666:	95 b1       	in	r25, 0x05	; 5
     668:	8a a1       	ldd	r24, Y+34	; 0x22
     66a:	89 2b       	or	r24, r25
     66c:	85 b9       	out	0x05, r24	; 5
	/*Generate pulses at a frequency of step time*/
	if((current_time - stepper_time) > pulse_width){
     66e:	8d 8d       	ldd	r24, Y+29	; 0x1d
     670:	9e 8d       	ldd	r25, Y+30	; 0x1e
     672:	af 8d       	ldd	r26, Y+31	; 0x1f
     674:	b8 a1       	ldd	r27, Y+32	; 0x20
     676:	8a 01       	movw	r16, r20
     678:	9b 01       	movw	r18, r22
     67a:	08 1b       	sub	r16, r24
     67c:	19 0b       	sbc	r17, r25
     67e:	2a 0b       	sbc	r18, r26
     680:	3b 0b       	sbc	r19, r27
     682:	8b 89       	ldd	r24, Y+19	; 0x13
     684:	9c 89       	ldd	r25, Y+20	; 0x14
     686:	ad 89       	ldd	r26, Y+21	; 0x15
     688:	be 89       	ldd	r27, Y+22	; 0x16
     68a:	80 17       	cp	r24, r16
     68c:	91 07       	cpc	r25, r17
     68e:	a2 07       	cpc	r26, r18
     690:	b3 07       	cpc	r27, r19
     692:	08 f0       	brcs	.+2      	; 0x696 <_ZN12StepperMotor3fsmEm+0x42>
     694:	c4 c0       	rjmp	.+392    	; 0x81e <_ZN12StepperMotor3fsmEm+0x1ca>
		stepper_time = current_time;
     696:	4d 8f       	std	Y+29, r20	; 0x1d
     698:	5e 8f       	std	Y+30, r21	; 0x1e
     69a:	6f 8f       	std	Y+31, r22	; 0x1f
     69c:	78 a3       	std	Y+32, r23	; 0x20
		switch(state){
     69e:	8f a1       	ldd	r24, Y+39	; 0x27
     6a0:	83 30       	cpi	r24, 0x03	; 3
     6a2:	09 f4       	brne	.+2      	; 0x6a6 <_ZN12StepperMotor3fsmEm+0x52>
     6a4:	53 c0       	rjmp	.+166    	; 0x74c <_ZN12StepperMotor3fsmEm+0xf8>
     6a6:	84 30       	cpi	r24, 0x04	; 4
     6a8:	09 f4       	brne	.+2      	; 0x6ac <_ZN12StepperMotor3fsmEm+0x58>
     6aa:	6c c0       	rjmp	.+216    	; 0x784 <_ZN12StepperMotor3fsmEm+0x130>
     6ac:	82 30       	cpi	r24, 0x02	; 2
     6ae:	09 f0       	breq	.+2      	; 0x6b2 <_ZN12StepperMotor3fsmEm+0x5e>
     6b0:	ac c0       	rjmp	.+344    	; 0x80a <_ZN12StepperMotor3fsmEm+0x1b6>
			/*Linearly accelerate */
			case S_ACCEL:
				long_pulse_width=(long_pulse_width-(2UL*long_pulse_width)/(4UL*pulse_width_counter  +1UL));	
     6b2:	cf 84       	ldd	r12, Y+15	; 0x0f
     6b4:	d8 88       	ldd	r13, Y+16	; 0x10
     6b6:	e9 88       	ldd	r14, Y+17	; 0x11
     6b8:	fa 88       	ldd	r15, Y+18	; 0x12
     6ba:	c7 01       	movw	r24, r14
     6bc:	b6 01       	movw	r22, r12
     6be:	66 0f       	add	r22, r22
     6c0:	77 1f       	adc	r23, r23
     6c2:	88 1f       	adc	r24, r24
     6c4:	99 1f       	adc	r25, r25
     6c6:	2f 89       	ldd	r18, Y+23	; 0x17
     6c8:	38 8d       	ldd	r19, Y+24	; 0x18
     6ca:	89 01       	movw	r16, r18
     6cc:	33 0f       	add	r19, r19
     6ce:	22 0b       	sbc	r18, r18
     6d0:	33 0b       	sbc	r19, r19
     6d2:	00 0f       	add	r16, r16
     6d4:	11 1f       	adc	r17, r17
     6d6:	22 1f       	adc	r18, r18
     6d8:	33 1f       	adc	r19, r19
     6da:	00 0f       	add	r16, r16
     6dc:	11 1f       	adc	r17, r17
     6de:	22 1f       	adc	r18, r18
     6e0:	33 1f       	adc	r19, r19
     6e2:	a9 01       	movw	r20, r18
     6e4:	98 01       	movw	r18, r16
     6e6:	2f 5f       	subi	r18, 0xFF	; 255
     6e8:	3f 4f       	sbci	r19, 0xFF	; 255
     6ea:	4f 4f       	sbci	r20, 0xFF	; 255
     6ec:	5f 4f       	sbci	r21, 0xFF	; 255
     6ee:	0e 94 93 09 	call	0x1326	; 0x1326 <__udivmodsi4>
     6f2:	c7 01       	movw	r24, r14
     6f4:	b6 01       	movw	r22, r12
     6f6:	62 1b       	sub	r22, r18
     6f8:	73 0b       	sbc	r23, r19
     6fa:	84 0b       	sbc	r24, r20
     6fc:	95 0b       	sbc	r25, r21
     6fe:	6f 87       	std	Y+15, r22	; 0x0f
     700:	78 8b       	std	Y+16, r23	; 0x10
     702:	89 8b       	std	Y+17, r24	; 0x11
     704:	9a 8b       	std	Y+18, r25	; 0x12
				pulse_width = long_pulse_width / S_SCALER;
     706:	28 ee       	ldi	r18, 0xE8	; 232
     708:	33 e0       	ldi	r19, 0x03	; 3
     70a:	40 e0       	ldi	r20, 0x00	; 0
     70c:	50 e0       	ldi	r21, 0x00	; 0
     70e:	0e 94 93 09 	call	0x1326	; 0x1326 <__udivmodsi4>
     712:	2b 8b       	std	Y+19, r18	; 0x13
     714:	3c 8b       	std	Y+20, r19	; 0x14
     716:	4d 8b       	std	Y+21, r20	; 0x15
     718:	5e 8b       	std	Y+22, r21	; 0x16
			//	usart_sendln(step_counter);	
			
				if( step_counter >=  t0){
     71a:	29 8d       	ldd	r18, Y+25	; 0x19
     71c:	3a 8d       	ldd	r19, Y+26	; 0x1a
     71e:	8f 81       	ldd	r24, Y+7	; 0x07
     720:	98 85       	ldd	r25, Y+8	; 0x08
     722:	28 17       	cp	r18, r24
     724:	39 07       	cpc	r19, r25
     726:	60 f0       	brcs	.+24     	; 0x740 <_ZN12StepperMotor3fsmEm+0xec>
					#ifdef DEBUG_
						usart_send("S_ACCEL");
     728:	80 e0       	ldi	r24, 0x00	; 0
     72a:	91 e0       	ldi	r25, 0x01	; 1
     72c:	0e 94 f1 06 	call	0xde2	; 0xde2 <_Z10usart_sendPc>
						usart_sendln(pulse_width);
     730:	6b 89       	ldd	r22, Y+19	; 0x13
     732:	7c 89       	ldd	r23, Y+20	; 0x14
     734:	8d 89       	ldd	r24, Y+21	; 0x15
     736:	9e 89       	ldd	r25, Y+22	; 0x16
     738:	0e 94 0a 07 	call	0xe14	; 0xe14 <_Z12usart_sendlnm>
					#endif
					state = S_CONSTANT;
     73c:	83 e0       	ldi	r24, 0x03	; 3
     73e:	8f a3       	std	Y+39, r24	; 0x27
				}	
				pulse_width_counter ++;
     740:	8f 89       	ldd	r24, Y+23	; 0x17
     742:	98 8d       	ldd	r25, Y+24	; 0x18
     744:	01 96       	adiw	r24, 0x01	; 1
     746:	98 8f       	std	Y+24, r25	; 0x18
     748:	8f 8b       	std	Y+23, r24	; 0x17
				break; 
     74a:	5f c0       	rjmp	.+190    	; 0x80a <_ZN12StepperMotor3fsmEm+0x1b6>
			/*Rotate at a constant velocity */
			case S_CONSTANT:
				if(step_counter >= t1){
     74c:	29 8d       	ldd	r18, Y+25	; 0x19
     74e:	3a 8d       	ldd	r19, Y+26	; 0x1a
     750:	89 85       	ldd	r24, Y+9	; 0x09
     752:	9a 85       	ldd	r25, Y+10	; 0x0a
     754:	28 17       	cp	r18, r24
     756:	39 07       	cpc	r19, r25
     758:	08 f4       	brcc	.+2      	; 0x75c <_ZN12StepperMotor3fsmEm+0x108>
     75a:	57 c0       	rjmp	.+174    	; 0x80a <_ZN12StepperMotor3fsmEm+0x1b6>
					state = S_DECEL;
     75c:	84 e0       	ldi	r24, 0x04	; 4
     75e:	8f a3       	std	Y+39, r24	; 0x27
					pulse_width_counter =pulse_width_counter *-1; 
     760:	8f 89       	ldd	r24, Y+23	; 0x17
     762:	98 8d       	ldd	r25, Y+24	; 0x18
     764:	91 95       	neg	r25
     766:	81 95       	neg	r24
     768:	91 09       	sbc	r25, r1
     76a:	98 8f       	std	Y+24, r25	; 0x18
     76c:	8f 8b       	std	Y+23, r24	; 0x17
					#ifdef DEBUG_
						usart_send("S_CONSTANT ");
     76e:	88 e0       	ldi	r24, 0x08	; 8
     770:	91 e0       	ldi	r25, 0x01	; 1
     772:	0e 94 f1 06 	call	0xde2	; 0xde2 <_Z10usart_sendPc>
						usart_sendln(pulse_width);
     776:	6b 89       	ldd	r22, Y+19	; 0x13
     778:	7c 89       	ldd	r23, Y+20	; 0x14
     77a:	8d 89       	ldd	r24, Y+21	; 0x15
     77c:	9e 89       	ldd	r25, Y+22	; 0x16
     77e:	0e 94 0a 07 	call	0xe14	; 0xe14 <_Z12usart_sendlnm>
     782:	43 c0       	rjmp	.+134    	; 0x80a <_ZN12StepperMotor3fsmEm+0x1b6>
					#endif
					}
				break;
			/*Linearly decelerate */
			case S_DECEL:
				long_pulse_width=(long_pulse_width-(2*long_pulse_width)/(4*pulse_width_counter  +1));		
     784:	cf 84       	ldd	r12, Y+15	; 0x0f
     786:	d8 88       	ldd	r13, Y+16	; 0x10
     788:	e9 88       	ldd	r14, Y+17	; 0x11
     78a:	fa 88       	ldd	r15, Y+18	; 0x12
     78c:	c7 01       	movw	r24, r14
     78e:	b6 01       	movw	r22, r12
     790:	66 0f       	add	r22, r22
     792:	77 1f       	adc	r23, r23
     794:	88 1f       	adc	r24, r24
     796:	99 1f       	adc	r25, r25
     798:	2f 89       	ldd	r18, Y+23	; 0x17
     79a:	38 8d       	ldd	r19, Y+24	; 0x18
     79c:	22 0f       	add	r18, r18
     79e:	33 1f       	adc	r19, r19
     7a0:	22 0f       	add	r18, r18
     7a2:	33 1f       	adc	r19, r19
     7a4:	2f 5f       	subi	r18, 0xFF	; 255
     7a6:	3f 4f       	sbci	r19, 0xFF	; 255
     7a8:	03 2e       	mov	r0, r19
     7aa:	00 0c       	add	r0, r0
     7ac:	44 0b       	sbc	r20, r20
     7ae:	55 0b       	sbc	r21, r21
     7b0:	0e 94 b5 09 	call	0x136a	; 0x136a <__divmodsi4>
     7b4:	c7 01       	movw	r24, r14
     7b6:	b6 01       	movw	r22, r12
     7b8:	62 1b       	sub	r22, r18
     7ba:	73 0b       	sbc	r23, r19
     7bc:	84 0b       	sbc	r24, r20
     7be:	95 0b       	sbc	r25, r21
     7c0:	6f 87       	std	Y+15, r22	; 0x0f
     7c2:	78 8b       	std	Y+16, r23	; 0x10
     7c4:	89 8b       	std	Y+17, r24	; 0x11
     7c6:	9a 8b       	std	Y+18, r25	; 0x12
				pulse_width = long_pulse_width / S_SCALER;
     7c8:	28 ee       	ldi	r18, 0xE8	; 232
     7ca:	33 e0       	ldi	r19, 0x03	; 3
     7cc:	40 e0       	ldi	r20, 0x00	; 0
     7ce:	50 e0       	ldi	r21, 0x00	; 0
     7d0:	0e 94 93 09 	call	0x1326	; 0x1326 <__udivmodsi4>
     7d4:	2b 8b       	std	Y+19, r18	; 0x13
     7d6:	3c 8b       	std	Y+20, r19	; 0x14
     7d8:	4d 8b       	std	Y+21, r20	; 0x15
     7da:	5e 8b       	std	Y+22, r21	; 0x16
			//	usart_sendln(step_counter);	
				if(step_counter >= num_steps){
     7dc:	29 8d       	ldd	r18, Y+25	; 0x19
     7de:	3a 8d       	ldd	r19, Y+26	; 0x1a
     7e0:	8d 81       	ldd	r24, Y+5	; 0x05
     7e2:	9e 81       	ldd	r25, Y+6	; 0x06
     7e4:	28 17       	cp	r18, r24
     7e6:	39 07       	cpc	r19, r25
     7e8:	58 f0       	brcs	.+22     	; 0x800 <_ZN12StepperMotor3fsmEm+0x1ac>
							start = 0; 
     7ea:	18 82       	st	Y, r1
					#ifdef DEBUG_
						usart_send("S_DECEL ");
     7ec:	84 e1       	ldi	r24, 0x14	; 20
     7ee:	91 e0       	ldi	r25, 0x01	; 1
     7f0:	0e 94 f1 06 	call	0xde2	; 0xde2 <_Z10usart_sendPc>
						usart_sendln(pulse_width);
     7f4:	6b 89       	ldd	r22, Y+19	; 0x13
     7f6:	7c 89       	ldd	r23, Y+20	; 0x14
     7f8:	8d 89       	ldd	r24, Y+21	; 0x15
     7fa:	9e 89       	ldd	r25, Y+22	; 0x16
     7fc:	0e 94 0a 07 	call	0xe14	; 0xe14 <_Z12usart_sendlnm>
					#endif
				}
				pulse_width_counter ++;
     800:	8f 89       	ldd	r24, Y+23	; 0x17
     802:	98 8d       	ldd	r25, Y+24	; 0x18
     804:	01 96       	adiw	r24, 0x01	; 1
     806:	98 8f       	std	Y+24, r25	; 0x18
     808:	8f 8b       	std	Y+23, r24	; 0x17
				break;
		}	
		STEPPER_REGISTER &= ~step_pin;
     80a:	95 b1       	in	r25, 0x05	; 5
     80c:	8a a1       	ldd	r24, Y+34	; 0x22
     80e:	80 95       	com	r24
     810:	89 23       	and	r24, r25
     812:	85 b9       	out	0x05, r24	; 5
		step_counter++; 
     814:	89 8d       	ldd	r24, Y+25	; 0x19
     816:	9a 8d       	ldd	r25, Y+26	; 0x1a
     818:	01 96       	adiw	r24, 0x01	; 1
     81a:	9a 8f       	std	Y+26, r25	; 0x1a
     81c:	89 8f       	std	Y+25, r24	; 0x19
	}
	
	
	return state;
}
     81e:	8f a1       	ldd	r24, Y+39	; 0x27
     820:	df 91       	pop	r29
     822:	cf 91       	pop	r28
     824:	1f 91       	pop	r17
     826:	0f 91       	pop	r16
     828:	ff 90       	pop	r15
     82a:	ef 90       	pop	r14
     82c:	df 90       	pop	r13
     82e:	cf 90       	pop	r12
     830:	08 95       	ret

00000832 <_ZN12StepperMotor6rotateEm>:
} 




int StepperMotor::rotate(uint32_t current_time){
     832:	2f 92       	push	r2
     834:	3f 92       	push	r3
     836:	4f 92       	push	r4
     838:	5f 92       	push	r5
     83a:	6f 92       	push	r6
     83c:	7f 92       	push	r7
     83e:	8f 92       	push	r8
     840:	9f 92       	push	r9
     842:	af 92       	push	r10
     844:	bf 92       	push	r11
     846:	cf 92       	push	r12
     848:	df 92       	push	r13
     84a:	ef 92       	push	r14
     84c:	ff 92       	push	r15
     84e:	0f 93       	push	r16
     850:	1f 93       	push	r17
     852:	cf 93       	push	r28
     854:	df 93       	push	r29
     856:	cd b7       	in	r28, 0x3d	; 61
     858:	de b7       	in	r29, 0x3e	; 62
     85a:	60 97       	sbiw	r28, 0x10	; 16
     85c:	0f b6       	in	r0, 0x3f	; 63
     85e:	f8 94       	cli
     860:	de bf       	out	0x3e, r29	; 62
     862:	0f be       	out	0x3f, r0	; 63
     864:	cd bf       	out	0x3d, r28	; 61
     866:	98 8b       	std	Y+16, r25	; 0x10
     868:	8f 87       	std	Y+15, r24	; 0x0f
     86a:	2a 01       	movw	r4, r20
     86c:	3b 01       	movw	r6, r22
	if(start == 1){
     86e:	dc 01       	movw	r26, r24
     870:	8c 91       	ld	r24, X
     872:	81 30       	cpi	r24, 0x01	; 1
     874:	09 f0       	breq	.+2      	; 0x878 <_ZN12StepperMotor6rotateEm+0x46>
     876:	95 c1       	rjmp	.+810    	; 0xba2 <__stack+0x2a3>
		state = S_ACCEL;
     878:	82 e0       	ldi	r24, 0x02	; 2
     87a:	97 96       	adiw	r26, 0x27	; 39
     87c:	8c 93       	st	X, r24
     87e:	97 97       	sbiw	r26, 0x27	; 39
		int16_t angle=(target_pos - current_pos);
     880:	13 96       	adiw	r26, 0x03	; 3
     882:	8d 91       	ld	r24, X+
     884:	9c 91       	ld	r25, X
     886:	14 97       	sbiw	r26, 0x04	; 4
     888:	11 96       	adiw	r26, 0x01	; 1
     88a:	2d 91       	ld	r18, X+
     88c:	3c 91       	ld	r19, X
     88e:	12 97       	sbiw	r26, 0x02	; 2
     890:	8c 01       	movw	r16, r24
     892:	02 1b       	sub	r16, r18
     894:	13 0b       	sbc	r17, r19
		current_pos = target_pos;
     896:	12 96       	adiw	r26, 0x02	; 2
     898:	9c 93       	st	X, r25
     89a:	8e 93       	st	-X, r24
     89c:	11 97       	sbiw	r26, 0x01	; 1
		if(angle> 0){
     89e:	10 16       	cp	r1, r16
     8a0:	11 06       	cpc	r1, r17
     8a2:	34 f4       	brge	.+12     	; 0x8b0 <_ZN12StepperMotor6rotateEm+0x7e>
			STEPPER_REGISTER |= dir_pin; 
     8a4:	95 b1       	in	r25, 0x05	; 5
     8a6:	91 96       	adiw	r26, 0x21	; 33
     8a8:	8c 91       	ld	r24, X
     8aa:	89 2b       	or	r24, r25
     8ac:	85 b9       	out	0x05, r24	; 5
     8ae:	14 c0       	rjmp	.+40     	; 0x8d8 <_ZN12StepperMotor6rotateEm+0xa6>
		}else if(angle <0){
     8b0:	11 23       	and	r17, r17
     8b2:	5c f4       	brge	.+22     	; 0x8ca <_ZN12StepperMotor6rotateEm+0x98>
			STEPPER_REGISTER &= ~dir_pin; 
     8b4:	95 b1       	in	r25, 0x05	; 5
     8b6:	ef 85       	ldd	r30, Y+15	; 0x0f
     8b8:	f8 89       	ldd	r31, Y+16	; 0x10
     8ba:	81 a1       	ldd	r24, Z+33	; 0x21
     8bc:	80 95       	com	r24
     8be:	89 23       	and	r24, r25
     8c0:	85 b9       	out	0x05, r24	; 5
			angle = angle * -1;
     8c2:	11 95       	neg	r17
     8c4:	01 95       	neg	r16
     8c6:	11 09       	sbc	r17, r1
     8c8:	07 c0       	rjmp	.+14     	; 0x8d8 <_ZN12StepperMotor6rotateEm+0xa6>
		}else if(angle == 0){
     8ca:	01 15       	cp	r16, r1
     8cc:	11 05       	cpc	r17, r1
     8ce:	21 f4       	brne	.+8      	; 0x8d8 <_ZN12StepperMotor6rotateEm+0xa6>
			state = S_WAIT;
     8d0:	af 85       	ldd	r26, Y+15	; 0x0f
     8d2:	b8 89       	ldd	r27, Y+16	; 0x10
     8d4:	97 96       	adiw	r26, 0x27	; 39
     8d6:	1c 92       	st	X, r1
			start = 0; 
		}

		/* Compute parameters */
		num_steps = angle*step_to_angle;
     8d8:	af 85       	ldd	r26, Y+15	; 0x0f
     8da:	b8 89       	ldd	r27, Y+16	; 0x10
     8dc:	93 96       	adiw	r26, 0x23	; 35
     8de:	8d 91       	ld	r24, X+
     8e0:	9d 91       	ld	r25, X+
     8e2:	0d 90       	ld	r0, X+
     8e4:	bc 91       	ld	r27, X
     8e6:	a0 2d       	mov	r26, r0
     8e8:	89 87       	std	Y+9, r24	; 0x09
     8ea:	9a 87       	std	Y+10, r25	; 0x0a
     8ec:	ab 87       	std	Y+11, r26	; 0x0b
     8ee:	bc 87       	std	Y+12, r27	; 0x0c
     8f0:	b8 01       	movw	r22, r16
     8f2:	01 2e       	mov	r0, r17
     8f4:	00 0c       	add	r0, r0
     8f6:	88 0b       	sbc	r24, r24
     8f8:	99 0b       	sbc	r25, r25
     8fa:	0e 94 2b 08 	call	0x1056	; 0x1056 <__floatsisf>
     8fe:	29 85       	ldd	r18, Y+9	; 0x09
     900:	3a 85       	ldd	r19, Y+10	; 0x0a
     902:	4b 85       	ldd	r20, Y+11	; 0x0b
     904:	5c 85       	ldd	r21, Y+12	; 0x0c
     906:	0e 94 b7 08 	call	0x116e	; 0x116e <__mulsf3>
     90a:	0e 94 fa 07 	call	0xff4	; 0xff4 <__fixunssfsi>
     90e:	6b 01       	movw	r12, r22
     910:	7c 01       	movw	r14, r24
     912:	ef 85       	ldd	r30, Y+15	; 0x0f
     914:	f8 89       	ldd	r31, Y+16	; 0x10
     916:	76 83       	std	Z+6, r23	; 0x06
     918:	65 83       	std	Z+5, r22	; 0x05
		uint16_t vmax= 0.5*(acceleration*duration-sqrt(pow(acceleration*duration,2)-(angle*acceleration*4)));
     91a:	23 84       	ldd	r2, Z+11	; 0x0b
     91c:	34 84       	ldd	r3, Z+12	; 0x0c
     91e:	85 85       	ldd	r24, Z+13	; 0x0d
     920:	96 85       	ldd	r25, Z+14	; 0x0e
     922:	28 9e       	mul	r2, r24
     924:	b0 01       	movw	r22, r0
     926:	29 9e       	mul	r2, r25
     928:	70 0d       	add	r23, r0
     92a:	38 9e       	mul	r3, r24
     92c:	70 0d       	add	r23, r0
     92e:	11 24       	eor	r1, r1
     930:	80 e0       	ldi	r24, 0x00	; 0
     932:	90 e0       	ldi	r25, 0x00	; 0
     934:	0e 94 29 08 	call	0x1052	; 0x1052 <__floatunsisf>
     938:	69 83       	std	Y+1, r22	; 0x01
     93a:	7a 83       	std	Y+2, r23	; 0x02
     93c:	8b 83       	std	Y+3, r24	; 0x03
     93e:	9c 83       	std	Y+4, r25	; 0x04
     940:	02 9d       	mul	r16, r2
     942:	c0 01       	movw	r24, r0
     944:	03 9d       	mul	r16, r3
     946:	90 0d       	add	r25, r0
     948:	12 9d       	mul	r17, r2
     94a:	90 0d       	add	r25, r0
     94c:	11 24       	eor	r1, r1
     94e:	9e 87       	std	Y+14, r25	; 0x0e
     950:	8d 87       	std	Y+13, r24	; 0x0d
     952:	29 81       	ldd	r18, Y+1	; 0x01
     954:	3a 81       	ldd	r19, Y+2	; 0x02
     956:	4b 81       	ldd	r20, Y+3	; 0x03
     958:	5c 81       	ldd	r21, Y+4	; 0x04
     95a:	ca 01       	movw	r24, r20
     95c:	b9 01       	movw	r22, r18
     95e:	0e 94 b7 08 	call	0x116e	; 0x116e <__mulsf3>
     962:	6d 83       	std	Y+5, r22	; 0x05
     964:	7e 83       	std	Y+6, r23	; 0x06
     966:	8f 83       	std	Y+7, r24	; 0x07
     968:	98 87       	std	Y+8, r25	; 0x08
     96a:	8d 84       	ldd	r8, Y+13	; 0x0d
     96c:	9e 84       	ldd	r9, Y+14	; 0x0e
     96e:	88 0c       	add	r8, r8
     970:	99 1c       	adc	r9, r9
     972:	88 0c       	add	r8, r8
     974:	99 1c       	adc	r9, r9
     976:	a1 2c       	mov	r10, r1
     978:	b1 2c       	mov	r11, r1
     97a:	c5 01       	movw	r24, r10
     97c:	b4 01       	movw	r22, r8
     97e:	0e 94 29 08 	call	0x1052	; 0x1052 <__floatunsisf>
     982:	9b 01       	movw	r18, r22
     984:	ac 01       	movw	r20, r24
     986:	6d 81       	ldd	r22, Y+5	; 0x05
     988:	7e 81       	ldd	r23, Y+6	; 0x06
     98a:	8f 81       	ldd	r24, Y+7	; 0x07
     98c:	98 85       	ldd	r25, Y+8	; 0x08
     98e:	0e 94 14 07 	call	0xe28	; 0xe28 <__subsf3>
     992:	0e 94 2a 09 	call	0x1254	; 0x1254 <sqrt>
     996:	9b 01       	movw	r18, r22
     998:	ac 01       	movw	r20, r24
     99a:	69 81       	ldd	r22, Y+1	; 0x01
     99c:	7a 81       	ldd	r23, Y+2	; 0x02
     99e:	8b 81       	ldd	r24, Y+3	; 0x03
     9a0:	9c 81       	ldd	r25, Y+4	; 0x04
     9a2:	0e 94 14 07 	call	0xe28	; 0xe28 <__subsf3>
     9a6:	20 e0       	ldi	r18, 0x00	; 0
     9a8:	30 e0       	ldi	r19, 0x00	; 0
     9aa:	40 e0       	ldi	r20, 0x00	; 0
     9ac:	5f e3       	ldi	r21, 0x3F	; 63
     9ae:	0e 94 b7 08 	call	0x116e	; 0x116e <__mulsf3>
     9b2:	0e 94 fa 07 	call	0xff4	; 0xff4 <__fixunssfsi>
     9b6:	4b 01       	movw	r8, r22
     9b8:	5c 01       	movw	r10, r24
		t0=(pow(vmax,2)*num_steps)/(2*angle*acceleration);
     9ba:	80 e0       	ldi	r24, 0x00	; 0
     9bc:	90 e0       	ldi	r25, 0x00	; 0
     9be:	0e 94 29 08 	call	0x1052	; 0x1052 <__floatunsisf>
     9c2:	69 83       	std	Y+1, r22	; 0x01
     9c4:	7a 83       	std	Y+2, r23	; 0x02
     9c6:	8b 83       	std	Y+3, r24	; 0x03
     9c8:	9c 83       	std	Y+4, r25	; 0x04
     9ca:	b6 01       	movw	r22, r12
     9cc:	80 e0       	ldi	r24, 0x00	; 0
     9ce:	90 e0       	ldi	r25, 0x00	; 0
     9d0:	0e 94 29 08 	call	0x1052	; 0x1052 <__floatunsisf>
     9d4:	6d 83       	std	Y+5, r22	; 0x05
     9d6:	7e 83       	std	Y+6, r23	; 0x06
     9d8:	8f 83       	std	Y+7, r24	; 0x07
     9da:	98 87       	std	Y+8, r25	; 0x08
     9dc:	29 81       	ldd	r18, Y+1	; 0x01
     9de:	3a 81       	ldd	r19, Y+2	; 0x02
     9e0:	4b 81       	ldd	r20, Y+3	; 0x03
     9e2:	5c 81       	ldd	r21, Y+4	; 0x04
     9e4:	ca 01       	movw	r24, r20
     9e6:	b9 01       	movw	r22, r18
     9e8:	0e 94 b7 08 	call	0x116e	; 0x116e <__mulsf3>
     9ec:	9b 01       	movw	r18, r22
     9ee:	ac 01       	movw	r20, r24
     9f0:	6d 81       	ldd	r22, Y+5	; 0x05
     9f2:	7e 81       	ldd	r23, Y+6	; 0x06
     9f4:	8f 81       	ldd	r24, Y+7	; 0x07
     9f6:	98 85       	ldd	r25, Y+8	; 0x08
     9f8:	0e 94 b7 08 	call	0x116e	; 0x116e <__mulsf3>
     9fc:	69 83       	std	Y+1, r22	; 0x01
     9fe:	7a 83       	std	Y+2, r23	; 0x02
     a00:	8b 83       	std	Y+3, r24	; 0x03
     a02:	9c 83       	std	Y+4, r25	; 0x04
     a04:	6d 85       	ldd	r22, Y+13	; 0x0d
     a06:	7e 85       	ldd	r23, Y+14	; 0x0e
     a08:	66 0f       	add	r22, r22
     a0a:	77 1f       	adc	r23, r23
     a0c:	80 e0       	ldi	r24, 0x00	; 0
     a0e:	90 e0       	ldi	r25, 0x00	; 0
     a10:	0e 94 29 08 	call	0x1052	; 0x1052 <__floatunsisf>
     a14:	9b 01       	movw	r18, r22
     a16:	ac 01       	movw	r20, r24
     a18:	69 81       	ldd	r22, Y+1	; 0x01
     a1a:	7a 81       	ldd	r23, Y+2	; 0x02
     a1c:	8b 81       	ldd	r24, Y+3	; 0x03
     a1e:	9c 81       	ldd	r25, Y+4	; 0x04
     a20:	0e 94 81 07 	call	0xf02	; 0xf02 <__divsf3>
     a24:	0e 94 fa 07 	call	0xff4	; 0xff4 <__fixunssfsi>
     a28:	af 85       	ldd	r26, Y+15	; 0x0f
     a2a:	b8 89       	ldd	r27, Y+16	; 0x10
     a2c:	18 96       	adiw	r26, 0x08	; 8
     a2e:	7c 93       	st	X, r23
     a30:	6e 93       	st	-X, r22
     a32:	17 97       	sbiw	r26, 0x07	; 7
		t1 =num_steps-t0;
     a34:	c6 01       	movw	r24, r12
     a36:	86 1b       	sub	r24, r22
     a38:	97 0b       	sbc	r25, r23
     a3a:	1a 96       	adiw	r26, 0x0a	; 10
     a3c:	9c 93       	st	X, r25
     a3e:	8e 93       	st	-X, r24
     a40:	19 97       	sbiw	r26, 0x09	; 9
		long_pulse_width =10000* sqrt(2/(acceleration*step_to_angle)) * S_SCALER;
     a42:	61 01       	movw	r12, r2
     a44:	e1 2c       	mov	r14, r1
     a46:	f1 2c       	mov	r15, r1
     a48:	c7 01       	movw	r24, r14
     a4a:	b6 01       	movw	r22, r12
     a4c:	0e 94 29 08 	call	0x1052	; 0x1052 <__floatunsisf>
     a50:	29 85       	ldd	r18, Y+9	; 0x09
     a52:	3a 85       	ldd	r19, Y+10	; 0x0a
     a54:	4b 85       	ldd	r20, Y+11	; 0x0b
     a56:	5c 85       	ldd	r21, Y+12	; 0x0c
     a58:	0e 94 b7 08 	call	0x116e	; 0x116e <__mulsf3>
     a5c:	9b 01       	movw	r18, r22
     a5e:	ac 01       	movw	r20, r24
     a60:	60 e0       	ldi	r22, 0x00	; 0
     a62:	70 e0       	ldi	r23, 0x00	; 0
     a64:	80 e0       	ldi	r24, 0x00	; 0
     a66:	90 e4       	ldi	r25, 0x40	; 64
     a68:	0e 94 81 07 	call	0xf02	; 0xf02 <__divsf3>
     a6c:	0e 94 2a 09 	call	0x1254	; 0x1254 <sqrt>
     a70:	20 e0       	ldi	r18, 0x00	; 0
     a72:	30 e4       	ldi	r19, 0x40	; 64
     a74:	4c e1       	ldi	r20, 0x1C	; 28
     a76:	56 e4       	ldi	r21, 0x46	; 70
     a78:	0e 94 b7 08 	call	0x116e	; 0x116e <__mulsf3>
     a7c:	20 e0       	ldi	r18, 0x00	; 0
     a7e:	30 e0       	ldi	r19, 0x00	; 0
     a80:	4a e7       	ldi	r20, 0x7A	; 122
     a82:	54 e4       	ldi	r21, 0x44	; 68
     a84:	0e 94 b7 08 	call	0x116e	; 0x116e <__mulsf3>
     a88:	0e 94 f3 07 	call	0xfe6	; 0xfe6 <__fixsfsi>
     a8c:	ef 85       	ldd	r30, Y+15	; 0x0f
     a8e:	f8 89       	ldd	r31, Y+16	; 0x10
     a90:	67 87       	std	Z+15, r22	; 0x0f
     a92:	70 8b       	std	Z+16, r23	; 0x10
     a94:	81 8b       	std	Z+17, r24	; 0x11
     a96:	92 8b       	std	Z+18, r25	; 0x12
		/* End  computations */

		step_counter  = 0;
     a98:	12 8e       	std	Z+26, r1	; 0x1a
     a9a:	11 8e       	std	Z+25, r1	; 0x19
		pulse_width_counter  = 1; 
     a9c:	21 e0       	ldi	r18, 0x01	; 1
     a9e:	30 e0       	ldi	r19, 0x00	; 0
     aa0:	30 8f       	std	Z+24, r19	; 0x18
     aa2:	27 8b       	std	Z+23, r18	; 0x17
		pulse_width = long_pulse_width / S_SCALER;
     aa4:	28 ee       	ldi	r18, 0xE8	; 232
     aa6:	33 e0       	ldi	r19, 0x03	; 3
     aa8:	40 e0       	ldi	r20, 0x00	; 0
     aaa:	50 e0       	ldi	r21, 0x00	; 0
     aac:	0e 94 93 09 	call	0x1326	; 0x1326 <__udivmodsi4>
     ab0:	af 85       	ldd	r26, Y+15	; 0x0f
     ab2:	b8 89       	ldd	r27, Y+16	; 0x10
     ab4:	53 96       	adiw	r26, 0x13	; 19
     ab6:	2d 93       	st	X+, r18
     ab8:	3d 93       	st	X+, r19
     aba:	4d 93       	st	X+, r20
     abc:	5c 93       	st	X, r21
     abe:	56 97       	sbiw	r26, 0x16	; 22
		start = 2; 
     ac0:	82 e0       	ldi	r24, 0x02	; 2
     ac2:	8c 93       	st	X, r24
		#ifdef DEBUG_
		
		usart_sendln("####################"); 
     ac4:	8d e1       	ldi	r24, 0x1D	; 29
     ac6:	91 e0       	ldi	r25, 0x01	; 1
     ac8:	0e 94 05 07 	call	0xe0a	; 0xe0a <_Z12usart_sendlnPc>
		usart_send("Angle ");usart_sendln((int)angle);  
     acc:	82 e3       	ldi	r24, 0x32	; 50
     ace:	91 e0       	ldi	r25, 0x01	; 1
     ad0:	0e 94 f1 06 	call	0xde2	; 0xde2 <_Z10usart_sendPc>
     ad4:	c8 01       	movw	r24, r16
     ad6:	0e 94 00 07 	call	0xe00	; 0xe00 <_Z12usart_sendlni>
		usart_send("duration ");usart_sendln((int)duration);
     ada:	89 e3       	ldi	r24, 0x39	; 57
     adc:	91 e0       	ldi	r25, 0x01	; 1
     ade:	0e 94 f1 06 	call	0xde2	; 0xde2 <_Z10usart_sendPc>
     ae2:	ef 85       	ldd	r30, Y+15	; 0x0f
     ae4:	f8 89       	ldd	r31, Y+16	; 0x10
     ae6:	85 85       	ldd	r24, Z+13	; 0x0d
     ae8:	96 85       	ldd	r25, Z+14	; 0x0e
     aea:	0e 94 00 07 	call	0xe00	; 0xe00 <_Z12usart_sendlni>
		usart_send("Acceleration ");usart_sendln((int)acceleration);
     aee:	83 e4       	ldi	r24, 0x43	; 67
     af0:	91 e0       	ldi	r25, 0x01	; 1
     af2:	0e 94 f1 06 	call	0xde2	; 0xde2 <_Z10usart_sendPc>
     af6:	af 85       	ldd	r26, Y+15	; 0x0f
     af8:	b8 89       	ldd	r27, Y+16	; 0x10
     afa:	1b 96       	adiw	r26, 0x0b	; 11
     afc:	8d 91       	ld	r24, X+
     afe:	9c 91       	ld	r25, X
     b00:	1c 97       	sbiw	r26, 0x0c	; 12
     b02:	0e 94 00 07 	call	0xe00	; 0xe00 <_Z12usart_sendlni>
		usart_send("vmax ");usart_sendln((int)vmax); 			
     b06:	81 e5       	ldi	r24, 0x51	; 81
     b08:	91 e0       	ldi	r25, 0x01	; 1
     b0a:	0e 94 f1 06 	call	0xde2	; 0xde2 <_Z10usart_sendPc>
     b0e:	c4 01       	movw	r24, r8
     b10:	0e 94 00 07 	call	0xe00	; 0xe00 <_Z12usart_sendlni>
		usart_send("#n ");usart_sendln((int)num_steps); 			
     b14:	87 e5       	ldi	r24, 0x57	; 87
     b16:	91 e0       	ldi	r25, 0x01	; 1
     b18:	0e 94 f1 06 	call	0xde2	; 0xde2 <_Z10usart_sendPc>
     b1c:	ef 85       	ldd	r30, Y+15	; 0x0f
     b1e:	f8 89       	ldd	r31, Y+16	; 0x10
     b20:	85 81       	ldd	r24, Z+5	; 0x05
     b22:	96 81       	ldd	r25, Z+6	; 0x06
     b24:	0e 94 00 07 	call	0xe00	; 0xe00 <_Z12usart_sendlni>
		usart_send("t0 ");usart_sendln((int)t0); 			
     b28:	8b e5       	ldi	r24, 0x5B	; 91
     b2a:	91 e0       	ldi	r25, 0x01	; 1
     b2c:	0e 94 f1 06 	call	0xde2	; 0xde2 <_Z10usart_sendPc>
     b30:	af 85       	ldd	r26, Y+15	; 0x0f
     b32:	b8 89       	ldd	r27, Y+16	; 0x10
     b34:	17 96       	adiw	r26, 0x07	; 7
     b36:	8d 91       	ld	r24, X+
     b38:	9c 91       	ld	r25, X
     b3a:	18 97       	sbiw	r26, 0x08	; 8
     b3c:	0e 94 00 07 	call	0xe00	; 0xe00 <_Z12usart_sendlni>
		usart_send("t1 ");usart_sendln((int)t1); 			
     b40:	8f e5       	ldi	r24, 0x5F	; 95
     b42:	91 e0       	ldi	r25, 0x01	; 1
     b44:	0e 94 f1 06 	call	0xde2	; 0xde2 <_Z10usart_sendPc>
     b48:	ef 85       	ldd	r30, Y+15	; 0x0f
     b4a:	f8 89       	ldd	r31, Y+16	; 0x10
     b4c:	81 85       	ldd	r24, Z+9	; 0x09
     b4e:	92 85       	ldd	r25, Z+10	; 0x0a
     b50:	0e 94 00 07 	call	0xe00	; 0xe00 <_Z12usart_sendlni>
		usart_send("Long Step time ");usart_sendln(long_pulse_width);
     b54:	83 e6       	ldi	r24, 0x63	; 99
     b56:	91 e0       	ldi	r25, 0x01	; 1
     b58:	0e 94 f1 06 	call	0xde2	; 0xde2 <_Z10usart_sendPc>
     b5c:	af 85       	ldd	r26, Y+15	; 0x0f
     b5e:	b8 89       	ldd	r27, Y+16	; 0x10
     b60:	1f 96       	adiw	r26, 0x0f	; 15
     b62:	6d 91       	ld	r22, X+
     b64:	7d 91       	ld	r23, X+
     b66:	8d 91       	ld	r24, X+
     b68:	9c 91       	ld	r25, X
     b6a:	52 97       	sbiw	r26, 0x12	; 18
     b6c:	0e 94 0f 07 	call	0xe1e	; 0xe1e <_Z12usart_sendlnl>
		usart_send("Step time ");usart_sendln(pulse_width);
     b70:	88 e6       	ldi	r24, 0x68	; 104
     b72:	91 e0       	ldi	r25, 0x01	; 1
     b74:	0e 94 f1 06 	call	0xde2	; 0xde2 <_Z10usart_sendPc>
     b78:	ef 85       	ldd	r30, Y+15	; 0x0f
     b7a:	f8 89       	ldd	r31, Y+16	; 0x10
     b7c:	63 89       	ldd	r22, Z+19	; 0x13
     b7e:	74 89       	ldd	r23, Z+20	; 0x14
     b80:	85 89       	ldd	r24, Z+21	; 0x15
     b82:	96 89       	ldd	r25, Z+22	; 0x16
     b84:	0e 94 0a 07 	call	0xe14	; 0xe14 <_Z12usart_sendlnm>
		usart_sendln("####################"); 		
     b88:	8d e1       	ldi	r24, 0x1D	; 29
     b8a:	91 e0       	ldi	r25, 0x01	; 1
     b8c:	0e 94 05 07 	call	0xe0a	; 0xe0a <_Z12usart_sendlnPc>
		#endif // DEBUG
		stepper_time = current_time; 
     b90:	af 85       	ldd	r26, Y+15	; 0x0f
     b92:	b8 89       	ldd	r27, Y+16	; 0x10
     b94:	5d 96       	adiw	r26, 0x1d	; 29
     b96:	4d 92       	st	X+, r4
     b98:	5d 92       	st	X+, r5
     b9a:	6d 92       	st	X+, r6
     b9c:	7c 92       	st	X, r7
     b9e:	90 97       	sbiw	r26, 0x20	; 32
     ba0:	06 c0       	rjmp	.+12     	; 0xbae <__stack+0x2af>
	}else if(start == 2){
     ba2:	82 30       	cpi	r24, 0x02	; 2
     ba4:	21 f4       	brne	.+8      	; 0xbae <__stack+0x2af>
		fsm(current_time); 
     ba6:	8f 85       	ldd	r24, Y+15	; 0x0f
     ba8:	98 89       	ldd	r25, Y+16	; 0x10
     baa:	0e 94 2a 03 	call	0x654	; 0x654 <_ZN12StepperMotor3fsmEm>
	}

}
     bae:	60 96       	adiw	r28, 0x10	; 16
     bb0:	0f b6       	in	r0, 0x3f	; 63
     bb2:	f8 94       	cli
     bb4:	de bf       	out	0x3e, r29	; 62
     bb6:	0f be       	out	0x3f, r0	; 63
     bb8:	cd bf       	out	0x3d, r28	; 61
     bba:	df 91       	pop	r29
     bbc:	cf 91       	pop	r28
     bbe:	1f 91       	pop	r17
     bc0:	0f 91       	pop	r16
     bc2:	ff 90       	pop	r15
     bc4:	ef 90       	pop	r14
     bc6:	df 90       	pop	r13
     bc8:	cf 90       	pop	r12
     bca:	bf 90       	pop	r11
     bcc:	af 90       	pop	r10
     bce:	9f 90       	pop	r9
     bd0:	8f 90       	pop	r8
     bd2:	7f 90       	pop	r7
     bd4:	6f 90       	pop	r6
     bd6:	5f 90       	pop	r5
     bd8:	4f 90       	pop	r4
     bda:	3f 90       	pop	r3
     bdc:	2f 90       	pop	r2
     bde:	08 95       	ret

00000be0 <_Z12timer_enablev>:
	timer_counter = 0; 
}

//Reset the counter
void timer_reset(){
	timer_counter = 0; 
     be0:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
     be4:	e1 e8       	ldi	r30, 0x81	; 129
     be6:	f0 e0       	ldi	r31, 0x00	; 0
     be8:	10 82       	st	Z, r1
     bea:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
     bee:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
     bf2:	88 e1       	ldi	r24, 0x18	; 24
     bf4:	90 e0       	ldi	r25, 0x00	; 0
     bf6:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__DATA_REGION_ORIGIN__+0x29>
     bfa:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__DATA_REGION_ORIGIN__+0x28>
     bfe:	80 81       	ld	r24, Z
     c00:	88 60       	ori	r24, 0x08	; 8
     c02:	80 83       	st	Z, r24
     c04:	80 81       	ld	r24, Z
     c06:	83 60       	ori	r24, 0x03	; 3
     c08:	80 83       	st	Z, r24
     c0a:	ef e6       	ldi	r30, 0x6F	; 111
     c0c:	f0 e0       	ldi	r31, 0x00	; 0
     c0e:	80 81       	ld	r24, Z
     c10:	82 60       	ori	r24, 0x02	; 2
     c12:	80 83       	st	Z, r24
     c14:	10 92 8a 01 	sts	0x018A, r1	; 0x80018a <timer_counter>
     c18:	10 92 8b 01 	sts	0x018B, r1	; 0x80018b <timer_counter+0x1>
     c1c:	10 92 8c 01 	sts	0x018C, r1	; 0x80018c <timer_counter+0x2>
     c20:	10 92 8d 01 	sts	0x018D, r1	; 0x80018d <timer_counter+0x3>
     c24:	08 95       	ret

00000c26 <_Z9timer_10kv>:
}

//Return the elapsed time since the counter was enable 
uint32_t timer_10k(){
	return timer_counter;
     c26:	60 91 8a 01 	lds	r22, 0x018A	; 0x80018a <timer_counter>
     c2a:	70 91 8b 01 	lds	r23, 0x018B	; 0x80018b <timer_counter+0x1>
     c2e:	80 91 8c 01 	lds	r24, 0x018C	; 0x80018c <timer_counter+0x2>
     c32:	90 91 8d 01 	lds	r25, 0x018D	; 0x80018d <timer_counter+0x3>
}
     c36:	08 95       	ret

00000c38 <__vector_11>:

//interrupt vector 
ISR (TIMER1_COMPA_vect) {
     c38:	1f 92       	push	r1
     c3a:	0f 92       	push	r0
     c3c:	0f b6       	in	r0, 0x3f	; 63
     c3e:	0f 92       	push	r0
     c40:	11 24       	eor	r1, r1
     c42:	8f 93       	push	r24
     c44:	9f 93       	push	r25
     c46:	af 93       	push	r26
     c48:	bf 93       	push	r27
	timer_counter++;
     c4a:	80 91 8a 01 	lds	r24, 0x018A	; 0x80018a <timer_counter>
     c4e:	90 91 8b 01 	lds	r25, 0x018B	; 0x80018b <timer_counter+0x1>
     c52:	a0 91 8c 01 	lds	r26, 0x018C	; 0x80018c <timer_counter+0x2>
     c56:	b0 91 8d 01 	lds	r27, 0x018D	; 0x80018d <timer_counter+0x3>
     c5a:	01 96       	adiw	r24, 0x01	; 1
     c5c:	a1 1d       	adc	r26, r1
     c5e:	b1 1d       	adc	r27, r1
     c60:	80 93 8a 01 	sts	0x018A, r24	; 0x80018a <timer_counter>
     c64:	90 93 8b 01 	sts	0x018B, r25	; 0x80018b <timer_counter+0x1>
     c68:	a0 93 8c 01 	sts	0x018C, r26	; 0x80018c <timer_counter+0x2>
     c6c:	b0 93 8d 01 	sts	0x018D, r27	; 0x80018d <timer_counter+0x3>
     c70:	bf 91       	pop	r27
     c72:	af 91       	pop	r26
     c74:	9f 91       	pop	r25
     c76:	8f 91       	pop	r24
     c78:	0f 90       	pop	r0
     c7a:	0f be       	out	0x3f, r0	; 63
     c7c:	0f 90       	pop	r0
     c7e:	1f 90       	pop	r1
     c80:	18 95       	reti

00000c82 <_Z12usart_enablej>:
	usart_newline();
}

void usart_sendln(uint16_t number){
	usart_send(number);
	usart_newline();
     c82:	28 e9       	ldi	r18, 0x98	; 152
     c84:	20 93 c1 00 	sts	0x00C1, r18	; 0x8000c1 <__DATA_REGION_ORIGIN__+0x61>
     c88:	26 e0       	ldi	r18, 0x06	; 6
     c8a:	20 93 c2 00 	sts	0x00C2, r18	; 0x8000c2 <__DATA_REGION_ORIGIN__+0x62>
     c8e:	bc 01       	movw	r22, r24
     c90:	80 e0       	ldi	r24, 0x00	; 0
     c92:	90 e0       	ldi	r25, 0x00	; 0
     c94:	0e 94 29 08 	call	0x1052	; 0x1052 <__floatunsisf>
     c98:	20 e0       	ldi	r18, 0x00	; 0
     c9a:	30 e0       	ldi	r19, 0x00	; 0
     c9c:	40 e8       	ldi	r20, 0x80	; 128
     c9e:	51 e4       	ldi	r21, 0x41	; 65
     ca0:	0e 94 b7 08 	call	0x116e	; 0x116e <__mulsf3>
     ca4:	9b 01       	movw	r18, r22
     ca6:	ac 01       	movw	r20, r24
     ca8:	60 e0       	ldi	r22, 0x00	; 0
     caa:	74 e2       	ldi	r23, 0x24	; 36
     cac:	84 e7       	ldi	r24, 0x74	; 116
     cae:	9b e4       	ldi	r25, 0x4B	; 75
     cb0:	0e 94 81 07 	call	0xf02	; 0xf02 <__divsf3>
     cb4:	20 e0       	ldi	r18, 0x00	; 0
     cb6:	30 e0       	ldi	r19, 0x00	; 0
     cb8:	40 e8       	ldi	r20, 0x80	; 128
     cba:	5f e3       	ldi	r21, 0x3F	; 63
     cbc:	0e 94 14 07 	call	0xe28	; 0xe28 <__subsf3>
     cc0:	0e 94 fa 07 	call	0xff4	; 0xff4 <__fixunssfsi>
     cc4:	70 93 c5 00 	sts	0x00C5, r23	; 0x8000c5 <__DATA_REGION_ORIGIN__+0x65>
     cc8:	60 93 c4 00 	sts	0x00C4, r22	; 0x8000c4 <__DATA_REGION_ORIGIN__+0x64>
     ccc:	08 95       	ret

00000cce <_Z10usart_sendc>:
     cce:	e0 ec       	ldi	r30, 0xC0	; 192
     cd0:	f0 e0       	ldi	r31, 0x00	; 0
     cd2:	90 81       	ld	r25, Z
     cd4:	95 ff       	sbrs	r25, 5
     cd6:	fd cf       	rjmp	.-6      	; 0xcd2 <_Z10usart_sendc+0x4>
     cd8:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
     cdc:	08 95       	ret

00000cde <_Z13usart_newlinev>:
     cde:	8a e0       	ldi	r24, 0x0A	; 10
     ce0:	0e 94 67 06 	call	0xcce	; 0xcce <_Z10usart_sendc>
     ce4:	08 95       	ret

00000ce6 <_Z10usart_sendi>:
     ce6:	0f 93       	push	r16
     ce8:	1f 93       	push	r17
     cea:	cf 93       	push	r28
     cec:	df 93       	push	r29
     cee:	cd b7       	in	r28, 0x3d	; 61
     cf0:	de b7       	in	r29, 0x3e	; 62
     cf2:	2a 97       	sbiw	r28, 0x0a	; 10
     cf4:	0f b6       	in	r0, 0x3f	; 63
     cf6:	f8 94       	cli
     cf8:	de bf       	out	0x3e, r29	; 62
     cfa:	0f be       	out	0x3f, r0	; 63
     cfc:	cd bf       	out	0x3d, r28	; 61
     cfe:	4a e0       	ldi	r20, 0x0A	; 10
     d00:	be 01       	movw	r22, r28
     d02:	6f 5f       	subi	r22, 0xFF	; 255
     d04:	7f 4f       	sbci	r23, 0xFF	; 255
     d06:	0e 94 d4 09 	call	0x13a8	; 0x13a8 <__itoa_ncheck>
     d0a:	89 81       	ldd	r24, Y+1	; 0x01
     d0c:	88 23       	and	r24, r24
     d0e:	51 f0       	breq	.+20     	; 0xd24 <_Z10usart_sendi+0x3e>
     d10:	8e 01       	movw	r16, r28
     d12:	0e 5f       	subi	r16, 0xFE	; 254
     d14:	1f 4f       	sbci	r17, 0xFF	; 255
     d16:	0e 94 67 06 	call	0xcce	; 0xcce <_Z10usart_sendc>
     d1a:	f8 01       	movw	r30, r16
     d1c:	81 91       	ld	r24, Z+
     d1e:	8f 01       	movw	r16, r30
     d20:	81 11       	cpse	r24, r1
     d22:	f9 cf       	rjmp	.-14     	; 0xd16 <_Z10usart_sendi+0x30>
     d24:	2a 96       	adiw	r28, 0x0a	; 10
     d26:	0f b6       	in	r0, 0x3f	; 63
     d28:	f8 94       	cli
     d2a:	de bf       	out	0x3e, r29	; 62
     d2c:	0f be       	out	0x3f, r0	; 63
     d2e:	cd bf       	out	0x3d, r28	; 61
     d30:	df 91       	pop	r29
     d32:	cf 91       	pop	r28
     d34:	1f 91       	pop	r17
     d36:	0f 91       	pop	r16
     d38:	08 95       	ret

00000d3a <_Z10usart_sendl>:
     d3a:	0f 93       	push	r16
     d3c:	1f 93       	push	r17
     d3e:	cf 93       	push	r28
     d40:	df 93       	push	r29
     d42:	cd b7       	in	r28, 0x3d	; 61
     d44:	de b7       	in	r29, 0x3e	; 62
     d46:	2b 97       	sbiw	r28, 0x0b	; 11
     d48:	0f b6       	in	r0, 0x3f	; 63
     d4a:	f8 94       	cli
     d4c:	de bf       	out	0x3e, r29	; 62
     d4e:	0f be       	out	0x3f, r0	; 63
     d50:	cd bf       	out	0x3d, r28	; 61
     d52:	2a e0       	ldi	r18, 0x0A	; 10
     d54:	ae 01       	movw	r20, r28
     d56:	4f 5f       	subi	r20, 0xFF	; 255
     d58:	5f 4f       	sbci	r21, 0xFF	; 255
     d5a:	0e 94 df 09 	call	0x13be	; 0x13be <__ltoa_ncheck>
     d5e:	89 81       	ldd	r24, Y+1	; 0x01
     d60:	88 23       	and	r24, r24
     d62:	51 f0       	breq	.+20     	; 0xd78 <_Z10usart_sendl+0x3e>
     d64:	8e 01       	movw	r16, r28
     d66:	0e 5f       	subi	r16, 0xFE	; 254
     d68:	1f 4f       	sbci	r17, 0xFF	; 255
     d6a:	0e 94 67 06 	call	0xcce	; 0xcce <_Z10usart_sendc>
     d6e:	f8 01       	movw	r30, r16
     d70:	81 91       	ld	r24, Z+
     d72:	8f 01       	movw	r16, r30
     d74:	81 11       	cpse	r24, r1
     d76:	f9 cf       	rjmp	.-14     	; 0xd6a <_Z10usart_sendl+0x30>
     d78:	2b 96       	adiw	r28, 0x0b	; 11
     d7a:	0f b6       	in	r0, 0x3f	; 63
     d7c:	f8 94       	cli
     d7e:	de bf       	out	0x3e, r29	; 62
     d80:	0f be       	out	0x3f, r0	; 63
     d82:	cd bf       	out	0x3d, r28	; 61
     d84:	df 91       	pop	r29
     d86:	cf 91       	pop	r28
     d88:	1f 91       	pop	r17
     d8a:	0f 91       	pop	r16
     d8c:	08 95       	ret

00000d8e <_Z10usart_sendm>:
     d8e:	0f 93       	push	r16
     d90:	1f 93       	push	r17
     d92:	cf 93       	push	r28
     d94:	df 93       	push	r29
     d96:	cd b7       	in	r28, 0x3d	; 61
     d98:	de b7       	in	r29, 0x3e	; 62
     d9a:	2b 97       	sbiw	r28, 0x0b	; 11
     d9c:	0f b6       	in	r0, 0x3f	; 63
     d9e:	f8 94       	cli
     da0:	de bf       	out	0x3e, r29	; 62
     da2:	0f be       	out	0x3f, r0	; 63
     da4:	cd bf       	out	0x3d, r28	; 61
     da6:	2a e0       	ldi	r18, 0x0A	; 10
     da8:	ae 01       	movw	r20, r28
     daa:	4f 5f       	subi	r20, 0xFF	; 255
     dac:	5f 4f       	sbci	r21, 0xFF	; 255
     dae:	0e 94 ee 09 	call	0x13dc	; 0x13dc <__ultoa_ncheck>
     db2:	89 81       	ldd	r24, Y+1	; 0x01
     db4:	88 23       	and	r24, r24
     db6:	51 f0       	breq	.+20     	; 0xdcc <_Z10usart_sendm+0x3e>
     db8:	8e 01       	movw	r16, r28
     dba:	0e 5f       	subi	r16, 0xFE	; 254
     dbc:	1f 4f       	sbci	r17, 0xFF	; 255
     dbe:	0e 94 67 06 	call	0xcce	; 0xcce <_Z10usart_sendc>
     dc2:	f8 01       	movw	r30, r16
     dc4:	81 91       	ld	r24, Z+
     dc6:	8f 01       	movw	r16, r30
     dc8:	81 11       	cpse	r24, r1
     dca:	f9 cf       	rjmp	.-14     	; 0xdbe <_Z10usart_sendm+0x30>
     dcc:	2b 96       	adiw	r28, 0x0b	; 11
     dce:	0f b6       	in	r0, 0x3f	; 63
     dd0:	f8 94       	cli
     dd2:	de bf       	out	0x3e, r29	; 62
     dd4:	0f be       	out	0x3f, r0	; 63
     dd6:	cd bf       	out	0x3d, r28	; 61
     dd8:	df 91       	pop	r29
     dda:	cf 91       	pop	r28
     ddc:	1f 91       	pop	r17
     dde:	0f 91       	pop	r16
     de0:	08 95       	ret

00000de2 <_Z10usart_sendPc>:
     de2:	cf 93       	push	r28
     de4:	df 93       	push	r29
     de6:	ec 01       	movw	r28, r24
     de8:	88 81       	ld	r24, Y
     dea:	88 23       	and	r24, r24
     dec:	31 f0       	breq	.+12     	; 0xdfa <_Z10usart_sendPc+0x18>
     dee:	21 96       	adiw	r28, 0x01	; 1
     df0:	0e 94 67 06 	call	0xcce	; 0xcce <_Z10usart_sendc>
     df4:	89 91       	ld	r24, Y+
     df6:	81 11       	cpse	r24, r1
     df8:	fb cf       	rjmp	.-10     	; 0xdf0 <_Z10usart_sendPc+0xe>
     dfa:	df 91       	pop	r29
     dfc:	cf 91       	pop	r28
     dfe:	08 95       	ret

00000e00 <_Z12usart_sendlni>:
     e00:	0e 94 73 06 	call	0xce6	; 0xce6 <_Z10usart_sendi>
     e04:	0e 94 6f 06 	call	0xcde	; 0xcde <_Z13usart_newlinev>
     e08:	08 95       	ret

00000e0a <_Z12usart_sendlnPc>:
     e0a:	0e 94 f1 06 	call	0xde2	; 0xde2 <_Z10usart_sendPc>
     e0e:	0e 94 6f 06 	call	0xcde	; 0xcde <_Z13usart_newlinev>
     e12:	08 95       	ret

00000e14 <_Z12usart_sendlnm>:
     e14:	0e 94 c7 06 	call	0xd8e	; 0xd8e <_Z10usart_sendm>
     e18:	0e 94 6f 06 	call	0xcde	; 0xcde <_Z13usart_newlinev>
     e1c:	08 95       	ret

00000e1e <_Z12usart_sendlnl>:
}

void usart_sendln(int32_t number){
	usart_send(number);
     e1e:	0e 94 9d 06 	call	0xd3a	; 0xd3a <_Z10usart_sendl>
	usart_newline();
     e22:	0e 94 6f 06 	call	0xcde	; 0xcde <_Z13usart_newlinev>
     e26:	08 95       	ret

00000e28 <__subsf3>:
     e28:	50 58       	subi	r21, 0x80	; 128

00000e2a <__addsf3>:
     e2a:	bb 27       	eor	r27, r27
     e2c:	aa 27       	eor	r26, r26
     e2e:	0e 94 2c 07 	call	0xe58	; 0xe58 <__addsf3x>
     e32:	0c 94 7d 08 	jmp	0x10fa	; 0x10fa <__fp_round>
     e36:	0e 94 6f 08 	call	0x10de	; 0x10de <__fp_pscA>
     e3a:	38 f0       	brcs	.+14     	; 0xe4a <__addsf3+0x20>
     e3c:	0e 94 76 08 	call	0x10ec	; 0x10ec <__fp_pscB>
     e40:	20 f0       	brcs	.+8      	; 0xe4a <__addsf3+0x20>
     e42:	39 f4       	brne	.+14     	; 0xe52 <__addsf3+0x28>
     e44:	9f 3f       	cpi	r25, 0xFF	; 255
     e46:	19 f4       	brne	.+6      	; 0xe4e <__addsf3+0x24>
     e48:	26 f4       	brtc	.+8      	; 0xe52 <__addsf3+0x28>
     e4a:	0c 94 6c 08 	jmp	0x10d8	; 0x10d8 <__fp_nan>
     e4e:	0e f4       	brtc	.+2      	; 0xe52 <__addsf3+0x28>
     e50:	e0 95       	com	r30
     e52:	e7 fb       	bst	r30, 7
     e54:	0c 94 66 08 	jmp	0x10cc	; 0x10cc <__fp_inf>

00000e58 <__addsf3x>:
     e58:	e9 2f       	mov	r30, r25
     e5a:	0e 94 8e 08 	call	0x111c	; 0x111c <__fp_split3>
     e5e:	58 f3       	brcs	.-42     	; 0xe36 <__addsf3+0xc>
     e60:	ba 17       	cp	r27, r26
     e62:	62 07       	cpc	r22, r18
     e64:	73 07       	cpc	r23, r19
     e66:	84 07       	cpc	r24, r20
     e68:	95 07       	cpc	r25, r21
     e6a:	20 f0       	brcs	.+8      	; 0xe74 <__addsf3x+0x1c>
     e6c:	79 f4       	brne	.+30     	; 0xe8c <__addsf3x+0x34>
     e6e:	a6 f5       	brtc	.+104    	; 0xed8 <__addsf3x+0x80>
     e70:	0c 94 b0 08 	jmp	0x1160	; 0x1160 <__fp_zero>
     e74:	0e f4       	brtc	.+2      	; 0xe78 <__addsf3x+0x20>
     e76:	e0 95       	com	r30
     e78:	0b 2e       	mov	r0, r27
     e7a:	ba 2f       	mov	r27, r26
     e7c:	a0 2d       	mov	r26, r0
     e7e:	0b 01       	movw	r0, r22
     e80:	b9 01       	movw	r22, r18
     e82:	90 01       	movw	r18, r0
     e84:	0c 01       	movw	r0, r24
     e86:	ca 01       	movw	r24, r20
     e88:	a0 01       	movw	r20, r0
     e8a:	11 24       	eor	r1, r1
     e8c:	ff 27       	eor	r31, r31
     e8e:	59 1b       	sub	r21, r25
     e90:	99 f0       	breq	.+38     	; 0xeb8 <__addsf3x+0x60>
     e92:	59 3f       	cpi	r21, 0xF9	; 249
     e94:	50 f4       	brcc	.+20     	; 0xeaa <__addsf3x+0x52>
     e96:	50 3e       	cpi	r21, 0xE0	; 224
     e98:	68 f1       	brcs	.+90     	; 0xef4 <__addsf3x+0x9c>
     e9a:	1a 16       	cp	r1, r26
     e9c:	f0 40       	sbci	r31, 0x00	; 0
     e9e:	a2 2f       	mov	r26, r18
     ea0:	23 2f       	mov	r18, r19
     ea2:	34 2f       	mov	r19, r20
     ea4:	44 27       	eor	r20, r20
     ea6:	58 5f       	subi	r21, 0xF8	; 248
     ea8:	f3 cf       	rjmp	.-26     	; 0xe90 <__addsf3x+0x38>
     eaa:	46 95       	lsr	r20
     eac:	37 95       	ror	r19
     eae:	27 95       	ror	r18
     eb0:	a7 95       	ror	r26
     eb2:	f0 40       	sbci	r31, 0x00	; 0
     eb4:	53 95       	inc	r21
     eb6:	c9 f7       	brne	.-14     	; 0xeaa <__addsf3x+0x52>
     eb8:	7e f4       	brtc	.+30     	; 0xed8 <__addsf3x+0x80>
     eba:	1f 16       	cp	r1, r31
     ebc:	ba 0b       	sbc	r27, r26
     ebe:	62 0b       	sbc	r22, r18
     ec0:	73 0b       	sbc	r23, r19
     ec2:	84 0b       	sbc	r24, r20
     ec4:	ba f0       	brmi	.+46     	; 0xef4 <__addsf3x+0x9c>
     ec6:	91 50       	subi	r25, 0x01	; 1
     ec8:	a1 f0       	breq	.+40     	; 0xef2 <__addsf3x+0x9a>
     eca:	ff 0f       	add	r31, r31
     ecc:	bb 1f       	adc	r27, r27
     ece:	66 1f       	adc	r22, r22
     ed0:	77 1f       	adc	r23, r23
     ed2:	88 1f       	adc	r24, r24
     ed4:	c2 f7       	brpl	.-16     	; 0xec6 <__addsf3x+0x6e>
     ed6:	0e c0       	rjmp	.+28     	; 0xef4 <__addsf3x+0x9c>
     ed8:	ba 0f       	add	r27, r26
     eda:	62 1f       	adc	r22, r18
     edc:	73 1f       	adc	r23, r19
     ede:	84 1f       	adc	r24, r20
     ee0:	48 f4       	brcc	.+18     	; 0xef4 <__addsf3x+0x9c>
     ee2:	87 95       	ror	r24
     ee4:	77 95       	ror	r23
     ee6:	67 95       	ror	r22
     ee8:	b7 95       	ror	r27
     eea:	f7 95       	ror	r31
     eec:	9e 3f       	cpi	r25, 0xFE	; 254
     eee:	08 f0       	brcs	.+2      	; 0xef2 <__addsf3x+0x9a>
     ef0:	b0 cf       	rjmp	.-160    	; 0xe52 <__addsf3+0x28>
     ef2:	93 95       	inc	r25
     ef4:	88 0f       	add	r24, r24
     ef6:	08 f0       	brcs	.+2      	; 0xefa <__addsf3x+0xa2>
     ef8:	99 27       	eor	r25, r25
     efa:	ee 0f       	add	r30, r30
     efc:	97 95       	ror	r25
     efe:	87 95       	ror	r24
     f00:	08 95       	ret

00000f02 <__divsf3>:
     f02:	0e 94 95 07 	call	0xf2a	; 0xf2a <__divsf3x>
     f06:	0c 94 7d 08 	jmp	0x10fa	; 0x10fa <__fp_round>
     f0a:	0e 94 76 08 	call	0x10ec	; 0x10ec <__fp_pscB>
     f0e:	58 f0       	brcs	.+22     	; 0xf26 <__divsf3+0x24>
     f10:	0e 94 6f 08 	call	0x10de	; 0x10de <__fp_pscA>
     f14:	40 f0       	brcs	.+16     	; 0xf26 <__divsf3+0x24>
     f16:	29 f4       	brne	.+10     	; 0xf22 <__divsf3+0x20>
     f18:	5f 3f       	cpi	r21, 0xFF	; 255
     f1a:	29 f0       	breq	.+10     	; 0xf26 <__divsf3+0x24>
     f1c:	0c 94 66 08 	jmp	0x10cc	; 0x10cc <__fp_inf>
     f20:	51 11       	cpse	r21, r1
     f22:	0c 94 b1 08 	jmp	0x1162	; 0x1162 <__fp_szero>
     f26:	0c 94 6c 08 	jmp	0x10d8	; 0x10d8 <__fp_nan>

00000f2a <__divsf3x>:
     f2a:	0e 94 8e 08 	call	0x111c	; 0x111c <__fp_split3>
     f2e:	68 f3       	brcs	.-38     	; 0xf0a <__divsf3+0x8>

00000f30 <__divsf3_pse>:
     f30:	99 23       	and	r25, r25
     f32:	b1 f3       	breq	.-20     	; 0xf20 <__divsf3+0x1e>
     f34:	55 23       	and	r21, r21
     f36:	91 f3       	breq	.-28     	; 0xf1c <__divsf3+0x1a>
     f38:	95 1b       	sub	r25, r21
     f3a:	55 0b       	sbc	r21, r21
     f3c:	bb 27       	eor	r27, r27
     f3e:	aa 27       	eor	r26, r26
     f40:	62 17       	cp	r22, r18
     f42:	73 07       	cpc	r23, r19
     f44:	84 07       	cpc	r24, r20
     f46:	38 f0       	brcs	.+14     	; 0xf56 <__divsf3_pse+0x26>
     f48:	9f 5f       	subi	r25, 0xFF	; 255
     f4a:	5f 4f       	sbci	r21, 0xFF	; 255
     f4c:	22 0f       	add	r18, r18
     f4e:	33 1f       	adc	r19, r19
     f50:	44 1f       	adc	r20, r20
     f52:	aa 1f       	adc	r26, r26
     f54:	a9 f3       	breq	.-22     	; 0xf40 <__divsf3_pse+0x10>
     f56:	35 d0       	rcall	.+106    	; 0xfc2 <__divsf3_pse+0x92>
     f58:	0e 2e       	mov	r0, r30
     f5a:	3a f0       	brmi	.+14     	; 0xf6a <__divsf3_pse+0x3a>
     f5c:	e0 e8       	ldi	r30, 0x80	; 128
     f5e:	32 d0       	rcall	.+100    	; 0xfc4 <__divsf3_pse+0x94>
     f60:	91 50       	subi	r25, 0x01	; 1
     f62:	50 40       	sbci	r21, 0x00	; 0
     f64:	e6 95       	lsr	r30
     f66:	00 1c       	adc	r0, r0
     f68:	ca f7       	brpl	.-14     	; 0xf5c <__divsf3_pse+0x2c>
     f6a:	2b d0       	rcall	.+86     	; 0xfc2 <__divsf3_pse+0x92>
     f6c:	fe 2f       	mov	r31, r30
     f6e:	29 d0       	rcall	.+82     	; 0xfc2 <__divsf3_pse+0x92>
     f70:	66 0f       	add	r22, r22
     f72:	77 1f       	adc	r23, r23
     f74:	88 1f       	adc	r24, r24
     f76:	bb 1f       	adc	r27, r27
     f78:	26 17       	cp	r18, r22
     f7a:	37 07       	cpc	r19, r23
     f7c:	48 07       	cpc	r20, r24
     f7e:	ab 07       	cpc	r26, r27
     f80:	b0 e8       	ldi	r27, 0x80	; 128
     f82:	09 f0       	breq	.+2      	; 0xf86 <__divsf3_pse+0x56>
     f84:	bb 0b       	sbc	r27, r27
     f86:	80 2d       	mov	r24, r0
     f88:	bf 01       	movw	r22, r30
     f8a:	ff 27       	eor	r31, r31
     f8c:	93 58       	subi	r25, 0x83	; 131
     f8e:	5f 4f       	sbci	r21, 0xFF	; 255
     f90:	3a f0       	brmi	.+14     	; 0xfa0 <__divsf3_pse+0x70>
     f92:	9e 3f       	cpi	r25, 0xFE	; 254
     f94:	51 05       	cpc	r21, r1
     f96:	78 f0       	brcs	.+30     	; 0xfb6 <__divsf3_pse+0x86>
     f98:	0c 94 66 08 	jmp	0x10cc	; 0x10cc <__fp_inf>
     f9c:	0c 94 b1 08 	jmp	0x1162	; 0x1162 <__fp_szero>
     fa0:	5f 3f       	cpi	r21, 0xFF	; 255
     fa2:	e4 f3       	brlt	.-8      	; 0xf9c <__divsf3_pse+0x6c>
     fa4:	98 3e       	cpi	r25, 0xE8	; 232
     fa6:	d4 f3       	brlt	.-12     	; 0xf9c <__divsf3_pse+0x6c>
     fa8:	86 95       	lsr	r24
     faa:	77 95       	ror	r23
     fac:	67 95       	ror	r22
     fae:	b7 95       	ror	r27
     fb0:	f7 95       	ror	r31
     fb2:	9f 5f       	subi	r25, 0xFF	; 255
     fb4:	c9 f7       	brne	.-14     	; 0xfa8 <__divsf3_pse+0x78>
     fb6:	88 0f       	add	r24, r24
     fb8:	91 1d       	adc	r25, r1
     fba:	96 95       	lsr	r25
     fbc:	87 95       	ror	r24
     fbe:	97 f9       	bld	r25, 7
     fc0:	08 95       	ret
     fc2:	e1 e0       	ldi	r30, 0x01	; 1
     fc4:	66 0f       	add	r22, r22
     fc6:	77 1f       	adc	r23, r23
     fc8:	88 1f       	adc	r24, r24
     fca:	bb 1f       	adc	r27, r27
     fcc:	62 17       	cp	r22, r18
     fce:	73 07       	cpc	r23, r19
     fd0:	84 07       	cpc	r24, r20
     fd2:	ba 07       	cpc	r27, r26
     fd4:	20 f0       	brcs	.+8      	; 0xfde <__divsf3_pse+0xae>
     fd6:	62 1b       	sub	r22, r18
     fd8:	73 0b       	sbc	r23, r19
     fda:	84 0b       	sbc	r24, r20
     fdc:	ba 0b       	sbc	r27, r26
     fde:	ee 1f       	adc	r30, r30
     fe0:	88 f7       	brcc	.-30     	; 0xfc4 <__divsf3_pse+0x94>
     fe2:	e0 95       	com	r30
     fe4:	08 95       	ret

00000fe6 <__fixsfsi>:
     fe6:	0e 94 fa 07 	call	0xff4	; 0xff4 <__fixunssfsi>
     fea:	68 94       	set
     fec:	b1 11       	cpse	r27, r1
     fee:	0c 94 b1 08 	jmp	0x1162	; 0x1162 <__fp_szero>
     ff2:	08 95       	ret

00000ff4 <__fixunssfsi>:
     ff4:	0e 94 96 08 	call	0x112c	; 0x112c <__fp_splitA>
     ff8:	88 f0       	brcs	.+34     	; 0x101c <__fixunssfsi+0x28>
     ffa:	9f 57       	subi	r25, 0x7F	; 127
     ffc:	98 f0       	brcs	.+38     	; 0x1024 <__fixunssfsi+0x30>
     ffe:	b9 2f       	mov	r27, r25
    1000:	99 27       	eor	r25, r25
    1002:	b7 51       	subi	r27, 0x17	; 23
    1004:	b0 f0       	brcs	.+44     	; 0x1032 <__fixunssfsi+0x3e>
    1006:	e1 f0       	breq	.+56     	; 0x1040 <__fixunssfsi+0x4c>
    1008:	66 0f       	add	r22, r22
    100a:	77 1f       	adc	r23, r23
    100c:	88 1f       	adc	r24, r24
    100e:	99 1f       	adc	r25, r25
    1010:	1a f0       	brmi	.+6      	; 0x1018 <__fixunssfsi+0x24>
    1012:	ba 95       	dec	r27
    1014:	c9 f7       	brne	.-14     	; 0x1008 <__fixunssfsi+0x14>
    1016:	14 c0       	rjmp	.+40     	; 0x1040 <__fixunssfsi+0x4c>
    1018:	b1 30       	cpi	r27, 0x01	; 1
    101a:	91 f0       	breq	.+36     	; 0x1040 <__fixunssfsi+0x4c>
    101c:	0e 94 b0 08 	call	0x1160	; 0x1160 <__fp_zero>
    1020:	b1 e0       	ldi	r27, 0x01	; 1
    1022:	08 95       	ret
    1024:	0c 94 b0 08 	jmp	0x1160	; 0x1160 <__fp_zero>
    1028:	67 2f       	mov	r22, r23
    102a:	78 2f       	mov	r23, r24
    102c:	88 27       	eor	r24, r24
    102e:	b8 5f       	subi	r27, 0xF8	; 248
    1030:	39 f0       	breq	.+14     	; 0x1040 <__fixunssfsi+0x4c>
    1032:	b9 3f       	cpi	r27, 0xF9	; 249
    1034:	cc f3       	brlt	.-14     	; 0x1028 <__fixunssfsi+0x34>
    1036:	86 95       	lsr	r24
    1038:	77 95       	ror	r23
    103a:	67 95       	ror	r22
    103c:	b3 95       	inc	r27
    103e:	d9 f7       	brne	.-10     	; 0x1036 <__fixunssfsi+0x42>
    1040:	3e f4       	brtc	.+14     	; 0x1050 <__fixunssfsi+0x5c>
    1042:	90 95       	com	r25
    1044:	80 95       	com	r24
    1046:	70 95       	com	r23
    1048:	61 95       	neg	r22
    104a:	7f 4f       	sbci	r23, 0xFF	; 255
    104c:	8f 4f       	sbci	r24, 0xFF	; 255
    104e:	9f 4f       	sbci	r25, 0xFF	; 255
    1050:	08 95       	ret

00001052 <__floatunsisf>:
    1052:	e8 94       	clt
    1054:	09 c0       	rjmp	.+18     	; 0x1068 <__floatsisf+0x12>

00001056 <__floatsisf>:
    1056:	97 fb       	bst	r25, 7
    1058:	3e f4       	brtc	.+14     	; 0x1068 <__floatsisf+0x12>
    105a:	90 95       	com	r25
    105c:	80 95       	com	r24
    105e:	70 95       	com	r23
    1060:	61 95       	neg	r22
    1062:	7f 4f       	sbci	r23, 0xFF	; 255
    1064:	8f 4f       	sbci	r24, 0xFF	; 255
    1066:	9f 4f       	sbci	r25, 0xFF	; 255
    1068:	99 23       	and	r25, r25
    106a:	a9 f0       	breq	.+42     	; 0x1096 <__floatsisf+0x40>
    106c:	f9 2f       	mov	r31, r25
    106e:	96 e9       	ldi	r25, 0x96	; 150
    1070:	bb 27       	eor	r27, r27
    1072:	93 95       	inc	r25
    1074:	f6 95       	lsr	r31
    1076:	87 95       	ror	r24
    1078:	77 95       	ror	r23
    107a:	67 95       	ror	r22
    107c:	b7 95       	ror	r27
    107e:	f1 11       	cpse	r31, r1
    1080:	f8 cf       	rjmp	.-16     	; 0x1072 <__floatsisf+0x1c>
    1082:	fa f4       	brpl	.+62     	; 0x10c2 <__floatsisf+0x6c>
    1084:	bb 0f       	add	r27, r27
    1086:	11 f4       	brne	.+4      	; 0x108c <__floatsisf+0x36>
    1088:	60 ff       	sbrs	r22, 0
    108a:	1b c0       	rjmp	.+54     	; 0x10c2 <__floatsisf+0x6c>
    108c:	6f 5f       	subi	r22, 0xFF	; 255
    108e:	7f 4f       	sbci	r23, 0xFF	; 255
    1090:	8f 4f       	sbci	r24, 0xFF	; 255
    1092:	9f 4f       	sbci	r25, 0xFF	; 255
    1094:	16 c0       	rjmp	.+44     	; 0x10c2 <__floatsisf+0x6c>
    1096:	88 23       	and	r24, r24
    1098:	11 f0       	breq	.+4      	; 0x109e <__floatsisf+0x48>
    109a:	96 e9       	ldi	r25, 0x96	; 150
    109c:	11 c0       	rjmp	.+34     	; 0x10c0 <__floatsisf+0x6a>
    109e:	77 23       	and	r23, r23
    10a0:	21 f0       	breq	.+8      	; 0x10aa <__floatsisf+0x54>
    10a2:	9e e8       	ldi	r25, 0x8E	; 142
    10a4:	87 2f       	mov	r24, r23
    10a6:	76 2f       	mov	r23, r22
    10a8:	05 c0       	rjmp	.+10     	; 0x10b4 <__floatsisf+0x5e>
    10aa:	66 23       	and	r22, r22
    10ac:	71 f0       	breq	.+28     	; 0x10ca <__floatsisf+0x74>
    10ae:	96 e8       	ldi	r25, 0x86	; 134
    10b0:	86 2f       	mov	r24, r22
    10b2:	70 e0       	ldi	r23, 0x00	; 0
    10b4:	60 e0       	ldi	r22, 0x00	; 0
    10b6:	2a f0       	brmi	.+10     	; 0x10c2 <__floatsisf+0x6c>
    10b8:	9a 95       	dec	r25
    10ba:	66 0f       	add	r22, r22
    10bc:	77 1f       	adc	r23, r23
    10be:	88 1f       	adc	r24, r24
    10c0:	da f7       	brpl	.-10     	; 0x10b8 <__floatsisf+0x62>
    10c2:	88 0f       	add	r24, r24
    10c4:	96 95       	lsr	r25
    10c6:	87 95       	ror	r24
    10c8:	97 f9       	bld	r25, 7
    10ca:	08 95       	ret

000010cc <__fp_inf>:
    10cc:	97 f9       	bld	r25, 7
    10ce:	9f 67       	ori	r25, 0x7F	; 127
    10d0:	80 e8       	ldi	r24, 0x80	; 128
    10d2:	70 e0       	ldi	r23, 0x00	; 0
    10d4:	60 e0       	ldi	r22, 0x00	; 0
    10d6:	08 95       	ret

000010d8 <__fp_nan>:
    10d8:	9f ef       	ldi	r25, 0xFF	; 255
    10da:	80 ec       	ldi	r24, 0xC0	; 192
    10dc:	08 95       	ret

000010de <__fp_pscA>:
    10de:	00 24       	eor	r0, r0
    10e0:	0a 94       	dec	r0
    10e2:	16 16       	cp	r1, r22
    10e4:	17 06       	cpc	r1, r23
    10e6:	18 06       	cpc	r1, r24
    10e8:	09 06       	cpc	r0, r25
    10ea:	08 95       	ret

000010ec <__fp_pscB>:
    10ec:	00 24       	eor	r0, r0
    10ee:	0a 94       	dec	r0
    10f0:	12 16       	cp	r1, r18
    10f2:	13 06       	cpc	r1, r19
    10f4:	14 06       	cpc	r1, r20
    10f6:	05 06       	cpc	r0, r21
    10f8:	08 95       	ret

000010fa <__fp_round>:
    10fa:	09 2e       	mov	r0, r25
    10fc:	03 94       	inc	r0
    10fe:	00 0c       	add	r0, r0
    1100:	11 f4       	brne	.+4      	; 0x1106 <__fp_round+0xc>
    1102:	88 23       	and	r24, r24
    1104:	52 f0       	brmi	.+20     	; 0x111a <__fp_round+0x20>
    1106:	bb 0f       	add	r27, r27
    1108:	40 f4       	brcc	.+16     	; 0x111a <__fp_round+0x20>
    110a:	bf 2b       	or	r27, r31
    110c:	11 f4       	brne	.+4      	; 0x1112 <__fp_round+0x18>
    110e:	60 ff       	sbrs	r22, 0
    1110:	04 c0       	rjmp	.+8      	; 0x111a <__fp_round+0x20>
    1112:	6f 5f       	subi	r22, 0xFF	; 255
    1114:	7f 4f       	sbci	r23, 0xFF	; 255
    1116:	8f 4f       	sbci	r24, 0xFF	; 255
    1118:	9f 4f       	sbci	r25, 0xFF	; 255
    111a:	08 95       	ret

0000111c <__fp_split3>:
    111c:	57 fd       	sbrc	r21, 7
    111e:	90 58       	subi	r25, 0x80	; 128
    1120:	44 0f       	add	r20, r20
    1122:	55 1f       	adc	r21, r21
    1124:	59 f0       	breq	.+22     	; 0x113c <__fp_splitA+0x10>
    1126:	5f 3f       	cpi	r21, 0xFF	; 255
    1128:	71 f0       	breq	.+28     	; 0x1146 <__fp_splitA+0x1a>
    112a:	47 95       	ror	r20

0000112c <__fp_splitA>:
    112c:	88 0f       	add	r24, r24
    112e:	97 fb       	bst	r25, 7
    1130:	99 1f       	adc	r25, r25
    1132:	61 f0       	breq	.+24     	; 0x114c <__fp_splitA+0x20>
    1134:	9f 3f       	cpi	r25, 0xFF	; 255
    1136:	79 f0       	breq	.+30     	; 0x1156 <__fp_splitA+0x2a>
    1138:	87 95       	ror	r24
    113a:	08 95       	ret
    113c:	12 16       	cp	r1, r18
    113e:	13 06       	cpc	r1, r19
    1140:	14 06       	cpc	r1, r20
    1142:	55 1f       	adc	r21, r21
    1144:	f2 cf       	rjmp	.-28     	; 0x112a <__fp_split3+0xe>
    1146:	46 95       	lsr	r20
    1148:	f1 df       	rcall	.-30     	; 0x112c <__fp_splitA>
    114a:	08 c0       	rjmp	.+16     	; 0x115c <__fp_splitA+0x30>
    114c:	16 16       	cp	r1, r22
    114e:	17 06       	cpc	r1, r23
    1150:	18 06       	cpc	r1, r24
    1152:	99 1f       	adc	r25, r25
    1154:	f1 cf       	rjmp	.-30     	; 0x1138 <__fp_splitA+0xc>
    1156:	86 95       	lsr	r24
    1158:	71 05       	cpc	r23, r1
    115a:	61 05       	cpc	r22, r1
    115c:	08 94       	sec
    115e:	08 95       	ret

00001160 <__fp_zero>:
    1160:	e8 94       	clt

00001162 <__fp_szero>:
    1162:	bb 27       	eor	r27, r27
    1164:	66 27       	eor	r22, r22
    1166:	77 27       	eor	r23, r23
    1168:	cb 01       	movw	r24, r22
    116a:	97 f9       	bld	r25, 7
    116c:	08 95       	ret

0000116e <__mulsf3>:
    116e:	0e 94 ca 08 	call	0x1194	; 0x1194 <__mulsf3x>
    1172:	0c 94 7d 08 	jmp	0x10fa	; 0x10fa <__fp_round>
    1176:	0e 94 6f 08 	call	0x10de	; 0x10de <__fp_pscA>
    117a:	38 f0       	brcs	.+14     	; 0x118a <__mulsf3+0x1c>
    117c:	0e 94 76 08 	call	0x10ec	; 0x10ec <__fp_pscB>
    1180:	20 f0       	brcs	.+8      	; 0x118a <__mulsf3+0x1c>
    1182:	95 23       	and	r25, r21
    1184:	11 f0       	breq	.+4      	; 0x118a <__mulsf3+0x1c>
    1186:	0c 94 66 08 	jmp	0x10cc	; 0x10cc <__fp_inf>
    118a:	0c 94 6c 08 	jmp	0x10d8	; 0x10d8 <__fp_nan>
    118e:	11 24       	eor	r1, r1
    1190:	0c 94 b1 08 	jmp	0x1162	; 0x1162 <__fp_szero>

00001194 <__mulsf3x>:
    1194:	0e 94 8e 08 	call	0x111c	; 0x111c <__fp_split3>
    1198:	70 f3       	brcs	.-36     	; 0x1176 <__mulsf3+0x8>

0000119a <__mulsf3_pse>:
    119a:	95 9f       	mul	r25, r21
    119c:	c1 f3       	breq	.-16     	; 0x118e <__mulsf3+0x20>
    119e:	95 0f       	add	r25, r21
    11a0:	50 e0       	ldi	r21, 0x00	; 0
    11a2:	55 1f       	adc	r21, r21
    11a4:	62 9f       	mul	r22, r18
    11a6:	f0 01       	movw	r30, r0
    11a8:	72 9f       	mul	r23, r18
    11aa:	bb 27       	eor	r27, r27
    11ac:	f0 0d       	add	r31, r0
    11ae:	b1 1d       	adc	r27, r1
    11b0:	63 9f       	mul	r22, r19
    11b2:	aa 27       	eor	r26, r26
    11b4:	f0 0d       	add	r31, r0
    11b6:	b1 1d       	adc	r27, r1
    11b8:	aa 1f       	adc	r26, r26
    11ba:	64 9f       	mul	r22, r20
    11bc:	66 27       	eor	r22, r22
    11be:	b0 0d       	add	r27, r0
    11c0:	a1 1d       	adc	r26, r1
    11c2:	66 1f       	adc	r22, r22
    11c4:	82 9f       	mul	r24, r18
    11c6:	22 27       	eor	r18, r18
    11c8:	b0 0d       	add	r27, r0
    11ca:	a1 1d       	adc	r26, r1
    11cc:	62 1f       	adc	r22, r18
    11ce:	73 9f       	mul	r23, r19
    11d0:	b0 0d       	add	r27, r0
    11d2:	a1 1d       	adc	r26, r1
    11d4:	62 1f       	adc	r22, r18
    11d6:	83 9f       	mul	r24, r19
    11d8:	a0 0d       	add	r26, r0
    11da:	61 1d       	adc	r22, r1
    11dc:	22 1f       	adc	r18, r18
    11de:	74 9f       	mul	r23, r20
    11e0:	33 27       	eor	r19, r19
    11e2:	a0 0d       	add	r26, r0
    11e4:	61 1d       	adc	r22, r1
    11e6:	23 1f       	adc	r18, r19
    11e8:	84 9f       	mul	r24, r20
    11ea:	60 0d       	add	r22, r0
    11ec:	21 1d       	adc	r18, r1
    11ee:	82 2f       	mov	r24, r18
    11f0:	76 2f       	mov	r23, r22
    11f2:	6a 2f       	mov	r22, r26
    11f4:	11 24       	eor	r1, r1
    11f6:	9f 57       	subi	r25, 0x7F	; 127
    11f8:	50 40       	sbci	r21, 0x00	; 0
    11fa:	9a f0       	brmi	.+38     	; 0x1222 <__mulsf3_pse+0x88>
    11fc:	f1 f0       	breq	.+60     	; 0x123a <__mulsf3_pse+0xa0>
    11fe:	88 23       	and	r24, r24
    1200:	4a f0       	brmi	.+18     	; 0x1214 <__mulsf3_pse+0x7a>
    1202:	ee 0f       	add	r30, r30
    1204:	ff 1f       	adc	r31, r31
    1206:	bb 1f       	adc	r27, r27
    1208:	66 1f       	adc	r22, r22
    120a:	77 1f       	adc	r23, r23
    120c:	88 1f       	adc	r24, r24
    120e:	91 50       	subi	r25, 0x01	; 1
    1210:	50 40       	sbci	r21, 0x00	; 0
    1212:	a9 f7       	brne	.-22     	; 0x11fe <__mulsf3_pse+0x64>
    1214:	9e 3f       	cpi	r25, 0xFE	; 254
    1216:	51 05       	cpc	r21, r1
    1218:	80 f0       	brcs	.+32     	; 0x123a <__mulsf3_pse+0xa0>
    121a:	0c 94 66 08 	jmp	0x10cc	; 0x10cc <__fp_inf>
    121e:	0c 94 b1 08 	jmp	0x1162	; 0x1162 <__fp_szero>
    1222:	5f 3f       	cpi	r21, 0xFF	; 255
    1224:	e4 f3       	brlt	.-8      	; 0x121e <__mulsf3_pse+0x84>
    1226:	98 3e       	cpi	r25, 0xE8	; 232
    1228:	d4 f3       	brlt	.-12     	; 0x121e <__mulsf3_pse+0x84>
    122a:	86 95       	lsr	r24
    122c:	77 95       	ror	r23
    122e:	67 95       	ror	r22
    1230:	b7 95       	ror	r27
    1232:	f7 95       	ror	r31
    1234:	e7 95       	ror	r30
    1236:	9f 5f       	subi	r25, 0xFF	; 255
    1238:	c1 f7       	brne	.-16     	; 0x122a <__mulsf3_pse+0x90>
    123a:	fe 2b       	or	r31, r30
    123c:	88 0f       	add	r24, r24
    123e:	91 1d       	adc	r25, r1
    1240:	96 95       	lsr	r25
    1242:	87 95       	ror	r24
    1244:	97 f9       	bld	r25, 7
    1246:	08 95       	ret
    1248:	19 f4       	brne	.+6      	; 0x1250 <__mulsf3_pse+0xb6>
    124a:	16 f4       	brtc	.+4      	; 0x1250 <__mulsf3_pse+0xb6>
    124c:	0c 94 6c 08 	jmp	0x10d8	; 0x10d8 <__fp_nan>
    1250:	0c 94 6a 09 	jmp	0x12d4	; 0x12d4 <__fp_mpack>

00001254 <sqrt>:
    1254:	0e 94 96 08 	call	0x112c	; 0x112c <__fp_splitA>
    1258:	b8 f3       	brcs	.-18     	; 0x1248 <__mulsf3_pse+0xae>
    125a:	99 23       	and	r25, r25
    125c:	c9 f3       	breq	.-14     	; 0x1250 <__mulsf3_pse+0xb6>
    125e:	b6 f3       	brts	.-20     	; 0x124c <__mulsf3_pse+0xb2>
    1260:	9f 57       	subi	r25, 0x7F	; 127
    1262:	55 0b       	sbc	r21, r21
    1264:	87 ff       	sbrs	r24, 7
    1266:	0e 94 78 09 	call	0x12f0	; 0x12f0 <__fp_norm2>
    126a:	00 24       	eor	r0, r0
    126c:	a0 e6       	ldi	r26, 0x60	; 96
    126e:	40 ea       	ldi	r20, 0xA0	; 160
    1270:	90 01       	movw	r18, r0
    1272:	80 58       	subi	r24, 0x80	; 128
    1274:	56 95       	lsr	r21
    1276:	97 95       	ror	r25
    1278:	28 f4       	brcc	.+10     	; 0x1284 <sqrt+0x30>
    127a:	80 5c       	subi	r24, 0xC0	; 192
    127c:	66 0f       	add	r22, r22
    127e:	77 1f       	adc	r23, r23
    1280:	88 1f       	adc	r24, r24
    1282:	20 f0       	brcs	.+8      	; 0x128c <sqrt+0x38>
    1284:	26 17       	cp	r18, r22
    1286:	37 07       	cpc	r19, r23
    1288:	48 07       	cpc	r20, r24
    128a:	30 f4       	brcc	.+12     	; 0x1298 <sqrt+0x44>
    128c:	62 1b       	sub	r22, r18
    128e:	73 0b       	sbc	r23, r19
    1290:	84 0b       	sbc	r24, r20
    1292:	20 29       	or	r18, r0
    1294:	31 29       	or	r19, r1
    1296:	4a 2b       	or	r20, r26
    1298:	a6 95       	lsr	r26
    129a:	17 94       	ror	r1
    129c:	07 94       	ror	r0
    129e:	20 25       	eor	r18, r0
    12a0:	31 25       	eor	r19, r1
    12a2:	4a 27       	eor	r20, r26
    12a4:	58 f7       	brcc	.-42     	; 0x127c <sqrt+0x28>
    12a6:	66 0f       	add	r22, r22
    12a8:	77 1f       	adc	r23, r23
    12aa:	88 1f       	adc	r24, r24
    12ac:	20 f0       	brcs	.+8      	; 0x12b6 <sqrt+0x62>
    12ae:	26 17       	cp	r18, r22
    12b0:	37 07       	cpc	r19, r23
    12b2:	48 07       	cpc	r20, r24
    12b4:	30 f4       	brcc	.+12     	; 0x12c2 <sqrt+0x6e>
    12b6:	62 0b       	sbc	r22, r18
    12b8:	73 0b       	sbc	r23, r19
    12ba:	84 0b       	sbc	r24, r20
    12bc:	20 0d       	add	r18, r0
    12be:	31 1d       	adc	r19, r1
    12c0:	41 1d       	adc	r20, r1
    12c2:	a0 95       	com	r26
    12c4:	81 f7       	brne	.-32     	; 0x12a6 <sqrt+0x52>
    12c6:	b9 01       	movw	r22, r18
    12c8:	84 2f       	mov	r24, r20
    12ca:	91 58       	subi	r25, 0x81	; 129
    12cc:	88 0f       	add	r24, r24
    12ce:	96 95       	lsr	r25
    12d0:	87 95       	ror	r24
    12d2:	08 95       	ret

000012d4 <__fp_mpack>:
    12d4:	9f 3f       	cpi	r25, 0xFF	; 255
    12d6:	31 f0       	breq	.+12     	; 0x12e4 <__fp_mpack_finite+0xc>

000012d8 <__fp_mpack_finite>:
    12d8:	91 50       	subi	r25, 0x01	; 1
    12da:	20 f4       	brcc	.+8      	; 0x12e4 <__fp_mpack_finite+0xc>
    12dc:	87 95       	ror	r24
    12de:	77 95       	ror	r23
    12e0:	67 95       	ror	r22
    12e2:	b7 95       	ror	r27
    12e4:	88 0f       	add	r24, r24
    12e6:	91 1d       	adc	r25, r1
    12e8:	96 95       	lsr	r25
    12ea:	87 95       	ror	r24
    12ec:	97 f9       	bld	r25, 7
    12ee:	08 95       	ret

000012f0 <__fp_norm2>:
    12f0:	91 50       	subi	r25, 0x01	; 1
    12f2:	50 40       	sbci	r21, 0x00	; 0
    12f4:	66 0f       	add	r22, r22
    12f6:	77 1f       	adc	r23, r23
    12f8:	88 1f       	adc	r24, r24
    12fa:	d2 f7       	brpl	.-12     	; 0x12f0 <__fp_norm2>
    12fc:	08 95       	ret

000012fe <__udivmodhi4>:
    12fe:	aa 1b       	sub	r26, r26
    1300:	bb 1b       	sub	r27, r27
    1302:	51 e1       	ldi	r21, 0x11	; 17
    1304:	07 c0       	rjmp	.+14     	; 0x1314 <__udivmodhi4_ep>

00001306 <__udivmodhi4_loop>:
    1306:	aa 1f       	adc	r26, r26
    1308:	bb 1f       	adc	r27, r27
    130a:	a6 17       	cp	r26, r22
    130c:	b7 07       	cpc	r27, r23
    130e:	10 f0       	brcs	.+4      	; 0x1314 <__udivmodhi4_ep>
    1310:	a6 1b       	sub	r26, r22
    1312:	b7 0b       	sbc	r27, r23

00001314 <__udivmodhi4_ep>:
    1314:	88 1f       	adc	r24, r24
    1316:	99 1f       	adc	r25, r25
    1318:	5a 95       	dec	r21
    131a:	a9 f7       	brne	.-22     	; 0x1306 <__udivmodhi4_loop>
    131c:	80 95       	com	r24
    131e:	90 95       	com	r25
    1320:	bc 01       	movw	r22, r24
    1322:	cd 01       	movw	r24, r26
    1324:	08 95       	ret

00001326 <__udivmodsi4>:
    1326:	a1 e2       	ldi	r26, 0x21	; 33
    1328:	1a 2e       	mov	r1, r26
    132a:	aa 1b       	sub	r26, r26
    132c:	bb 1b       	sub	r27, r27
    132e:	fd 01       	movw	r30, r26
    1330:	0d c0       	rjmp	.+26     	; 0x134c <__udivmodsi4_ep>

00001332 <__udivmodsi4_loop>:
    1332:	aa 1f       	adc	r26, r26
    1334:	bb 1f       	adc	r27, r27
    1336:	ee 1f       	adc	r30, r30
    1338:	ff 1f       	adc	r31, r31
    133a:	a2 17       	cp	r26, r18
    133c:	b3 07       	cpc	r27, r19
    133e:	e4 07       	cpc	r30, r20
    1340:	f5 07       	cpc	r31, r21
    1342:	20 f0       	brcs	.+8      	; 0x134c <__udivmodsi4_ep>
    1344:	a2 1b       	sub	r26, r18
    1346:	b3 0b       	sbc	r27, r19
    1348:	e4 0b       	sbc	r30, r20
    134a:	f5 0b       	sbc	r31, r21

0000134c <__udivmodsi4_ep>:
    134c:	66 1f       	adc	r22, r22
    134e:	77 1f       	adc	r23, r23
    1350:	88 1f       	adc	r24, r24
    1352:	99 1f       	adc	r25, r25
    1354:	1a 94       	dec	r1
    1356:	69 f7       	brne	.-38     	; 0x1332 <__udivmodsi4_loop>
    1358:	60 95       	com	r22
    135a:	70 95       	com	r23
    135c:	80 95       	com	r24
    135e:	90 95       	com	r25
    1360:	9b 01       	movw	r18, r22
    1362:	ac 01       	movw	r20, r24
    1364:	bd 01       	movw	r22, r26
    1366:	cf 01       	movw	r24, r30
    1368:	08 95       	ret

0000136a <__divmodsi4>:
    136a:	05 2e       	mov	r0, r21
    136c:	97 fb       	bst	r25, 7
    136e:	1e f4       	brtc	.+6      	; 0x1376 <__divmodsi4+0xc>
    1370:	00 94       	com	r0
    1372:	0e 94 cc 09 	call	0x1398	; 0x1398 <__negsi2>
    1376:	57 fd       	sbrc	r21, 7
    1378:	07 d0       	rcall	.+14     	; 0x1388 <__divmodsi4_neg2>
    137a:	0e 94 93 09 	call	0x1326	; 0x1326 <__udivmodsi4>
    137e:	07 fc       	sbrc	r0, 7
    1380:	03 d0       	rcall	.+6      	; 0x1388 <__divmodsi4_neg2>
    1382:	4e f4       	brtc	.+18     	; 0x1396 <__divmodsi4_exit>
    1384:	0c 94 cc 09 	jmp	0x1398	; 0x1398 <__negsi2>

00001388 <__divmodsi4_neg2>:
    1388:	50 95       	com	r21
    138a:	40 95       	com	r20
    138c:	30 95       	com	r19
    138e:	21 95       	neg	r18
    1390:	3f 4f       	sbci	r19, 0xFF	; 255
    1392:	4f 4f       	sbci	r20, 0xFF	; 255
    1394:	5f 4f       	sbci	r21, 0xFF	; 255

00001396 <__divmodsi4_exit>:
    1396:	08 95       	ret

00001398 <__negsi2>:
    1398:	90 95       	com	r25
    139a:	80 95       	com	r24
    139c:	70 95       	com	r23
    139e:	61 95       	neg	r22
    13a0:	7f 4f       	sbci	r23, 0xFF	; 255
    13a2:	8f 4f       	sbci	r24, 0xFF	; 255
    13a4:	9f 4f       	sbci	r25, 0xFF	; 255
    13a6:	08 95       	ret

000013a8 <__itoa_ncheck>:
    13a8:	bb 27       	eor	r27, r27
    13aa:	4a 30       	cpi	r20, 0x0A	; 10
    13ac:	31 f4       	brne	.+12     	; 0x13ba <__itoa_ncheck+0x12>
    13ae:	99 23       	and	r25, r25
    13b0:	22 f4       	brpl	.+8      	; 0x13ba <__itoa_ncheck+0x12>
    13b2:	bd e2       	ldi	r27, 0x2D	; 45
    13b4:	90 95       	com	r25
    13b6:	81 95       	neg	r24
    13b8:	9f 4f       	sbci	r25, 0xFF	; 255
    13ba:	0c 94 11 0a 	jmp	0x1422	; 0x1422 <__utoa_common>

000013be <__ltoa_ncheck>:
    13be:	bb 27       	eor	r27, r27
    13c0:	2a 30       	cpi	r18, 0x0A	; 10
    13c2:	51 f4       	brne	.+20     	; 0x13d8 <__ltoa_ncheck+0x1a>
    13c4:	99 23       	and	r25, r25
    13c6:	42 f4       	brpl	.+16     	; 0x13d8 <__ltoa_ncheck+0x1a>
    13c8:	bd e2       	ldi	r27, 0x2D	; 45
    13ca:	90 95       	com	r25
    13cc:	80 95       	com	r24
    13ce:	70 95       	com	r23
    13d0:	61 95       	neg	r22
    13d2:	7f 4f       	sbci	r23, 0xFF	; 255
    13d4:	8f 4f       	sbci	r24, 0xFF	; 255
    13d6:	9f 4f       	sbci	r25, 0xFF	; 255
    13d8:	0c 94 ef 09 	jmp	0x13de	; 0x13de <__ultoa_common>

000013dc <__ultoa_ncheck>:
    13dc:	bb 27       	eor	r27, r27

000013de <__ultoa_common>:
    13de:	fa 01       	movw	r30, r20
    13e0:	a6 2f       	mov	r26, r22
    13e2:	62 17       	cp	r22, r18
    13e4:	71 05       	cpc	r23, r1
    13e6:	81 05       	cpc	r24, r1
    13e8:	91 05       	cpc	r25, r1
    13ea:	33 0b       	sbc	r19, r19
    13ec:	30 fb       	bst	r19, 0
    13ee:	66 f0       	brts	.+24     	; 0x1408 <__ultoa_common+0x2a>
    13f0:	aa 27       	eor	r26, r26
    13f2:	66 0f       	add	r22, r22
    13f4:	77 1f       	adc	r23, r23
    13f6:	88 1f       	adc	r24, r24
    13f8:	99 1f       	adc	r25, r25
    13fa:	aa 1f       	adc	r26, r26
    13fc:	a2 17       	cp	r26, r18
    13fe:	10 f0       	brcs	.+4      	; 0x1404 <__ultoa_common+0x26>
    1400:	a2 1b       	sub	r26, r18
    1402:	63 95       	inc	r22
    1404:	38 50       	subi	r19, 0x08	; 8
    1406:	a9 f7       	brne	.-22     	; 0x13f2 <__ultoa_common+0x14>
    1408:	a0 5d       	subi	r26, 0xD0	; 208
    140a:	aa 33       	cpi	r26, 0x3A	; 58
    140c:	08 f0       	brcs	.+2      	; 0x1410 <__ultoa_common+0x32>
    140e:	a9 5d       	subi	r26, 0xD9	; 217
    1410:	a1 93       	st	Z+, r26
    1412:	36 f7       	brtc	.-52     	; 0x13e0 <__ultoa_common+0x2>
    1414:	b1 11       	cpse	r27, r1
    1416:	b1 93       	st	Z+, r27
    1418:	10 82       	st	Z, r1
    141a:	ca 01       	movw	r24, r20
    141c:	0c 94 2a 0a 	jmp	0x1454	; 0x1454 <strrev>

00001420 <__utoa_ncheck>:
    1420:	bb 27       	eor	r27, r27

00001422 <__utoa_common>:
    1422:	fb 01       	movw	r30, r22
    1424:	55 27       	eor	r21, r21
    1426:	aa 27       	eor	r26, r26
    1428:	88 0f       	add	r24, r24
    142a:	99 1f       	adc	r25, r25
    142c:	aa 1f       	adc	r26, r26
    142e:	a4 17       	cp	r26, r20
    1430:	10 f0       	brcs	.+4      	; 0x1436 <__utoa_common+0x14>
    1432:	a4 1b       	sub	r26, r20
    1434:	83 95       	inc	r24
    1436:	50 51       	subi	r21, 0x10	; 16
    1438:	b9 f7       	brne	.-18     	; 0x1428 <__utoa_common+0x6>
    143a:	a0 5d       	subi	r26, 0xD0	; 208
    143c:	aa 33       	cpi	r26, 0x3A	; 58
    143e:	08 f0       	brcs	.+2      	; 0x1442 <__utoa_common+0x20>
    1440:	a9 5d       	subi	r26, 0xD9	; 217
    1442:	a1 93       	st	Z+, r26
    1444:	00 97       	sbiw	r24, 0x00	; 0
    1446:	79 f7       	brne	.-34     	; 0x1426 <__utoa_common+0x4>
    1448:	b1 11       	cpse	r27, r1
    144a:	b1 93       	st	Z+, r27
    144c:	11 92       	st	Z+, r1
    144e:	cb 01       	movw	r24, r22
    1450:	0c 94 2a 0a 	jmp	0x1454	; 0x1454 <strrev>

00001454 <strrev>:
    1454:	dc 01       	movw	r26, r24
    1456:	fc 01       	movw	r30, r24
    1458:	67 2f       	mov	r22, r23
    145a:	71 91       	ld	r23, Z+
    145c:	77 23       	and	r23, r23
    145e:	e1 f7       	brne	.-8      	; 0x1458 <strrev+0x4>
    1460:	32 97       	sbiw	r30, 0x02	; 2
    1462:	04 c0       	rjmp	.+8      	; 0x146c <strrev+0x18>
    1464:	7c 91       	ld	r23, X
    1466:	6d 93       	st	X+, r22
    1468:	70 83       	st	Z, r23
    146a:	62 91       	ld	r22, -Z
    146c:	ae 17       	cp	r26, r30
    146e:	bf 07       	cpc	r27, r31
    1470:	c8 f3       	brcs	.-14     	; 0x1464 <strrev+0x10>
    1472:	08 95       	ret

00001474 <_exit>:
    1474:	f8 94       	cli

00001476 <__stop_program>:
    1476:	ff cf       	rjmp	.-2      	; 0x1476 <__stop_program>
