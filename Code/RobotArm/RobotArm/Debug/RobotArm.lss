
RobotArm.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000ad0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000a5c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000018  00800100  00800100  00000ad0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000ad0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000b00  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001c0  00000000  00000000  00000b40  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002747  00000000  00000000  00000d00  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001052  00000000  00000000  00003447  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000dcc  00000000  00000000  00004499  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000004e0  00000000  00000000  00005268  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000d6a  00000000  00000000  00005748  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000f69  00000000  00000000  000064b2  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000190  00000000  00000000  0000741b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 39 02 	jmp	0x472	; 0x472 <__vector_7>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 48 00 	jmp	0x90	; 0x90 <__vector_18>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a8 31       	cpi	r26, 0x18	; 24
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 af 00 	call	0x15e	; 0x15e <main>
  88:	0c 94 2c 05 	jmp	0xa58	; 0xa58 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <__vector_18>:
/*Handle the commands */
volatile  char data_rx[MAX_BUFFER];
volatile uint8_t rx_count;
volatile bool new_command = false;
/* Receive all the data until a newline is found */
ISR(USART_RX_vect){
  90:	1f 92       	push	r1
  92:	0f 92       	push	r0
  94:	0f b6       	in	r0, 0x3f	; 63
  96:	0f 92       	push	r0
  98:	11 24       	eor	r1, r1
  9a:	8f 93       	push	r24
  9c:	ef 93       	push	r30
  9e:	ff 93       	push	r31
	data_rx[rx_count] = UDR0;
  a0:	e0 91 03 01 	lds	r30, 0x0103	; 0x800103 <rx_count>
  a4:	f0 e0       	ldi	r31, 0x00	; 0
  a6:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
  aa:	ec 5f       	subi	r30, 0xFC	; 252
  ac:	fe 4f       	sbci	r31, 0xFE	; 254
  ae:	80 83       	st	Z, r24
	if(data_rx[rx_count] == '\n'){
  b0:	e0 91 03 01 	lds	r30, 0x0103	; 0x800103 <rx_count>
  b4:	f0 e0       	ldi	r31, 0x00	; 0
  b6:	ec 5f       	subi	r30, 0xFC	; 252
  b8:	fe 4f       	sbci	r31, 0xFE	; 254
  ba:	80 81       	ld	r24, Z
  bc:	8a 30       	cpi	r24, 0x0A	; 10
  be:	31 f4       	brne	.+12     	; 0xcc <__vector_18+0x3c>
		rx_count = 0; 
  c0:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <rx_count>
		new_command = true;
  c4:	81 e0       	ldi	r24, 0x01	; 1
  c6:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <new_command>
  ca:	05 c0       	rjmp	.+10     	; 0xd6 <__vector_18+0x46>
	}else{
		rx_count++;
  cc:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <rx_count>
  d0:	8f 5f       	subi	r24, 0xFF	; 255
  d2:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <rx_count>
	}
}
  d6:	ff 91       	pop	r31
  d8:	ef 91       	pop	r30
  da:	8f 91       	pop	r24
  dc:	0f 90       	pop	r0
  de:	0f be       	out	0x3f, r0	; 63
  e0:	0f 90       	pop	r0
  e2:	1f 90       	pop	r1
  e4:	18 95       	reti

000000e6 <_Z8spi_initv>:
	};
Direction_signal  direction_signal;

/*SPI enables as master with no prescaler */
void spi_init(){
	SHIFT_REGISTER |= SHIFT_MOSI | SHIFT_SCK | SHIFT_SS | SHIFT_REFRESH; //SHIFT_SS has to be high for the spi to work. 
  e6:	84 b1       	in	r24, 0x04	; 4
  e8:	8d 62       	ori	r24, 0x2D	; 45
  ea:	84 b9       	out	0x04, r24	; 4
	SPCR |=  (1 << SPE) | (1 << MSTR); //Enable spi as master and enable SPI respectively.
  ec:	8c b5       	in	r24, 0x2c	; 44
  ee:	80 65       	ori	r24, 0x50	; 80
  f0:	8c bd       	out	0x2c, r24	; 44
  f2:	08 95       	ret

000000f4 <_Z18spi_send_directionv>:
}
/*This function sends the direction vector byte containing the direction signals for the L293D Motor driver */
void spi_send_direction(){
	SHIFT_PORT &= ~SHIFT_REFRESH;
  f4:	28 98       	cbi	0x05, 0	; 5
	SPDR = direction_signal.direction;
  f6:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
  fa:	8e bd       	out	0x2e, r24	; 46
	while(!(SPSR & (1<<SPIF)));
  fc:	0d b4       	in	r0, 0x2d	; 45
  fe:	07 fe       	sbrs	r0, 7
 100:	fd cf       	rjmp	.-6      	; 0xfc <_Z18spi_send_directionv+0x8>
	SHIFT_PORT |= SHIFT_REFRESH;
 102:	28 9a       	sbi	0x05, 0	; 5
 104:	08 95       	ret

00000106 <_Z11init_motorsv>:
}

void init_motors(){
		/* Initialize motors: 
	/* End effector */
	TCCR1A |= (1 << COM1B1) | (1 << WGM11) | (1 << WGM10); //Enable 0C2B pin as pwm and 
 106:	e0 e8       	ldi	r30, 0x80	; 128
 108:	f0 e0       	ldi	r31, 0x00	; 0
 10a:	80 81       	ld	r24, Z
 10c:	83 62       	ori	r24, 0x23	; 35
 10e:	80 83       	st	Z, r24
	TCCR1B |= (1 << CS12); //PWM frequency of 62,500 hz 
 110:	a1 e8       	ldi	r26, 0x81	; 129
 112:	b0 e0       	ldi	r27, 0x00	; 0
 114:	8c 91       	ld	r24, X
 116:	84 60       	ori	r24, 0x04	; 4
 118:	8c 93       	st	X, r24
	/* Servo 0 */
	DDRD |= SERVO0;
 11a:	52 9a       	sbi	0x0a, 2	; 10
	TCCR0A |= (1 << COM0B0) | (1 << WGM01) | (1 << WGM00); 
 11c:	84 b5       	in	r24, 0x24	; 36
 11e:	83 61       	ori	r24, 0x13	; 19
 120:	84 bd       	out	0x24, r24	; 36
	TCCR0B |= (1 << CS02); 
 122:	85 b5       	in	r24, 0x25	; 37
 124:	84 60       	ori	r24, 0x04	; 4
 126:	85 bd       	out	0x25, r24	; 37
	/* Servo 1 */ 
	TCCR0A |= (1 << COM0A0) | (1 << WGM01) | (1 << WGM00); 
 128:	84 b5       	in	r24, 0x24	; 36
 12a:	83 64       	ori	r24, 0x43	; 67
 12c:	84 bd       	out	0x24, r24	; 36
	/* Servo 2 */
	TCCR1A |= (1 << COM1A1) | (1 << WGM12) | (1 << WGM10); 
 12e:	80 81       	ld	r24, Z
 130:	89 68       	ori	r24, 0x89	; 137
 132:	80 83       	st	Z, r24
	
	/*Stepper motor */
	DDRD |= (STEPPER0_DIR) | (STEPPER0_STEP ) | (STEPPER1_DIR) | (STEPPER1_STEP);  
 134:	8a b1       	in	r24, 0x0a	; 10
 136:	8c 69       	ori	r24, 0x9C	; 156
 138:	8a b9       	out	0x0a, r24	; 10
 13a:	08 95       	ret

0000013c <_Z23process_stepper_commandPcP12StepperMotor>:

}
void process_stepper_command(char * command,StepperMotor * stepperMotor){
 13c:	cf 93       	push	r28
 13e:	df 93       	push	r29
	char * ptr = &command[2]; 
	switch (command[1])
 140:	fc 01       	movw	r30, r24
 142:	21 81       	ldd	r18, Z+1	; 0x01
 144:	21 36       	cpi	r18, 0x61	; 97
 146:	41 f4       	brne	.+16     	; 0x158 <_Z23process_stepper_commandPcP12StepperMotor+0x1c>
 148:	eb 01       	movw	r28, r22
	{
		case 'a':
			stepperMotor->acceleration = atoi(ptr);
 14a:	02 96       	adiw	r24, 0x02	; 2
 14c:	0e 94 dc 04 	call	0x9b8	; 0x9b8 <atoi>
 150:	9c 87       	std	Y+12, r25	; 0x0c
 152:	8b 87       	std	Y+11, r24	; 0x0b
			usart_sendln(stepperMotor->acceleration); 
 154:	0e 94 ba 02 	call	0x574	; 0x574 <_Z12usart_sendlnj>
			break;
		default:
		/* Your code here */
		break;
	}	
}
 158:	df 91       	pop	r29
 15a:	cf 91       	pop	r28
 15c:	08 95       	ret

0000015e <main>:
int main(void)
{
 15e:	cf 93       	push	r28
 160:	df 93       	push	r29
 162:	cd b7       	in	r28, 0x3d	; 61
 164:	de b7       	in	r29, 0x3e	; 62
 166:	c5 59       	subi	r28, 0x95	; 149
 168:	d1 09       	sbc	r29, r1
 16a:	0f b6       	in	r0, 0x3f	; 63
 16c:	f8 94       	cli
 16e:	de bf       	out	0x3e, r29	; 62
 170:	0f be       	out	0x3f, r0	; 63
 172:	cd bf       	out	0x3d, r28	; 61
	/* Initialize SPI:	*/
	 spi_init();
 174:	0e 94 73 00 	call	0xe6	; 0xe6 <_Z8spi_initv>
	
	/* Init motors */	
	init_motors();
 178:	0e 94 83 00 	call	0x106	; 0x106 <_Z11init_motorsv>
	ServoMotor servo0(&SERVO0_PWM,&direction_signal.direction,SERVO0_DIRA,SERVO0_DIRB);
 17c:	08 e0       	ldi	r16, 0x08	; 8
 17e:	24 e0       	ldi	r18, 0x04	; 4
 180:	40 e0       	ldi	r20, 0x00	; 0
 182:	51 e0       	ldi	r21, 0x01	; 1
 184:	68 e4       	ldi	r22, 0x48	; 72
 186:	70 e0       	ldi	r23, 0x00	; 0
 188:	ce 01       	movw	r24, r28
 18a:	01 96       	adiw	r24, 0x01	; 1
 18c:	0e 94 87 01 	call	0x30e	; 0x30e <_ZN10ServoMotorC1EPVhS1_hh>
	servo0.set_pid(1,1,0);
 190:	20 e0       	ldi	r18, 0x00	; 0
 192:	30 e0       	ldi	r19, 0x00	; 0
 194:	41 e0       	ldi	r20, 0x01	; 1
 196:	50 e0       	ldi	r21, 0x00	; 0
 198:	61 e0       	ldi	r22, 0x01	; 1
 19a:	70 e0       	ldi	r23, 0x00	; 0
 19c:	ce 01       	movw	r24, r28
 19e:	01 96       	adiw	r24, 0x01	; 1
 1a0:	0e 94 a2 01 	call	0x344	; 0x344 <_ZN10ServoMotor7set_pidEjjj>

	StepperMotor stepper_motors[2] = { StepperMotor(0,0.2571426,STEPPER0_DIR,STEPPER0_STEP),
									   StepperMotor(0,0.043182,STEPPER1_DIR,STEPPER1_STEP) };
 1a4:	68 94       	set
 1a6:	ee 24       	eor	r14, r14
 1a8:	e4 f8       	bld	r14, 4
 1aa:	04 e0       	ldi	r16, 0x04	; 4
 1ac:	22 e3       	ldi	r18, 0x32	; 50
 1ae:	38 ea       	ldi	r19, 0xA8	; 168
 1b0:	43 e8       	ldi	r20, 0x83	; 131
 1b2:	5e e3       	ldi	r21, 0x3E	; 62
 1b4:	60 e0       	ldi	r22, 0x00	; 0
 1b6:	70 e0       	ldi	r23, 0x00	; 0
 1b8:	ce 01       	movw	r24, r28
 1ba:	c6 96       	adiw	r24, 0x36	; 54
 1bc:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <_ZN12StepperMotorC1Eifhh>
 1c0:	68 94       	set
 1c2:	ee 24       	eor	r14, r14
 1c4:	e3 f8       	bld	r14, 3
 1c6:	00 e8       	ldi	r16, 0x80	; 128
 1c8:	2c e9       	ldi	r18, 0x9C	; 156
 1ca:	3f ed       	ldi	r19, 0xDF	; 223
 1cc:	40 e3       	ldi	r20, 0x30	; 48
 1ce:	5d e3       	ldi	r21, 0x3D	; 61
 1d0:	60 e0       	ldi	r22, 0x00	; 0
 1d2:	70 e0       	ldi	r23, 0x00	; 0
 1d4:	86 e3       	ldi	r24, 0x36	; 54
 1d6:	90 e0       	ldi	r25, 0x00	; 0
 1d8:	8c 0f       	add	r24, r28
 1da:	9d 1f       	adc	r25, r29
 1dc:	88 96       	adiw	r24, 0x28	; 40
 1de:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <_ZN12StepperMotorC1Eifhh>

	/* Clear shift register */
	direction_signal.direction = SERVO0_DIRB;
 1e2:	e0 e0       	ldi	r30, 0x00	; 0
 1e4:	f1 e0       	ldi	r31, 0x01	; 1
 1e6:	88 e0       	ldi	r24, 0x08	; 8
 1e8:	80 83       	st	Z, r24
	direction_signal.previous_direction = 0; 	
 1ea:	11 82       	std	Z+1, r1	; 0x01
	spi_send_direction();	
 1ec:	0e 94 7a 00 	call	0xf4	; 0xf4 <_Z18spi_send_directionv>

	usart_enable(9600);
 1f0:	80 e8       	ldi	r24, 0x80	; 128
 1f2:	95 e2       	ldi	r25, 0x25	; 37
 1f4:	0e 94 5e 02 	call	0x4bc	; 0x4bc <_Z12usart_enablej>
	timer_enable();
 1f8:	0e 94 11 02 	call	0x422	; 0x422 <_Z12timer_enablev>
	sei();
 1fc:	78 94       	sei

	uint32_t oldtime=0;
	uint8_t capture_tacho;
	 char command[MAX_BUFFER];
	 
	 SERVO0_PWM = 10;
 1fe:	8a e0       	ldi	r24, 0x0A	; 10
 200:	88 bd       	out	0x28, r24	; 40
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 202:	2f ef       	ldi	r18, 0xFF	; 255
 204:	83 ec       	ldi	r24, 0xC3	; 195
 206:	99 e0       	ldi	r25, 0x09	; 9
 208:	21 50       	subi	r18, 0x01	; 1
 20a:	80 40       	sbci	r24, 0x00	; 0
 20c:	90 40       	sbci	r25, 0x00	; 0
 20e:	e1 f7       	brne	.-8      	; 0x208 <main+0xaa>
 210:	00 c0       	rjmp	.+0      	; 0x212 <main+0xb4>
 212:	00 00       	nop
 214:	ef ef       	ldi	r30, 0xFF	; 255
 216:	f3 ec       	ldi	r31, 0xC3	; 195
 218:	29 e0       	ldi	r18, 0x09	; 9
 21a:	e1 50       	subi	r30, 0x01	; 1
 21c:	f0 40       	sbci	r31, 0x00	; 0
 21e:	20 40       	sbci	r18, 0x00	; 0
 220:	e1 f7       	brne	.-8      	; 0x21a <main+0xbc>
 222:	00 c0       	rjmp	.+0      	; 0x224 <main+0xc6>
 224:	00 00       	nop
 226:	8f ef       	ldi	r24, 0xFF	; 255
 228:	93 ec       	ldi	r25, 0xC3	; 195
 22a:	e9 e0       	ldi	r30, 0x09	; 9
 22c:	81 50       	subi	r24, 0x01	; 1
 22e:	90 40       	sbci	r25, 0x00	; 0
 230:	e0 40       	sbci	r30, 0x00	; 0
 232:	e1 f7       	brne	.-8      	; 0x22c <main+0xce>
 234:	00 c0       	rjmp	.+0      	; 0x236 <main+0xd8>
 236:	00 00       	nop
	 _delay_ms(200);
	 _delay_ms(200);
	 _delay_ms(200);
	 SERVO0_PWM = 0; 
 238:	18 bc       	out	0x28, r1	; 40

	usart_enable(9600);
	timer_enable();
	sei();

	uint32_t oldtime=0;
 23a:	81 2c       	mov	r8, r1
 23c:	91 2c       	mov	r9, r1
 23e:	54 01       	movw	r10, r8
	 SERVO0_PWM = 0; 
	while (1){
		/*Read the command and assert that new commands can be read */
		if(new_command == true){
			ATOMIC_BLOCK(ATOMIC_FORCEON){
				memcpy(command,(void*)data_rx,MAX_BUFFER);
 240:	7e 01       	movw	r14, r28
 242:	f6 e8       	ldi	r31, 0x86	; 134
 244:	ef 0e       	add	r14, r31
 246:	f1 1c       	adc	r15, r1
		
		capture_tacho = PINC;
		servo0.tacho(capture_tacho & SERVO0_TACHO_PLUS,capture_tacho & SERVO0_TACHO_MIN);
		
		
		if(direction_signal.previous_direction != direction_signal.direction){
 248:	00 e0       	ldi	r16, 0x00	; 0
 24a:	11 e0       	ldi	r17, 0x01	; 1
	 SERVO0_PWM = 0; 
	while (1){
		/*Read the command and assert that new commands can be read */
		if(new_command == true){
			ATOMIC_BLOCK(ATOMIC_FORCEON){
				memcpy(command,(void*)data_rx,MAX_BUFFER);
 24c:	ce 2c       	mov	r12, r14
 24e:	df 2c       	mov	r13, r15
	 _delay_ms(200);
	 _delay_ms(200);
	 SERVO0_PWM = 0; 
	while (1){
		/*Read the command and assert that new commands can be read */
		if(new_command == true){
 250:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <new_command>
 254:	88 23       	and	r24, r24
 256:	b1 f1       	breq	.+108    	; 0x2c4 <main+0x166>
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
 258:	f8 94       	cli
			ATOMIC_BLOCK(ATOMIC_FORCEON){
				memcpy(command,(void*)data_rx,MAX_BUFFER);
 25a:	80 e1       	ldi	r24, 0x10	; 16
 25c:	e4 e0       	ldi	r30, 0x04	; 4
 25e:	f1 e0       	ldi	r31, 0x01	; 1
 260:	ac 2d       	mov	r26, r12
 262:	bd 2d       	mov	r27, r13
 264:	01 90       	ld	r0, Z+
 266:	0d 92       	st	X+, r0
 268:	8a 95       	dec	r24
 26a:	e1 f7       	brne	.-8      	; 0x264 <main+0x106>
    return 1;
}

static __inline__ void __iSeiParam(const uint8_t *__s)
{
    sei();
 26c:	78 94       	sei
			}
			rx_count = 0; 
 26e:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <rx_count>
			new_command = false; 
 272:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <new_command>
			switch (command[0])
 276:	f7 01       	movw	r30, r14
 278:	80 81       	ld	r24, Z
 27a:	81 36       	cpi	r24, 0x61	; 97
 27c:	61 f0       	breq	.+24     	; 0x296 <main+0x138>
 27e:	84 36       	cpi	r24, 0x64	; 100
 280:	b1 f0       	breq	.+44     	; 0x2ae <main+0x150>
 282:	84 35       	cpi	r24, 0x54	; 84
 284:	f9 f4       	brne	.+62     	; 0x2c4 <main+0x166>
			{
				//s(T)epper motor 
				case 'T':
					process_stepper_command(command,&stepper_motors[0]);					
 286:	be 01       	movw	r22, r28
 288:	6a 5c       	subi	r22, 0xCA	; 202
 28a:	7f 4f       	sbci	r23, 0xFF	; 255
 28c:	8c 2d       	mov	r24, r12
 28e:	9d 2d       	mov	r25, r13
 290:	0e 94 9e 00 	call	0x13c	; 0x13c <_Z23process_stepper_commandPcP12StepperMotor>
					break;
 294:	17 c0       	rjmp	.+46     	; 0x2c4 <main+0x166>
				case 'a':
					servo0.absolute_position+=5;
 296:	8f 89       	ldd	r24, Y+23	; 0x17
 298:	98 8d       	ldd	r25, Y+24	; 0x18
 29a:	a9 8d       	ldd	r26, Y+25	; 0x19
 29c:	ba 8d       	ldd	r27, Y+26	; 0x1a
 29e:	05 96       	adiw	r24, 0x05	; 5
 2a0:	a1 1d       	adc	r26, r1
 2a2:	b1 1d       	adc	r27, r1
 2a4:	8f 8b       	std	Y+23, r24	; 0x17
 2a6:	98 8f       	std	Y+24, r25	; 0x18
 2a8:	a9 8f       	std	Y+25, r26	; 0x19
 2aa:	ba 8f       	std	Y+26, r27	; 0x1a
					break;
 2ac:	0b c0       	rjmp	.+22     	; 0x2c4 <main+0x166>
				case 'd':
					servo0.absolute_position-=5;
 2ae:	8f 89       	ldd	r24, Y+23	; 0x17
 2b0:	98 8d       	ldd	r25, Y+24	; 0x18
 2b2:	a9 8d       	ldd	r26, Y+25	; 0x19
 2b4:	ba 8d       	ldd	r27, Y+26	; 0x1a
 2b6:	05 97       	sbiw	r24, 0x05	; 5
 2b8:	a1 09       	sbc	r26, r1
 2ba:	b1 09       	sbc	r27, r1
 2bc:	8f 8b       	std	Y+23, r24	; 0x17
 2be:	98 8f       	std	Y+24, r25	; 0x18
 2c0:	a9 8f       	std	Y+25, r26	; 0x19
 2c2:	ba 8f       	std	Y+26, r27	; 0x1a
	
			
			
	//	servo0.rotate(timer_10k());
		
		capture_tacho = PINC;
 2c4:	66 b1       	in	r22, 0x06	; 6
		servo0.tacho(capture_tacho & SERVO0_TACHO_PLUS,capture_tacho & SERVO0_TACHO_MIN);
 2c6:	46 2f       	mov	r20, r22
 2c8:	42 70       	andi	r20, 0x02	; 2
 2ca:	61 70       	andi	r22, 0x01	; 1
 2cc:	ce 01       	movw	r24, r28
 2ce:	01 96       	adiw	r24, 0x01	; 1
 2d0:	0e 94 ca 01 	call	0x394	; 0x394 <_ZN10ServoMotor5tachoEhh>
		
		
		if(direction_signal.previous_direction != direction_signal.direction){
 2d4:	f8 01       	movw	r30, r16
 2d6:	91 81       	ldd	r25, Z+1	; 0x01
 2d8:	80 81       	ld	r24, Z
 2da:	98 17       	cp	r25, r24
 2dc:	29 f0       	breq	.+10     	; 0x2e8 <main+0x18a>
			spi_send_direction();
 2de:	0e 94 7a 00 	call	0xf4	; 0xf4 <_Z18spi_send_directionv>
			direction_signal.previous_direction = direction_signal.direction;
 2e2:	f8 01       	movw	r30, r16
 2e4:	80 81       	ld	r24, Z
 2e6:	81 83       	std	Z+1, r24	; 0x01
		}
		if(timer_10k() - oldtime > 100){
 2e8:	0e 94 30 02 	call	0x460	; 0x460 <_Z9timer_10kv>
 2ec:	dc 01       	movw	r26, r24
 2ee:	cb 01       	movw	r24, r22
 2f0:	88 19       	sub	r24, r8
 2f2:	99 09       	sbc	r25, r9
 2f4:	aa 09       	sbc	r26, r10
 2f6:	bb 09       	sbc	r27, r11
 2f8:	85 36       	cpi	r24, 0x65	; 101
 2fa:	91 05       	cpc	r25, r1
 2fc:	a1 05       	cpc	r26, r1
 2fe:	b1 05       	cpc	r27, r1
 300:	08 f4       	brcc	.+2      	; 0x304 <main+0x1a6>
 302:	a6 cf       	rjmp	.-180    	; 0x250 <main+0xf2>
			oldtime= timer_10k();
 304:	0e 94 30 02 	call	0x460	; 0x460 <_Z9timer_10kv>
 308:	4b 01       	movw	r8, r22
 30a:	5c 01       	movw	r10, r24
 30c:	a1 cf       	rjmp	.-190    	; 0x250 <main+0xf2>

0000030e <_ZN10ServoMotorC1EPVhS1_hh>:
	
		*servo_pwm = output;
	//	usart_sendln(summation);
		
	}
}
 30e:	0f 93       	push	r16
 310:	fc 01       	movw	r30, r24
 312:	12 aa       	std	Z+50, r1	; 0x32
 314:	12 8a       	std	Z+18, r1	; 0x12
 316:	13 8a       	std	Z+19, r1	; 0x13
 318:	14 8a       	std	Z+20, r1	; 0x14
 31a:	15 8a       	std	Z+21, r1	; 0x15
 31c:	16 8e       	std	Z+30, r1	; 0x1e
 31e:	17 8e       	std	Z+31, r1	; 0x1f
 320:	10 a2       	std	Z+32, r1	; 0x20
 322:	11 a2       	std	Z+33, r1	; 0x21
 324:	16 a2       	std	Z+38, r1	; 0x26
 326:	17 a2       	std	Z+39, r1	; 0x27
 328:	10 a6       	std	Z+40, r1	; 0x28
 32a:	11 a6       	std	Z+41, r1	; 0x29
 32c:	23 ab       	std	Z+51, r18	; 0x33
 32e:	04 ab       	std	Z+52, r16	; 0x34
 330:	57 a7       	std	Z+47, r21	; 0x2f
 332:	46 a7       	std	Z+46, r20	; 0x2e
 334:	71 ab       	std	Z+49, r23	; 0x31
 336:	60 ab       	std	Z+48, r22	; 0x30
 338:	16 82       	std	Z+6, r1	; 0x06
 33a:	17 82       	std	Z+7, r1	; 0x07
 33c:	10 86       	std	Z+8, r1	; 0x08
 33e:	11 86       	std	Z+9, r1	; 0x09
 340:	0f 91       	pop	r16
 342:	08 95       	ret

00000344 <_ZN10ServoMotor7set_pidEjjj>:
 344:	cf 93       	push	r28
 346:	df 93       	push	r29
 348:	fc 01       	movw	r30, r24
 34a:	ea 01       	movw	r28, r20
 34c:	71 83       	std	Z+1, r23	; 0x01
 34e:	60 83       	st	Z, r22
 350:	53 83       	std	Z+3, r21	; 0x03
 352:	42 83       	std	Z+2, r20	; 0x02
 354:	35 83       	std	Z+5, r19	; 0x05
 356:	24 83       	std	Z+4, r18	; 0x04
 358:	6f 5f       	subi	r22, 0xFF	; 255
 35a:	7f 4f       	sbci	r23, 0xFF	; 255
 35c:	84 e6       	ldi	r24, 0x64	; 100
 35e:	90 e0       	ldi	r25, 0x00	; 0
 360:	0e 94 c8 04 	call	0x990	; 0x990 <__udivmodhi4>
 364:	cb 01       	movw	r24, r22
 366:	a0 e0       	ldi	r26, 0x00	; 0
 368:	b0 e0       	ldi	r27, 0x00	; 0
 36a:	86 87       	std	Z+14, r24	; 0x0e
 36c:	97 87       	std	Z+15, r25	; 0x0f
 36e:	a0 8b       	std	Z+16, r26	; 0x10
 370:	b1 8b       	std	Z+17, r27	; 0x11
 372:	be 01       	movw	r22, r28
 374:	6f 5f       	subi	r22, 0xFF	; 255
 376:	7f 4f       	sbci	r23, 0xFF	; 255
 378:	85 e0       	ldi	r24, 0x05	; 5
 37a:	90 e0       	ldi	r25, 0x00	; 0
 37c:	0e 94 c8 04 	call	0x990	; 0x990 <__udivmodhi4>
 380:	cb 01       	movw	r24, r22
 382:	a0 e0       	ldi	r26, 0x00	; 0
 384:	b0 e0       	ldi	r27, 0x00	; 0
 386:	82 87       	std	Z+10, r24	; 0x0a
 388:	93 87       	std	Z+11, r25	; 0x0b
 38a:	a4 87       	std	Z+12, r26	; 0x0c
 38c:	b5 87       	std	Z+13, r27	; 0x0d
 38e:	df 91       	pop	r29
 390:	cf 91       	pop	r28
 392:	08 95       	ret

00000394 <_ZN10ServoMotor5tachoEhh>:
/*Updates the absolute position from the tachometer in the motor*/
void ServoMotor::tacho(uint8_t plus, uint8_t min){
 394:	fc 01       	movw	r30, r24
	if(tacho_state == 0){
 396:	82 a9       	ldd	r24, Z+50	; 0x32
 398:	81 11       	cpse	r24, r1
 39a:	1e c0       	rjmp	.+60     	; 0x3d8 <_ZN10ServoMotor5tachoEhh+0x44>
		/* If plus goes high and min is also high it went fowards 
		 * else it went backwards */
		if(plus){
 39c:	66 23       	and	r22, r22
 39e:	f9 f0       	breq	.+62     	; 0x3de <_ZN10ServoMotor5tachoEhh+0x4a>
			if(min){
 3a0:	44 23       	and	r20, r20
 3a2:	61 f0       	breq	.+24     	; 0x3bc <_ZN10ServoMotor5tachoEhh+0x28>
				absolute_position--;
 3a4:	86 89       	ldd	r24, Z+22	; 0x16
 3a6:	97 89       	ldd	r25, Z+23	; 0x17
 3a8:	a0 8d       	ldd	r26, Z+24	; 0x18
 3aa:	b1 8d       	ldd	r27, Z+25	; 0x19
 3ac:	01 97       	sbiw	r24, 0x01	; 1
 3ae:	a1 09       	sbc	r26, r1
 3b0:	b1 09       	sbc	r27, r1
 3b2:	86 8b       	std	Z+22, r24	; 0x16
 3b4:	97 8b       	std	Z+23, r25	; 0x17
 3b6:	a0 8f       	std	Z+24, r26	; 0x18
 3b8:	b1 8f       	std	Z+25, r27	; 0x19
 3ba:	0b c0       	rjmp	.+22     	; 0x3d2 <_ZN10ServoMotor5tachoEhh+0x3e>
			}else{
				absolute_position++;
 3bc:	86 89       	ldd	r24, Z+22	; 0x16
 3be:	97 89       	ldd	r25, Z+23	; 0x17
 3c0:	a0 8d       	ldd	r26, Z+24	; 0x18
 3c2:	b1 8d       	ldd	r27, Z+25	; 0x19
 3c4:	01 96       	adiw	r24, 0x01	; 1
 3c6:	a1 1d       	adc	r26, r1
 3c8:	b1 1d       	adc	r27, r1
 3ca:	86 8b       	std	Z+22, r24	; 0x16
 3cc:	97 8b       	std	Z+23, r25	; 0x17
 3ce:	a0 8f       	std	Z+24, r26	; 0x18
 3d0:	b1 8f       	std	Z+25, r27	; 0x19
			}
			tacho_state=1; 
 3d2:	81 e0       	ldi	r24, 0x01	; 1
 3d4:	82 ab       	std	Z+50, r24	; 0x32
 3d6:	08 95       	ret
		}
	}else{
		if(!plus){
 3d8:	61 11       	cpse	r22, r1
 3da:	01 c0       	rjmp	.+2      	; 0x3de <_ZN10ServoMotor5tachoEhh+0x4a>
			tacho_state = 0; 
 3dc:	12 aa       	std	Z+50, r1	; 0x32
 3de:	08 95       	ret

000003e0 <_ZN12StepperMotorC1Eifhh>:

//#define DEBUG_
#define S_SCALER 1000UL

/* Iniatialize the stepper motor */
StepperMotor::StepperMotor(int16_t current_pos, float step_to_angle, uint8_t dir_pin, uint8_t step_pin)
 3e0:	ef 92       	push	r14
 3e2:	0f 93       	push	r16
 3e4:	cf 93       	push	r28
 3e6:	df 93       	push	r29
 3e8:	ec 01       	movw	r28, r24
{
	state = S_WAIT; 
 3ea:	1f a2       	std	Y+39, r1	; 0x27
	this->current_pos	= current_pos;
 3ec:	7a 83       	std	Y+2, r23	; 0x02
 3ee:	69 83       	std	Y+1, r22	; 0x01
	/*this value should ideally be an integer */
	this->step_to_angle	= 1.0f/step_to_angle; 
 3f0:	60 e0       	ldi	r22, 0x00	; 0
 3f2:	70 e0       	ldi	r23, 0x00	; 0
 3f4:	80 e8       	ldi	r24, 0x80	; 128
 3f6:	9f e3       	ldi	r25, 0x3F	; 63
 3f8:	0e 94 2c 03 	call	0x658	; 0x658 <__divsf3>
 3fc:	6b a3       	std	Y+35, r22	; 0x23
 3fe:	7c a3       	std	Y+36, r23	; 0x24
 400:	8d a3       	std	Y+37, r24	; 0x25
 402:	9e a3       	std	Y+38, r25	; 0x26
	this->dir_pin		= dir_pin;
 404:	09 a3       	std	Y+33, r16	; 0x21
	this->step_pin		= step_pin;		
 406:	ea a2       	std	Y+34, r14	; 0x22
	stepper_time = 0;
 408:	1d 8e       	std	Y+29, r1	; 0x1d
 40a:	1e 8e       	std	Y+30, r1	; 0x1e
 40c:	1f 8e       	std	Y+31, r1	; 0x1f
 40e:	18 a2       	std	Y+32, r1	; 0x20
	long_pulse_width = 0;
 410:	1f 86       	std	Y+15, r1	; 0x0f
 412:	18 8a       	std	Y+16, r1	; 0x10
 414:	19 8a       	std	Y+17, r1	; 0x11
 416:	1a 8a       	std	Y+18, r1	; 0x12
} 
 418:	df 91       	pop	r29
 41a:	cf 91       	pop	r28
 41c:	0f 91       	pop	r16
 41e:	ef 90       	pop	r14
 420:	08 95       	ret

00000422 <_Z12timer_enablev>:
	timer_counter = 0; 
}

//Reset the counter
void timer_reset(){
	timer_counter = 0; 
 422:	a0 eb       	ldi	r26, 0xB0	; 176
 424:	b0 e0       	ldi	r27, 0x00	; 0
 426:	1c 92       	st	X, r1
 428:	e1 eb       	ldi	r30, 0xB1	; 177
 42a:	f0 e0       	ldi	r31, 0x00	; 0
 42c:	10 82       	st	Z, r1
 42e:	10 92 b2 00 	sts	0x00B2, r1	; 0x8000b2 <__DATA_REGION_ORIGIN__+0x52>
 432:	88 e1       	ldi	r24, 0x18	; 24
 434:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__DATA_REGION_ORIGIN__+0x53>
 438:	8c 91       	ld	r24, X
 43a:	82 60       	ori	r24, 0x02	; 2
 43c:	8c 93       	st	X, r24
 43e:	80 81       	ld	r24, Z
 440:	84 60       	ori	r24, 0x04	; 4
 442:	80 83       	st	Z, r24
 444:	e0 e7       	ldi	r30, 0x70	; 112
 446:	f0 e0       	ldi	r31, 0x00	; 0
 448:	80 81       	ld	r24, Z
 44a:	82 60       	ori	r24, 0x02	; 2
 44c:	80 83       	st	Z, r24
 44e:	10 92 14 01 	sts	0x0114, r1	; 0x800114 <timer_counter>
 452:	10 92 15 01 	sts	0x0115, r1	; 0x800115 <timer_counter+0x1>
 456:	10 92 16 01 	sts	0x0116, r1	; 0x800116 <timer_counter+0x2>
 45a:	10 92 17 01 	sts	0x0117, r1	; 0x800117 <timer_counter+0x3>
 45e:	08 95       	ret

00000460 <_Z9timer_10kv>:
}

//Return the elapsed time since the counter was enable 
uint32_t timer_10k(){
	return timer_counter;
 460:	60 91 14 01 	lds	r22, 0x0114	; 0x800114 <timer_counter>
 464:	70 91 15 01 	lds	r23, 0x0115	; 0x800115 <timer_counter+0x1>
 468:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <timer_counter+0x2>
 46c:	90 91 17 01 	lds	r25, 0x0117	; 0x800117 <timer_counter+0x3>
}
 470:	08 95       	ret

00000472 <__vector_7>:

//interrupt vector 
ISR (TIMER2_COMPA_vect) {
 472:	1f 92       	push	r1
 474:	0f 92       	push	r0
 476:	0f b6       	in	r0, 0x3f	; 63
 478:	0f 92       	push	r0
 47a:	11 24       	eor	r1, r1
 47c:	8f 93       	push	r24
 47e:	9f 93       	push	r25
 480:	af 93       	push	r26
 482:	bf 93       	push	r27
	timer_counter++;
 484:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <timer_counter>
 488:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <timer_counter+0x1>
 48c:	a0 91 16 01 	lds	r26, 0x0116	; 0x800116 <timer_counter+0x2>
 490:	b0 91 17 01 	lds	r27, 0x0117	; 0x800117 <timer_counter+0x3>
 494:	01 96       	adiw	r24, 0x01	; 1
 496:	a1 1d       	adc	r26, r1
 498:	b1 1d       	adc	r27, r1
 49a:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <timer_counter>
 49e:	90 93 15 01 	sts	0x0115, r25	; 0x800115 <timer_counter+0x1>
 4a2:	a0 93 16 01 	sts	0x0116, r26	; 0x800116 <timer_counter+0x2>
 4a6:	b0 93 17 01 	sts	0x0117, r27	; 0x800117 <timer_counter+0x3>
 4aa:	bf 91       	pop	r27
 4ac:	af 91       	pop	r26
 4ae:	9f 91       	pop	r25
 4b0:	8f 91       	pop	r24
 4b2:	0f 90       	pop	r0
 4b4:	0f be       	out	0x3f, r0	; 63
 4b6:	0f 90       	pop	r0
 4b8:	1f 90       	pop	r1
 4ba:	18 95       	reti

000004bc <_Z12usart_enablej>:
}


void usart_sendln(uint32_t number){
	usart_send(number);
	usart_newline();
 4bc:	28 e9       	ldi	r18, 0x98	; 152
 4be:	20 93 c1 00 	sts	0x00C1, r18	; 0x8000c1 <__DATA_REGION_ORIGIN__+0x61>
 4c2:	26 e0       	ldi	r18, 0x06	; 6
 4c4:	20 93 c2 00 	sts	0x00C2, r18	; 0x8000c2 <__DATA_REGION_ORIGIN__+0x62>
 4c8:	bc 01       	movw	r22, r24
 4ca:	80 e0       	ldi	r24, 0x00	; 0
 4cc:	90 e0       	ldi	r25, 0x00	; 0
 4ce:	0e 94 cd 03 	call	0x79a	; 0x79a <__floatunsisf>
 4d2:	20 e0       	ldi	r18, 0x00	; 0
 4d4:	30 e0       	ldi	r19, 0x00	; 0
 4d6:	40 e8       	ldi	r20, 0x80	; 128
 4d8:	51 e4       	ldi	r21, 0x41	; 65
 4da:	0e 94 5b 04 	call	0x8b6	; 0x8b6 <__mulsf3>
 4de:	9b 01       	movw	r18, r22
 4e0:	ac 01       	movw	r20, r24
 4e2:	60 e0       	ldi	r22, 0x00	; 0
 4e4:	74 e2       	ldi	r23, 0x24	; 36
 4e6:	84 e7       	ldi	r24, 0x74	; 116
 4e8:	9b e4       	ldi	r25, 0x4B	; 75
 4ea:	0e 94 2c 03 	call	0x658	; 0x658 <__divsf3>
 4ee:	20 e0       	ldi	r18, 0x00	; 0
 4f0:	30 e0       	ldi	r19, 0x00	; 0
 4f2:	40 e8       	ldi	r20, 0x80	; 128
 4f4:	5f e3       	ldi	r21, 0x3F	; 63
 4f6:	0e 94 bf 02 	call	0x57e	; 0x57e <__subsf3>
 4fa:	0e 94 9e 03 	call	0x73c	; 0x73c <__fixunssfsi>
 4fe:	70 93 c5 00 	sts	0x00C5, r23	; 0x8000c5 <__DATA_REGION_ORIGIN__+0x65>
 502:	60 93 c4 00 	sts	0x00C4, r22	; 0x8000c4 <__DATA_REGION_ORIGIN__+0x64>
 506:	08 95       	ret

00000508 <_Z10usart_sendc>:
 508:	e0 ec       	ldi	r30, 0xC0	; 192
 50a:	f0 e0       	ldi	r31, 0x00	; 0
 50c:	90 81       	ld	r25, Z
 50e:	95 ff       	sbrs	r25, 5
 510:	fd cf       	rjmp	.-6      	; 0x50c <_Z10usart_sendc+0x4>
 512:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
 516:	08 95       	ret

00000518 <_Z13usart_newlinev>:
 518:	8a e0       	ldi	r24, 0x0A	; 10
 51a:	0e 94 84 02 	call	0x508	; 0x508 <_Z10usart_sendc>
 51e:	08 95       	ret

00000520 <_Z10usart_sendj>:
 520:	0f 93       	push	r16
 522:	1f 93       	push	r17
 524:	cf 93       	push	r28
 526:	df 93       	push	r29
 528:	cd b7       	in	r28, 0x3d	; 61
 52a:	de b7       	in	r29, 0x3e	; 62
 52c:	2a 97       	sbiw	r28, 0x0a	; 10
 52e:	0f b6       	in	r0, 0x3f	; 63
 530:	f8 94       	cli
 532:	de bf       	out	0x3e, r29	; 62
 534:	0f be       	out	0x3f, r0	; 63
 536:	cd bf       	out	0x3d, r28	; 61
 538:	4a e0       	ldi	r20, 0x0A	; 10
 53a:	be 01       	movw	r22, r28
 53c:	6f 5f       	subi	r22, 0xFF	; 255
 53e:	7f 4f       	sbci	r23, 0xFF	; 255
 540:	0e 94 02 05 	call	0xa04	; 0xa04 <__utoa_ncheck>
 544:	89 81       	ldd	r24, Y+1	; 0x01
 546:	88 23       	and	r24, r24
 548:	51 f0       	breq	.+20     	; 0x55e <_Z10usart_sendj+0x3e>
 54a:	8e 01       	movw	r16, r28
 54c:	0e 5f       	subi	r16, 0xFE	; 254
 54e:	1f 4f       	sbci	r17, 0xFF	; 255
 550:	0e 94 84 02 	call	0x508	; 0x508 <_Z10usart_sendc>
 554:	f8 01       	movw	r30, r16
 556:	81 91       	ld	r24, Z+
 558:	8f 01       	movw	r16, r30
 55a:	81 11       	cpse	r24, r1
 55c:	f9 cf       	rjmp	.-14     	; 0x550 <_Z10usart_sendj+0x30>
 55e:	2a 96       	adiw	r28, 0x0a	; 10
 560:	0f b6       	in	r0, 0x3f	; 63
 562:	f8 94       	cli
 564:	de bf       	out	0x3e, r29	; 62
 566:	0f be       	out	0x3f, r0	; 63
 568:	cd bf       	out	0x3d, r28	; 61
 56a:	df 91       	pop	r29
 56c:	cf 91       	pop	r28
 56e:	1f 91       	pop	r17
 570:	0f 91       	pop	r16
 572:	08 95       	ret

00000574 <_Z12usart_sendlnj>:
}

void usart_sendln(uint16_t number){
	usart_send(number);
 574:	0e 94 90 02 	call	0x520	; 0x520 <_Z10usart_sendj>
	usart_newline();
 578:	0e 94 8c 02 	call	0x518	; 0x518 <_Z13usart_newlinev>
 57c:	08 95       	ret

0000057e <__subsf3>:
 57e:	50 58       	subi	r21, 0x80	; 128

00000580 <__addsf3>:
 580:	bb 27       	eor	r27, r27
 582:	aa 27       	eor	r26, r26
 584:	0e 94 d7 02 	call	0x5ae	; 0x5ae <__addsf3x>
 588:	0c 94 21 04 	jmp	0x842	; 0x842 <__fp_round>
 58c:	0e 94 13 04 	call	0x826	; 0x826 <__fp_pscA>
 590:	38 f0       	brcs	.+14     	; 0x5a0 <__addsf3+0x20>
 592:	0e 94 1a 04 	call	0x834	; 0x834 <__fp_pscB>
 596:	20 f0       	brcs	.+8      	; 0x5a0 <__addsf3+0x20>
 598:	39 f4       	brne	.+14     	; 0x5a8 <__addsf3+0x28>
 59a:	9f 3f       	cpi	r25, 0xFF	; 255
 59c:	19 f4       	brne	.+6      	; 0x5a4 <__addsf3+0x24>
 59e:	26 f4       	brtc	.+8      	; 0x5a8 <__addsf3+0x28>
 5a0:	0c 94 10 04 	jmp	0x820	; 0x820 <__fp_nan>
 5a4:	0e f4       	brtc	.+2      	; 0x5a8 <__addsf3+0x28>
 5a6:	e0 95       	com	r30
 5a8:	e7 fb       	bst	r30, 7
 5aa:	0c 94 0a 04 	jmp	0x814	; 0x814 <__fp_inf>

000005ae <__addsf3x>:
 5ae:	e9 2f       	mov	r30, r25
 5b0:	0e 94 32 04 	call	0x864	; 0x864 <__fp_split3>
 5b4:	58 f3       	brcs	.-42     	; 0x58c <__addsf3+0xc>
 5b6:	ba 17       	cp	r27, r26
 5b8:	62 07       	cpc	r22, r18
 5ba:	73 07       	cpc	r23, r19
 5bc:	84 07       	cpc	r24, r20
 5be:	95 07       	cpc	r25, r21
 5c0:	20 f0       	brcs	.+8      	; 0x5ca <__addsf3x+0x1c>
 5c2:	79 f4       	brne	.+30     	; 0x5e2 <__addsf3x+0x34>
 5c4:	a6 f5       	brtc	.+104    	; 0x62e <__addsf3x+0x80>
 5c6:	0c 94 54 04 	jmp	0x8a8	; 0x8a8 <__fp_zero>
 5ca:	0e f4       	brtc	.+2      	; 0x5ce <__addsf3x+0x20>
 5cc:	e0 95       	com	r30
 5ce:	0b 2e       	mov	r0, r27
 5d0:	ba 2f       	mov	r27, r26
 5d2:	a0 2d       	mov	r26, r0
 5d4:	0b 01       	movw	r0, r22
 5d6:	b9 01       	movw	r22, r18
 5d8:	90 01       	movw	r18, r0
 5da:	0c 01       	movw	r0, r24
 5dc:	ca 01       	movw	r24, r20
 5de:	a0 01       	movw	r20, r0
 5e0:	11 24       	eor	r1, r1
 5e2:	ff 27       	eor	r31, r31
 5e4:	59 1b       	sub	r21, r25
 5e6:	99 f0       	breq	.+38     	; 0x60e <__addsf3x+0x60>
 5e8:	59 3f       	cpi	r21, 0xF9	; 249
 5ea:	50 f4       	brcc	.+20     	; 0x600 <__addsf3x+0x52>
 5ec:	50 3e       	cpi	r21, 0xE0	; 224
 5ee:	68 f1       	brcs	.+90     	; 0x64a <__addsf3x+0x9c>
 5f0:	1a 16       	cp	r1, r26
 5f2:	f0 40       	sbci	r31, 0x00	; 0
 5f4:	a2 2f       	mov	r26, r18
 5f6:	23 2f       	mov	r18, r19
 5f8:	34 2f       	mov	r19, r20
 5fa:	44 27       	eor	r20, r20
 5fc:	58 5f       	subi	r21, 0xF8	; 248
 5fe:	f3 cf       	rjmp	.-26     	; 0x5e6 <__addsf3x+0x38>
 600:	46 95       	lsr	r20
 602:	37 95       	ror	r19
 604:	27 95       	ror	r18
 606:	a7 95       	ror	r26
 608:	f0 40       	sbci	r31, 0x00	; 0
 60a:	53 95       	inc	r21
 60c:	c9 f7       	brne	.-14     	; 0x600 <__addsf3x+0x52>
 60e:	7e f4       	brtc	.+30     	; 0x62e <__addsf3x+0x80>
 610:	1f 16       	cp	r1, r31
 612:	ba 0b       	sbc	r27, r26
 614:	62 0b       	sbc	r22, r18
 616:	73 0b       	sbc	r23, r19
 618:	84 0b       	sbc	r24, r20
 61a:	ba f0       	brmi	.+46     	; 0x64a <__addsf3x+0x9c>
 61c:	91 50       	subi	r25, 0x01	; 1
 61e:	a1 f0       	breq	.+40     	; 0x648 <__addsf3x+0x9a>
 620:	ff 0f       	add	r31, r31
 622:	bb 1f       	adc	r27, r27
 624:	66 1f       	adc	r22, r22
 626:	77 1f       	adc	r23, r23
 628:	88 1f       	adc	r24, r24
 62a:	c2 f7       	brpl	.-16     	; 0x61c <__addsf3x+0x6e>
 62c:	0e c0       	rjmp	.+28     	; 0x64a <__addsf3x+0x9c>
 62e:	ba 0f       	add	r27, r26
 630:	62 1f       	adc	r22, r18
 632:	73 1f       	adc	r23, r19
 634:	84 1f       	adc	r24, r20
 636:	48 f4       	brcc	.+18     	; 0x64a <__addsf3x+0x9c>
 638:	87 95       	ror	r24
 63a:	77 95       	ror	r23
 63c:	67 95       	ror	r22
 63e:	b7 95       	ror	r27
 640:	f7 95       	ror	r31
 642:	9e 3f       	cpi	r25, 0xFE	; 254
 644:	08 f0       	brcs	.+2      	; 0x648 <__addsf3x+0x9a>
 646:	b0 cf       	rjmp	.-160    	; 0x5a8 <__addsf3+0x28>
 648:	93 95       	inc	r25
 64a:	88 0f       	add	r24, r24
 64c:	08 f0       	brcs	.+2      	; 0x650 <__addsf3x+0xa2>
 64e:	99 27       	eor	r25, r25
 650:	ee 0f       	add	r30, r30
 652:	97 95       	ror	r25
 654:	87 95       	ror	r24
 656:	08 95       	ret

00000658 <__divsf3>:
 658:	0e 94 40 03 	call	0x680	; 0x680 <__divsf3x>
 65c:	0c 94 21 04 	jmp	0x842	; 0x842 <__fp_round>
 660:	0e 94 1a 04 	call	0x834	; 0x834 <__fp_pscB>
 664:	58 f0       	brcs	.+22     	; 0x67c <__divsf3+0x24>
 666:	0e 94 13 04 	call	0x826	; 0x826 <__fp_pscA>
 66a:	40 f0       	brcs	.+16     	; 0x67c <__divsf3+0x24>
 66c:	29 f4       	brne	.+10     	; 0x678 <__divsf3+0x20>
 66e:	5f 3f       	cpi	r21, 0xFF	; 255
 670:	29 f0       	breq	.+10     	; 0x67c <__divsf3+0x24>
 672:	0c 94 0a 04 	jmp	0x814	; 0x814 <__fp_inf>
 676:	51 11       	cpse	r21, r1
 678:	0c 94 55 04 	jmp	0x8aa	; 0x8aa <__fp_szero>
 67c:	0c 94 10 04 	jmp	0x820	; 0x820 <__fp_nan>

00000680 <__divsf3x>:
 680:	0e 94 32 04 	call	0x864	; 0x864 <__fp_split3>
 684:	68 f3       	brcs	.-38     	; 0x660 <__divsf3+0x8>

00000686 <__divsf3_pse>:
 686:	99 23       	and	r25, r25
 688:	b1 f3       	breq	.-20     	; 0x676 <__divsf3+0x1e>
 68a:	55 23       	and	r21, r21
 68c:	91 f3       	breq	.-28     	; 0x672 <__divsf3+0x1a>
 68e:	95 1b       	sub	r25, r21
 690:	55 0b       	sbc	r21, r21
 692:	bb 27       	eor	r27, r27
 694:	aa 27       	eor	r26, r26
 696:	62 17       	cp	r22, r18
 698:	73 07       	cpc	r23, r19
 69a:	84 07       	cpc	r24, r20
 69c:	38 f0       	brcs	.+14     	; 0x6ac <__divsf3_pse+0x26>
 69e:	9f 5f       	subi	r25, 0xFF	; 255
 6a0:	5f 4f       	sbci	r21, 0xFF	; 255
 6a2:	22 0f       	add	r18, r18
 6a4:	33 1f       	adc	r19, r19
 6a6:	44 1f       	adc	r20, r20
 6a8:	aa 1f       	adc	r26, r26
 6aa:	a9 f3       	breq	.-22     	; 0x696 <__divsf3_pse+0x10>
 6ac:	35 d0       	rcall	.+106    	; 0x718 <__divsf3_pse+0x92>
 6ae:	0e 2e       	mov	r0, r30
 6b0:	3a f0       	brmi	.+14     	; 0x6c0 <__divsf3_pse+0x3a>
 6b2:	e0 e8       	ldi	r30, 0x80	; 128
 6b4:	32 d0       	rcall	.+100    	; 0x71a <__divsf3_pse+0x94>
 6b6:	91 50       	subi	r25, 0x01	; 1
 6b8:	50 40       	sbci	r21, 0x00	; 0
 6ba:	e6 95       	lsr	r30
 6bc:	00 1c       	adc	r0, r0
 6be:	ca f7       	brpl	.-14     	; 0x6b2 <__divsf3_pse+0x2c>
 6c0:	2b d0       	rcall	.+86     	; 0x718 <__divsf3_pse+0x92>
 6c2:	fe 2f       	mov	r31, r30
 6c4:	29 d0       	rcall	.+82     	; 0x718 <__divsf3_pse+0x92>
 6c6:	66 0f       	add	r22, r22
 6c8:	77 1f       	adc	r23, r23
 6ca:	88 1f       	adc	r24, r24
 6cc:	bb 1f       	adc	r27, r27
 6ce:	26 17       	cp	r18, r22
 6d0:	37 07       	cpc	r19, r23
 6d2:	48 07       	cpc	r20, r24
 6d4:	ab 07       	cpc	r26, r27
 6d6:	b0 e8       	ldi	r27, 0x80	; 128
 6d8:	09 f0       	breq	.+2      	; 0x6dc <__divsf3_pse+0x56>
 6da:	bb 0b       	sbc	r27, r27
 6dc:	80 2d       	mov	r24, r0
 6de:	bf 01       	movw	r22, r30
 6e0:	ff 27       	eor	r31, r31
 6e2:	93 58       	subi	r25, 0x83	; 131
 6e4:	5f 4f       	sbci	r21, 0xFF	; 255
 6e6:	3a f0       	brmi	.+14     	; 0x6f6 <__divsf3_pse+0x70>
 6e8:	9e 3f       	cpi	r25, 0xFE	; 254
 6ea:	51 05       	cpc	r21, r1
 6ec:	78 f0       	brcs	.+30     	; 0x70c <__divsf3_pse+0x86>
 6ee:	0c 94 0a 04 	jmp	0x814	; 0x814 <__fp_inf>
 6f2:	0c 94 55 04 	jmp	0x8aa	; 0x8aa <__fp_szero>
 6f6:	5f 3f       	cpi	r21, 0xFF	; 255
 6f8:	e4 f3       	brlt	.-8      	; 0x6f2 <__divsf3_pse+0x6c>
 6fa:	98 3e       	cpi	r25, 0xE8	; 232
 6fc:	d4 f3       	brlt	.-12     	; 0x6f2 <__divsf3_pse+0x6c>
 6fe:	86 95       	lsr	r24
 700:	77 95       	ror	r23
 702:	67 95       	ror	r22
 704:	b7 95       	ror	r27
 706:	f7 95       	ror	r31
 708:	9f 5f       	subi	r25, 0xFF	; 255
 70a:	c9 f7       	brne	.-14     	; 0x6fe <__divsf3_pse+0x78>
 70c:	88 0f       	add	r24, r24
 70e:	91 1d       	adc	r25, r1
 710:	96 95       	lsr	r25
 712:	87 95       	ror	r24
 714:	97 f9       	bld	r25, 7
 716:	08 95       	ret
 718:	e1 e0       	ldi	r30, 0x01	; 1
 71a:	66 0f       	add	r22, r22
 71c:	77 1f       	adc	r23, r23
 71e:	88 1f       	adc	r24, r24
 720:	bb 1f       	adc	r27, r27
 722:	62 17       	cp	r22, r18
 724:	73 07       	cpc	r23, r19
 726:	84 07       	cpc	r24, r20
 728:	ba 07       	cpc	r27, r26
 72a:	20 f0       	brcs	.+8      	; 0x734 <__divsf3_pse+0xae>
 72c:	62 1b       	sub	r22, r18
 72e:	73 0b       	sbc	r23, r19
 730:	84 0b       	sbc	r24, r20
 732:	ba 0b       	sbc	r27, r26
 734:	ee 1f       	adc	r30, r30
 736:	88 f7       	brcc	.-30     	; 0x71a <__divsf3_pse+0x94>
 738:	e0 95       	com	r30
 73a:	08 95       	ret

0000073c <__fixunssfsi>:
 73c:	0e 94 3a 04 	call	0x874	; 0x874 <__fp_splitA>
 740:	88 f0       	brcs	.+34     	; 0x764 <__fixunssfsi+0x28>
 742:	9f 57       	subi	r25, 0x7F	; 127
 744:	98 f0       	brcs	.+38     	; 0x76c <__fixunssfsi+0x30>
 746:	b9 2f       	mov	r27, r25
 748:	99 27       	eor	r25, r25
 74a:	b7 51       	subi	r27, 0x17	; 23
 74c:	b0 f0       	brcs	.+44     	; 0x77a <__fixunssfsi+0x3e>
 74e:	e1 f0       	breq	.+56     	; 0x788 <__fixunssfsi+0x4c>
 750:	66 0f       	add	r22, r22
 752:	77 1f       	adc	r23, r23
 754:	88 1f       	adc	r24, r24
 756:	99 1f       	adc	r25, r25
 758:	1a f0       	brmi	.+6      	; 0x760 <__fixunssfsi+0x24>
 75a:	ba 95       	dec	r27
 75c:	c9 f7       	brne	.-14     	; 0x750 <__fixunssfsi+0x14>
 75e:	14 c0       	rjmp	.+40     	; 0x788 <__fixunssfsi+0x4c>
 760:	b1 30       	cpi	r27, 0x01	; 1
 762:	91 f0       	breq	.+36     	; 0x788 <__fixunssfsi+0x4c>
 764:	0e 94 54 04 	call	0x8a8	; 0x8a8 <__fp_zero>
 768:	b1 e0       	ldi	r27, 0x01	; 1
 76a:	08 95       	ret
 76c:	0c 94 54 04 	jmp	0x8a8	; 0x8a8 <__fp_zero>
 770:	67 2f       	mov	r22, r23
 772:	78 2f       	mov	r23, r24
 774:	88 27       	eor	r24, r24
 776:	b8 5f       	subi	r27, 0xF8	; 248
 778:	39 f0       	breq	.+14     	; 0x788 <__fixunssfsi+0x4c>
 77a:	b9 3f       	cpi	r27, 0xF9	; 249
 77c:	cc f3       	brlt	.-14     	; 0x770 <__fixunssfsi+0x34>
 77e:	86 95       	lsr	r24
 780:	77 95       	ror	r23
 782:	67 95       	ror	r22
 784:	b3 95       	inc	r27
 786:	d9 f7       	brne	.-10     	; 0x77e <__fixunssfsi+0x42>
 788:	3e f4       	brtc	.+14     	; 0x798 <__fixunssfsi+0x5c>
 78a:	90 95       	com	r25
 78c:	80 95       	com	r24
 78e:	70 95       	com	r23
 790:	61 95       	neg	r22
 792:	7f 4f       	sbci	r23, 0xFF	; 255
 794:	8f 4f       	sbci	r24, 0xFF	; 255
 796:	9f 4f       	sbci	r25, 0xFF	; 255
 798:	08 95       	ret

0000079a <__floatunsisf>:
 79a:	e8 94       	clt
 79c:	09 c0       	rjmp	.+18     	; 0x7b0 <__floatsisf+0x12>

0000079e <__floatsisf>:
 79e:	97 fb       	bst	r25, 7
 7a0:	3e f4       	brtc	.+14     	; 0x7b0 <__floatsisf+0x12>
 7a2:	90 95       	com	r25
 7a4:	80 95       	com	r24
 7a6:	70 95       	com	r23
 7a8:	61 95       	neg	r22
 7aa:	7f 4f       	sbci	r23, 0xFF	; 255
 7ac:	8f 4f       	sbci	r24, 0xFF	; 255
 7ae:	9f 4f       	sbci	r25, 0xFF	; 255
 7b0:	99 23       	and	r25, r25
 7b2:	a9 f0       	breq	.+42     	; 0x7de <__floatsisf+0x40>
 7b4:	f9 2f       	mov	r31, r25
 7b6:	96 e9       	ldi	r25, 0x96	; 150
 7b8:	bb 27       	eor	r27, r27
 7ba:	93 95       	inc	r25
 7bc:	f6 95       	lsr	r31
 7be:	87 95       	ror	r24
 7c0:	77 95       	ror	r23
 7c2:	67 95       	ror	r22
 7c4:	b7 95       	ror	r27
 7c6:	f1 11       	cpse	r31, r1
 7c8:	f8 cf       	rjmp	.-16     	; 0x7ba <__floatsisf+0x1c>
 7ca:	fa f4       	brpl	.+62     	; 0x80a <__floatsisf+0x6c>
 7cc:	bb 0f       	add	r27, r27
 7ce:	11 f4       	brne	.+4      	; 0x7d4 <__floatsisf+0x36>
 7d0:	60 ff       	sbrs	r22, 0
 7d2:	1b c0       	rjmp	.+54     	; 0x80a <__floatsisf+0x6c>
 7d4:	6f 5f       	subi	r22, 0xFF	; 255
 7d6:	7f 4f       	sbci	r23, 0xFF	; 255
 7d8:	8f 4f       	sbci	r24, 0xFF	; 255
 7da:	9f 4f       	sbci	r25, 0xFF	; 255
 7dc:	16 c0       	rjmp	.+44     	; 0x80a <__floatsisf+0x6c>
 7de:	88 23       	and	r24, r24
 7e0:	11 f0       	breq	.+4      	; 0x7e6 <__floatsisf+0x48>
 7e2:	96 e9       	ldi	r25, 0x96	; 150
 7e4:	11 c0       	rjmp	.+34     	; 0x808 <__floatsisf+0x6a>
 7e6:	77 23       	and	r23, r23
 7e8:	21 f0       	breq	.+8      	; 0x7f2 <__floatsisf+0x54>
 7ea:	9e e8       	ldi	r25, 0x8E	; 142
 7ec:	87 2f       	mov	r24, r23
 7ee:	76 2f       	mov	r23, r22
 7f0:	05 c0       	rjmp	.+10     	; 0x7fc <__floatsisf+0x5e>
 7f2:	66 23       	and	r22, r22
 7f4:	71 f0       	breq	.+28     	; 0x812 <__floatsisf+0x74>
 7f6:	96 e8       	ldi	r25, 0x86	; 134
 7f8:	86 2f       	mov	r24, r22
 7fa:	70 e0       	ldi	r23, 0x00	; 0
 7fc:	60 e0       	ldi	r22, 0x00	; 0
 7fe:	2a f0       	brmi	.+10     	; 0x80a <__floatsisf+0x6c>
 800:	9a 95       	dec	r25
 802:	66 0f       	add	r22, r22
 804:	77 1f       	adc	r23, r23
 806:	88 1f       	adc	r24, r24
 808:	da f7       	brpl	.-10     	; 0x800 <__floatsisf+0x62>
 80a:	88 0f       	add	r24, r24
 80c:	96 95       	lsr	r25
 80e:	87 95       	ror	r24
 810:	97 f9       	bld	r25, 7
 812:	08 95       	ret

00000814 <__fp_inf>:
 814:	97 f9       	bld	r25, 7
 816:	9f 67       	ori	r25, 0x7F	; 127
 818:	80 e8       	ldi	r24, 0x80	; 128
 81a:	70 e0       	ldi	r23, 0x00	; 0
 81c:	60 e0       	ldi	r22, 0x00	; 0
 81e:	08 95       	ret

00000820 <__fp_nan>:
 820:	9f ef       	ldi	r25, 0xFF	; 255
 822:	80 ec       	ldi	r24, 0xC0	; 192
 824:	08 95       	ret

00000826 <__fp_pscA>:
 826:	00 24       	eor	r0, r0
 828:	0a 94       	dec	r0
 82a:	16 16       	cp	r1, r22
 82c:	17 06       	cpc	r1, r23
 82e:	18 06       	cpc	r1, r24
 830:	09 06       	cpc	r0, r25
 832:	08 95       	ret

00000834 <__fp_pscB>:
 834:	00 24       	eor	r0, r0
 836:	0a 94       	dec	r0
 838:	12 16       	cp	r1, r18
 83a:	13 06       	cpc	r1, r19
 83c:	14 06       	cpc	r1, r20
 83e:	05 06       	cpc	r0, r21
 840:	08 95       	ret

00000842 <__fp_round>:
 842:	09 2e       	mov	r0, r25
 844:	03 94       	inc	r0
 846:	00 0c       	add	r0, r0
 848:	11 f4       	brne	.+4      	; 0x84e <__fp_round+0xc>
 84a:	88 23       	and	r24, r24
 84c:	52 f0       	brmi	.+20     	; 0x862 <__fp_round+0x20>
 84e:	bb 0f       	add	r27, r27
 850:	40 f4       	brcc	.+16     	; 0x862 <__fp_round+0x20>
 852:	bf 2b       	or	r27, r31
 854:	11 f4       	brne	.+4      	; 0x85a <__fp_round+0x18>
 856:	60 ff       	sbrs	r22, 0
 858:	04 c0       	rjmp	.+8      	; 0x862 <__fp_round+0x20>
 85a:	6f 5f       	subi	r22, 0xFF	; 255
 85c:	7f 4f       	sbci	r23, 0xFF	; 255
 85e:	8f 4f       	sbci	r24, 0xFF	; 255
 860:	9f 4f       	sbci	r25, 0xFF	; 255
 862:	08 95       	ret

00000864 <__fp_split3>:
 864:	57 fd       	sbrc	r21, 7
 866:	90 58       	subi	r25, 0x80	; 128
 868:	44 0f       	add	r20, r20
 86a:	55 1f       	adc	r21, r21
 86c:	59 f0       	breq	.+22     	; 0x884 <__fp_splitA+0x10>
 86e:	5f 3f       	cpi	r21, 0xFF	; 255
 870:	71 f0       	breq	.+28     	; 0x88e <__fp_splitA+0x1a>
 872:	47 95       	ror	r20

00000874 <__fp_splitA>:
 874:	88 0f       	add	r24, r24
 876:	97 fb       	bst	r25, 7
 878:	99 1f       	adc	r25, r25
 87a:	61 f0       	breq	.+24     	; 0x894 <__fp_splitA+0x20>
 87c:	9f 3f       	cpi	r25, 0xFF	; 255
 87e:	79 f0       	breq	.+30     	; 0x89e <__fp_splitA+0x2a>
 880:	87 95       	ror	r24
 882:	08 95       	ret
 884:	12 16       	cp	r1, r18
 886:	13 06       	cpc	r1, r19
 888:	14 06       	cpc	r1, r20
 88a:	55 1f       	adc	r21, r21
 88c:	f2 cf       	rjmp	.-28     	; 0x872 <__fp_split3+0xe>
 88e:	46 95       	lsr	r20
 890:	f1 df       	rcall	.-30     	; 0x874 <__fp_splitA>
 892:	08 c0       	rjmp	.+16     	; 0x8a4 <__fp_splitA+0x30>
 894:	16 16       	cp	r1, r22
 896:	17 06       	cpc	r1, r23
 898:	18 06       	cpc	r1, r24
 89a:	99 1f       	adc	r25, r25
 89c:	f1 cf       	rjmp	.-30     	; 0x880 <__fp_splitA+0xc>
 89e:	86 95       	lsr	r24
 8a0:	71 05       	cpc	r23, r1
 8a2:	61 05       	cpc	r22, r1
 8a4:	08 94       	sec
 8a6:	08 95       	ret

000008a8 <__fp_zero>:
 8a8:	e8 94       	clt

000008aa <__fp_szero>:
 8aa:	bb 27       	eor	r27, r27
 8ac:	66 27       	eor	r22, r22
 8ae:	77 27       	eor	r23, r23
 8b0:	cb 01       	movw	r24, r22
 8b2:	97 f9       	bld	r25, 7
 8b4:	08 95       	ret

000008b6 <__mulsf3>:
 8b6:	0e 94 6e 04 	call	0x8dc	; 0x8dc <__mulsf3x>
 8ba:	0c 94 21 04 	jmp	0x842	; 0x842 <__fp_round>
 8be:	0e 94 13 04 	call	0x826	; 0x826 <__fp_pscA>
 8c2:	38 f0       	brcs	.+14     	; 0x8d2 <__mulsf3+0x1c>
 8c4:	0e 94 1a 04 	call	0x834	; 0x834 <__fp_pscB>
 8c8:	20 f0       	brcs	.+8      	; 0x8d2 <__mulsf3+0x1c>
 8ca:	95 23       	and	r25, r21
 8cc:	11 f0       	breq	.+4      	; 0x8d2 <__mulsf3+0x1c>
 8ce:	0c 94 0a 04 	jmp	0x814	; 0x814 <__fp_inf>
 8d2:	0c 94 10 04 	jmp	0x820	; 0x820 <__fp_nan>
 8d6:	11 24       	eor	r1, r1
 8d8:	0c 94 55 04 	jmp	0x8aa	; 0x8aa <__fp_szero>

000008dc <__mulsf3x>:
 8dc:	0e 94 32 04 	call	0x864	; 0x864 <__fp_split3>
 8e0:	70 f3       	brcs	.-36     	; 0x8be <__mulsf3+0x8>

000008e2 <__mulsf3_pse>:
 8e2:	95 9f       	mul	r25, r21
 8e4:	c1 f3       	breq	.-16     	; 0x8d6 <__mulsf3+0x20>
 8e6:	95 0f       	add	r25, r21
 8e8:	50 e0       	ldi	r21, 0x00	; 0
 8ea:	55 1f       	adc	r21, r21
 8ec:	62 9f       	mul	r22, r18
 8ee:	f0 01       	movw	r30, r0
 8f0:	72 9f       	mul	r23, r18
 8f2:	bb 27       	eor	r27, r27
 8f4:	f0 0d       	add	r31, r0
 8f6:	b1 1d       	adc	r27, r1
 8f8:	63 9f       	mul	r22, r19
 8fa:	aa 27       	eor	r26, r26
 8fc:	f0 0d       	add	r31, r0
 8fe:	b1 1d       	adc	r27, r1
 900:	aa 1f       	adc	r26, r26
 902:	64 9f       	mul	r22, r20
 904:	66 27       	eor	r22, r22
 906:	b0 0d       	add	r27, r0
 908:	a1 1d       	adc	r26, r1
 90a:	66 1f       	adc	r22, r22
 90c:	82 9f       	mul	r24, r18
 90e:	22 27       	eor	r18, r18
 910:	b0 0d       	add	r27, r0
 912:	a1 1d       	adc	r26, r1
 914:	62 1f       	adc	r22, r18
 916:	73 9f       	mul	r23, r19
 918:	b0 0d       	add	r27, r0
 91a:	a1 1d       	adc	r26, r1
 91c:	62 1f       	adc	r22, r18
 91e:	83 9f       	mul	r24, r19
 920:	a0 0d       	add	r26, r0
 922:	61 1d       	adc	r22, r1
 924:	22 1f       	adc	r18, r18
 926:	74 9f       	mul	r23, r20
 928:	33 27       	eor	r19, r19
 92a:	a0 0d       	add	r26, r0
 92c:	61 1d       	adc	r22, r1
 92e:	23 1f       	adc	r18, r19
 930:	84 9f       	mul	r24, r20
 932:	60 0d       	add	r22, r0
 934:	21 1d       	adc	r18, r1
 936:	82 2f       	mov	r24, r18
 938:	76 2f       	mov	r23, r22
 93a:	6a 2f       	mov	r22, r26
 93c:	11 24       	eor	r1, r1
 93e:	9f 57       	subi	r25, 0x7F	; 127
 940:	50 40       	sbci	r21, 0x00	; 0
 942:	9a f0       	brmi	.+38     	; 0x96a <__stack+0x6b>
 944:	f1 f0       	breq	.+60     	; 0x982 <__stack+0x83>
 946:	88 23       	and	r24, r24
 948:	4a f0       	brmi	.+18     	; 0x95c <__stack+0x5d>
 94a:	ee 0f       	add	r30, r30
 94c:	ff 1f       	adc	r31, r31
 94e:	bb 1f       	adc	r27, r27
 950:	66 1f       	adc	r22, r22
 952:	77 1f       	adc	r23, r23
 954:	88 1f       	adc	r24, r24
 956:	91 50       	subi	r25, 0x01	; 1
 958:	50 40       	sbci	r21, 0x00	; 0
 95a:	a9 f7       	brne	.-22     	; 0x946 <__stack+0x47>
 95c:	9e 3f       	cpi	r25, 0xFE	; 254
 95e:	51 05       	cpc	r21, r1
 960:	80 f0       	brcs	.+32     	; 0x982 <__stack+0x83>
 962:	0c 94 0a 04 	jmp	0x814	; 0x814 <__fp_inf>
 966:	0c 94 55 04 	jmp	0x8aa	; 0x8aa <__fp_szero>
 96a:	5f 3f       	cpi	r21, 0xFF	; 255
 96c:	e4 f3       	brlt	.-8      	; 0x966 <__stack+0x67>
 96e:	98 3e       	cpi	r25, 0xE8	; 232
 970:	d4 f3       	brlt	.-12     	; 0x966 <__stack+0x67>
 972:	86 95       	lsr	r24
 974:	77 95       	ror	r23
 976:	67 95       	ror	r22
 978:	b7 95       	ror	r27
 97a:	f7 95       	ror	r31
 97c:	e7 95       	ror	r30
 97e:	9f 5f       	subi	r25, 0xFF	; 255
 980:	c1 f7       	brne	.-16     	; 0x972 <__stack+0x73>
 982:	fe 2b       	or	r31, r30
 984:	88 0f       	add	r24, r24
 986:	91 1d       	adc	r25, r1
 988:	96 95       	lsr	r25
 98a:	87 95       	ror	r24
 98c:	97 f9       	bld	r25, 7
 98e:	08 95       	ret

00000990 <__udivmodhi4>:
 990:	aa 1b       	sub	r26, r26
 992:	bb 1b       	sub	r27, r27
 994:	51 e1       	ldi	r21, 0x11	; 17
 996:	07 c0       	rjmp	.+14     	; 0x9a6 <__udivmodhi4_ep>

00000998 <__udivmodhi4_loop>:
 998:	aa 1f       	adc	r26, r26
 99a:	bb 1f       	adc	r27, r27
 99c:	a6 17       	cp	r26, r22
 99e:	b7 07       	cpc	r27, r23
 9a0:	10 f0       	brcs	.+4      	; 0x9a6 <__udivmodhi4_ep>
 9a2:	a6 1b       	sub	r26, r22
 9a4:	b7 0b       	sbc	r27, r23

000009a6 <__udivmodhi4_ep>:
 9a6:	88 1f       	adc	r24, r24
 9a8:	99 1f       	adc	r25, r25
 9aa:	5a 95       	dec	r21
 9ac:	a9 f7       	brne	.-22     	; 0x998 <__udivmodhi4_loop>
 9ae:	80 95       	com	r24
 9b0:	90 95       	com	r25
 9b2:	bc 01       	movw	r22, r24
 9b4:	cd 01       	movw	r24, r26
 9b6:	08 95       	ret

000009b8 <atoi>:
 9b8:	fc 01       	movw	r30, r24
 9ba:	88 27       	eor	r24, r24
 9bc:	99 27       	eor	r25, r25
 9be:	e8 94       	clt
 9c0:	21 91       	ld	r18, Z+
 9c2:	20 32       	cpi	r18, 0x20	; 32
 9c4:	e9 f3       	breq	.-6      	; 0x9c0 <atoi+0x8>
 9c6:	29 30       	cpi	r18, 0x09	; 9
 9c8:	10 f0       	brcs	.+4      	; 0x9ce <atoi+0x16>
 9ca:	2e 30       	cpi	r18, 0x0E	; 14
 9cc:	c8 f3       	brcs	.-14     	; 0x9c0 <atoi+0x8>
 9ce:	2b 32       	cpi	r18, 0x2B	; 43
 9d0:	41 f0       	breq	.+16     	; 0x9e2 <atoi+0x2a>
 9d2:	2d 32       	cpi	r18, 0x2D	; 45
 9d4:	39 f4       	brne	.+14     	; 0x9e4 <atoi+0x2c>
 9d6:	68 94       	set
 9d8:	04 c0       	rjmp	.+8      	; 0x9e2 <atoi+0x2a>
 9da:	0e 94 fa 04 	call	0x9f4	; 0x9f4 <__mulhi_const_10>
 9de:	82 0f       	add	r24, r18
 9e0:	91 1d       	adc	r25, r1
 9e2:	21 91       	ld	r18, Z+
 9e4:	20 53       	subi	r18, 0x30	; 48
 9e6:	2a 30       	cpi	r18, 0x0A	; 10
 9e8:	c0 f3       	brcs	.-16     	; 0x9da <atoi+0x22>
 9ea:	1e f4       	brtc	.+6      	; 0x9f2 <atoi+0x3a>
 9ec:	90 95       	com	r25
 9ee:	81 95       	neg	r24
 9f0:	9f 4f       	sbci	r25, 0xFF	; 255
 9f2:	08 95       	ret

000009f4 <__mulhi_const_10>:
 9f4:	7a e0       	ldi	r23, 0x0A	; 10
 9f6:	97 9f       	mul	r25, r23
 9f8:	90 2d       	mov	r25, r0
 9fa:	87 9f       	mul	r24, r23
 9fc:	80 2d       	mov	r24, r0
 9fe:	91 0d       	add	r25, r1
 a00:	11 24       	eor	r1, r1
 a02:	08 95       	ret

00000a04 <__utoa_ncheck>:
 a04:	bb 27       	eor	r27, r27

00000a06 <__utoa_common>:
 a06:	fb 01       	movw	r30, r22
 a08:	55 27       	eor	r21, r21
 a0a:	aa 27       	eor	r26, r26
 a0c:	88 0f       	add	r24, r24
 a0e:	99 1f       	adc	r25, r25
 a10:	aa 1f       	adc	r26, r26
 a12:	a4 17       	cp	r26, r20
 a14:	10 f0       	brcs	.+4      	; 0xa1a <__utoa_common+0x14>
 a16:	a4 1b       	sub	r26, r20
 a18:	83 95       	inc	r24
 a1a:	50 51       	subi	r21, 0x10	; 16
 a1c:	b9 f7       	brne	.-18     	; 0xa0c <__utoa_common+0x6>
 a1e:	a0 5d       	subi	r26, 0xD0	; 208
 a20:	aa 33       	cpi	r26, 0x3A	; 58
 a22:	08 f0       	brcs	.+2      	; 0xa26 <__utoa_common+0x20>
 a24:	a9 5d       	subi	r26, 0xD9	; 217
 a26:	a1 93       	st	Z+, r26
 a28:	00 97       	sbiw	r24, 0x00	; 0
 a2a:	79 f7       	brne	.-34     	; 0xa0a <__utoa_common+0x4>
 a2c:	b1 11       	cpse	r27, r1
 a2e:	b1 93       	st	Z+, r27
 a30:	11 92       	st	Z+, r1
 a32:	cb 01       	movw	r24, r22
 a34:	0c 94 1c 05 	jmp	0xa38	; 0xa38 <strrev>

00000a38 <strrev>:
 a38:	dc 01       	movw	r26, r24
 a3a:	fc 01       	movw	r30, r24
 a3c:	67 2f       	mov	r22, r23
 a3e:	71 91       	ld	r23, Z+
 a40:	77 23       	and	r23, r23
 a42:	e1 f7       	brne	.-8      	; 0xa3c <strrev+0x4>
 a44:	32 97       	sbiw	r30, 0x02	; 2
 a46:	04 c0       	rjmp	.+8      	; 0xa50 <strrev+0x18>
 a48:	7c 91       	ld	r23, X
 a4a:	6d 93       	st	X+, r22
 a4c:	70 83       	st	Z, r23
 a4e:	62 91       	ld	r22, -Z
 a50:	ae 17       	cp	r26, r30
 a52:	bf 07       	cpc	r27, r31
 a54:	c8 f3       	brcs	.-14     	; 0xa48 <strrev+0x10>
 a56:	08 95       	ret

00000a58 <_exit>:
 a58:	f8 94       	cli

00000a5a <__stop_program>:
 a5a:	ff cf       	rjmp	.-2      	; 0xa5a <__stop_program>
