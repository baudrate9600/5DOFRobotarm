
RobotArm.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000005e  00800100  00000fd8  0000106c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000fd8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000001a  0080015e  0080015e  000010ca  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000010ca  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000010fc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000140  00000000  00000000  0000113c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001bb5  00000000  00000000  0000127c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000d80  00000000  00000000  00002e31  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000a6f  00000000  00000000  00003bb1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000003ac  00000000  00000000  00004620  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000a5a  00000000  00000000  000049cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000c63  00000000  00000000  00005426  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000118  00000000  00000000  00006089  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 88 04 	jmp	0x910	; 0x910 <__vector_11>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 5d 00 	jmp	0xba	; 0xba <__vector_18>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__vector_20>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e8 ed       	ldi	r30, 0xD8	; 216
  7c:	ff e0       	ldi	r31, 0x0F	; 15
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ae 35       	cpi	r26, 0x5E	; 94
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	ae e5       	ldi	r26, 0x5E	; 94
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a8 37       	cpi	r26, 0x78	; 120
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 db 00 	call	0x1b6	; 0x1b6 <main>
  9e:	0c 94 ea 07 	jmp	0xfd4	; 0xfd4 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <__vector_20>:
			motor->integral = temp; 
		}
		motor->proportional = motor->P*error;
		
		return motor->P*error +motor->I*motor->integral;
}
  a6:	1f 92       	push	r1
  a8:	0f 92       	push	r0
  aa:	0f b6       	in	r0, 0x3f	; 63
  ac:	0f 92       	push	r0
  ae:	11 24       	eor	r1, r1
  b0:	0f 90       	pop	r0
  b2:	0f be       	out	0x3f, r0	; 63
  b4:	0f 90       	pop	r0
  b6:	1f 90       	pop	r1
  b8:	18 95       	reti

000000ba <__vector_18>:
  ba:	1f 92       	push	r1
  bc:	0f 92       	push	r0
  be:	0f b6       	in	r0, 0x3f	; 63
  c0:	0f 92       	push	r0
  c2:	11 24       	eor	r1, r1
  c4:	2f 93       	push	r18
  c6:	3f 93       	push	r19
  c8:	8f 93       	push	r24
  ca:	9f 93       	push	r25
  cc:	ef 93       	push	r30
  ce:	ff 93       	push	r31
  d0:	10 92 72 01 	sts	0x0172, r1	; 0x800172 <motor_status+0x12>
  d4:	10 92 71 01 	sts	0x0171, r1	; 0x800171 <motor_status+0x11>
  d8:	90 91 c6 00 	lds	r25, 0x00C6	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
  dc:	80 91 73 01 	lds	r24, 0x0173	; 0x800173 <parse_state>
  e0:	81 30       	cpi	r24, 0x01	; 1
  e2:	61 f0       	breq	.+24     	; 0xfc <__vector_18+0x42>
  e4:	28 f0       	brcs	.+10     	; 0xf0 <__vector_18+0x36>
  e6:	82 30       	cpi	r24, 0x02	; 2
  e8:	a9 f0       	breq	.+42     	; 0x114 <__vector_18+0x5a>
  ea:	83 30       	cpi	r24, 0x03	; 3
  ec:	89 f1       	breq	.+98     	; 0x150 <__vector_18+0x96>
  ee:	32 c0       	rjmp	.+100    	; 0x154 <__vector_18+0x9a>
  f0:	9d 34       	cpi	r25, 0x4D	; 77
  f2:	81 f5       	brne	.+96     	; 0x154 <__vector_18+0x9a>
  f4:	81 e0       	ldi	r24, 0x01	; 1
  f6:	80 93 73 01 	sts	0x0173, r24	; 0x800173 <parse_state>
  fa:	2c c0       	rjmp	.+88     	; 0x154 <__vector_18+0x9a>
  fc:	80 ed       	ldi	r24, 0xD0	; 208
  fe:	89 0f       	add	r24, r25
 100:	80 93 60 01 	sts	0x0160, r24	; 0x800160 <motor_status>
 104:	82 e0       	ldi	r24, 0x02	; 2
 106:	80 93 73 01 	sts	0x0173, r24	; 0x800173 <parse_state>
 10a:	10 92 5f 01 	sts	0x015F, r1	; 0x80015f <__data_end+0x1>
 10e:	10 92 5e 01 	sts	0x015E, r1	; 0x80015e <__data_end>
 112:	20 c0       	rjmp	.+64     	; 0x154 <__vector_18+0x9a>
 114:	20 91 5e 01 	lds	r18, 0x015E	; 0x80015e <__data_end>
 118:	30 91 5f 01 	lds	r19, 0x015F	; 0x80015f <__data_end+0x1>
 11c:	f9 01       	movw	r30, r18
 11e:	ee 0f       	add	r30, r30
 120:	ff 1f       	adc	r31, r31
 122:	e0 5a       	subi	r30, 0xA0	; 160
 124:	fe 4f       	sbci	r31, 0xFE	; 254
 126:	89 2f       	mov	r24, r25
 128:	90 e0       	ldi	r25, 0x00	; 0
 12a:	92 83       	std	Z+2, r25	; 0x02
 12c:	81 83       	std	Z+1, r24	; 0x01
 12e:	c9 01       	movw	r24, r18
 130:	01 96       	adiw	r24, 0x01	; 1
 132:	90 93 5f 01 	sts	0x015F, r25	; 0x80015f <__data_end+0x1>
 136:	80 93 5e 01 	sts	0x015E, r24	; 0x80015e <__data_end>
 13a:	08 97       	sbiw	r24, 0x08	; 8
 13c:	59 f4       	brne	.+22     	; 0x154 <__vector_18+0x9a>
 13e:	10 92 73 01 	sts	0x0173, r1	; 0x800173 <parse_state>
 142:	81 e0       	ldi	r24, 0x01	; 1
 144:	90 e0       	ldi	r25, 0x00	; 0
 146:	90 93 72 01 	sts	0x0172, r25	; 0x800172 <motor_status+0x12>
 14a:	80 93 71 01 	sts	0x0171, r24	; 0x800171 <motor_status+0x11>
 14e:	02 c0       	rjmp	.+4      	; 0x154 <__vector_18+0x9a>
 150:	10 92 73 01 	sts	0x0173, r1	; 0x800173 <parse_state>
 154:	ff 91       	pop	r31
 156:	ef 91       	pop	r30
 158:	9f 91       	pop	r25
 15a:	8f 91       	pop	r24
 15c:	3f 91       	pop	r19
 15e:	2f 91       	pop	r18
 160:	0f 90       	pop	r0
 162:	0f be       	out	0x3f, r0	; 63
 164:	0f 90       	pop	r0
 166:	1f 90       	pop	r1
 168:	18 95       	reti

0000016a <_Z12servo_rotatefPVhhh>:
/*Servo Control */
void servo_rotate(float val,volatile uint8_t * pwm, uint8_t dir_a,uint8_t dir_b){
 16a:	ef 92       	push	r14
 16c:	ff 92       	push	r15
 16e:	0f 93       	push	r16
 170:	cf 93       	push	r28
 172:	7a 01       	movw	r14, r20
 174:	c2 2f       	mov	r28, r18
	int speed = (float)val;
 176:	0e 94 01 06 	call	0xc02	; 0xc02 <__fixsfsi>
 17a:	ab 01       	movw	r20, r22
	if (speed > 0){
 17c:	16 16       	cp	r1, r22
 17e:	17 06       	cpc	r1, r23
 180:	44 f4       	brge	.+16     	; 0x192 <_Z12servo_rotatefPVhhh+0x28>
		SERVO_REGISTER |= dir_a  ;
 182:	2b b1       	in	r18, 0x0b	; 11
 184:	c2 2b       	or	r28, r18
 186:	cb b9       	out	0x0b, r28	; 11
		SERVO_REGISTER &= ~dir_b;
 188:	2b b1       	in	r18, 0x0b	; 11
 18a:	00 95       	com	r16
 18c:	02 23       	and	r16, r18
 18e:	0b b9       	out	0x0b, r16	; 11
 190:	0b c0       	rjmp	.+22     	; 0x1a8 <_Z12servo_rotatefPVhhh+0x3e>
		}else{
		SERVO_REGISTER &= ~dir_a;
 192:	2b b1       	in	r18, 0x0b	; 11
 194:	c0 95       	com	r28
 196:	c2 23       	and	r28, r18
 198:	cb b9       	out	0x0b, r28	; 11
		SERVO_REGISTER |= dir_b;
 19a:	2b b1       	in	r18, 0x0b	; 11
 19c:	02 2b       	or	r16, r18
 19e:	0b b9       	out	0x0b, r16	; 11
		speed *= -1;
 1a0:	44 27       	eor	r20, r20
 1a2:	55 27       	eor	r21, r21
 1a4:	46 1b       	sub	r20, r22
 1a6:	57 0b       	sbc	r21, r23
	}
	*pwm = speed;
 1a8:	f7 01       	movw	r30, r14
 1aa:	40 83       	st	Z, r20
}
 1ac:	cf 91       	pop	r28
 1ae:	0f 91       	pop	r16
 1b0:	ff 90       	pop	r15
 1b2:	ef 90       	pop	r14
 1b4:	08 95       	ret

000001b6 <main>:

/*some comment*/
int main(void)
{
 1b6:	cf 93       	push	r28
 1b8:	df 93       	push	r29
 1ba:	cd b7       	in	r28, 0x3d	; 61
 1bc:	de b7       	in	r29, 0x3e	; 62
 1be:	c4 54       	subi	r28, 0x44	; 68
 1c0:	d1 09       	sbc	r29, r1
 1c2:	0f b6       	in	r0, 0x3f	; 63
 1c4:	f8 94       	cli
 1c6:	de bf       	out	0x3e, r29	; 62
 1c8:	0f be       	out	0x3f, r0	; 63
 1ca:	cd bf       	out	0x3d, r28	; 61

	
	/* initialize component */ 
	sei();
 1cc:	78 94       	sei
	timer_enable();	
 1ce:	0e 94 5c 04 	call	0x8b8	; 0x8b8 <_Z12timer_enablev>
	usart_enable(9600);
 1d2:	80 e8       	ldi	r24, 0x80	; 128
 1d4:	95 e2       	ldi	r25, 0x25	; 37
 1d6:	0e 94 ad 04 	call	0x95a	; 0x95a <_Z12usart_enablej>
	
    /* Replace with your application code */
	uint8_t tacho_values;
	uint8_t tacho_state = 0;
	int16_t tacho = 0;
	DDRD &= ~TACHO_0_M;
 1da:	55 98       	cbi	0x0a, 5	; 10
	DDRD &= ~TACHO_0_P; 
 1dc:	52 98       	cbi	0x0a, 2	; 10

	/* Initialize servo motors */
	DDRD |= SERVO_0_EN | SERVO_0_DIR_A | SERVO_0_DIR_B;
 1de:	8a b1       	in	r24, 0x0a	; 10
 1e0:	88 6c       	ori	r24, 0xC8	; 200
 1e2:	8a b9       	out	0x0a, r24	; 10
	TCCR2A |= (1 << COM2B1 ) | (1 << WGM21) | (1 << WGM20); /*Fast PWM */
 1e4:	e0 eb       	ldi	r30, 0xB0	; 176
 1e6:	f0 e0       	ldi	r31, 0x00	; 0
 1e8:	80 81       	ld	r24, Z
 1ea:	83 62       	ori	r24, 0x23	; 35
 1ec:	80 83       	st	Z, r24
	TCCR2B |= (1 << CS20); /*No prescaling */
 1ee:	e1 eb       	ldi	r30, 0xB1	; 177
 1f0:	f0 e0       	ldi	r31, 0x00	; 0
 1f2:	80 81       	ld	r24, Z
 1f4:	81 60       	ori	r24, 0x01	; 1
 1f6:	80 83       	st	Z, r24
	int output = 0; 	
	
	uint32_t curtime = 0; 	
	uint32_t pid_timer = 0; 
	
	DDRB |= M0_DIR | M0_STEP | M1_STEP | M1_DIR;
 1f8:	84 b1       	in	r24, 0x04	; 4
 1fa:	8f 60       	ori	r24, 0x0F	; 15
 1fc:	84 b9       	out	0x04, r24	; 4
	StepperMotor stepper0(0,0.043182,M0_DIR,M0_STEP);
 1fe:	ee 24       	eor	r14, r14
 200:	e3 94       	inc	r14
 202:	02 e0       	ldi	r16, 0x02	; 2
 204:	2c e9       	ldi	r18, 0x9C	; 156
 206:	3f ed       	ldi	r19, 0xDF	; 223
 208:	40 e3       	ldi	r20, 0x30	; 48
 20a:	5d e3       	ldi	r21, 0x3D	; 61
 20c:	60 e0       	ldi	r22, 0x00	; 0
 20e:	70 e0       	ldi	r23, 0x00	; 0
 210:	ce 01       	movw	r24, r28
 212:	01 96       	adiw	r24, 0x01	; 1
 214:	0e 94 cd 01 	call	0x39a	; 0x39a <_ZN12StepperMotorC1Eifhh>
	StepperMotor stepper1(0,0.2571426, M1_DIR,M1_STEP); 
 218:	68 94       	set
 21a:	ee 24       	eor	r14, r14
 21c:	e2 f8       	bld	r14, 2
 21e:	08 e0       	ldi	r16, 0x08	; 8
 220:	22 e3       	ldi	r18, 0x32	; 50
 222:	38 ea       	ldi	r19, 0xA8	; 168
 224:	43 e8       	ldi	r20, 0x83	; 131
 226:	5e e3       	ldi	r21, 0x3E	; 62
 228:	60 e0       	ldi	r22, 0x00	; 0
 22a:	70 e0       	ldi	r23, 0x00	; 0
 22c:	ce 01       	movw	r24, r28
 22e:	83 96       	adiw	r24, 0x23	; 35
 230:	0e 94 cd 01 	call	0x39a	; 0x39a <_ZN12StepperMotorC1Eifhh>
	usart_sendln("Hello world!");
 234:	80 e0       	ldi	r24, 0x00	; 0
 236:	91 e0       	ldi	r25, 0x01	; 1
 238:	0e 94 1d 05 	call	0xa3a	; 0xa3a <_Z12usart_sendlnPc>
	/* Initialize motors */ 
//	Stepper_motor motor0(M0_STEP,M0_DIR,0.23,&DDRD);
	
    /* Replace with your application code */
	uint8_t tacho_values;
	uint8_t tacho_state = 0;
 23c:	10 e0       	ldi	r17, 0x00	; 0
    while (1) 
    {
		
		/*character FSM */ 
		char buff[50]; 
		if(motor_status.done == 1){
 23e:	0f 2e       	mov	r0, r31
 240:	f0 e6       	ldi	r31, 0x60	; 96
 242:	ef 2e       	mov	r14, r31
 244:	f1 e0       	ldi	r31, 0x01	; 1
 246:	ff 2e       	mov	r15, r31
 248:	f0 2d       	mov	r31, r0
	//		sprintf(buff,"Motor %d, angle =  %d\n",motor_status.motor_select,motor_status.angle);
	//		usart_send(buff);
			motor_status.done = 0; 
			uint16_t duration = (motor_status.data[0]-48)*10 + (motor_status.data[1]-48);
			uint16_t acceleration = (motor_status.data[2]-48)*10 + (motor_status.data[3]-48);
			int16_t angle = (motor_status.data[5]-48)*100 + (motor_status.data[6]-48)*10 + (motor_status.data[7]-48);
 24a:	0f 2e       	mov	r0, r31
 24c:	f4 e6       	ldi	r31, 0x64	; 100
 24e:	5f 2e       	mov	r5, r31
 250:	f0 2d       	mov	r31, r0
					break;
				case 1 :
					stepper0.target_pos = angle; 
					stepper0.duration = duration;
					stepper0.acceleration = acceleration;
					stepper0.start = 1; 
 252:	77 24       	eor	r7, r7
 254:	73 94       	inc	r7
				}
				tacho_state = 1; 
			}
		}else{
			if (!(PIND & TACHO_0_P)){
				tacho_state = 0; 
 256:	61 2c       	mov	r6, r1
    while (1) 
    {
		
		/*character FSM */ 
		char buff[50]; 
		if(motor_status.done == 1){
 258:	f7 01       	movw	r30, r14
 25a:	81 89       	ldd	r24, Z+17	; 0x11
 25c:	92 89       	ldd	r25, Z+18	; 0x12
 25e:	01 97       	sbiw	r24, 0x01	; 1
 260:	09 f0       	breq	.+2      	; 0x264 <main+0xae>
 262:	76 c0       	rjmp	.+236    	; 0x350 <main+0x19a>
	//		sprintf(buff,"Motor %d, angle =  %d\n",motor_status.motor_select,motor_status.angle);
	//		usart_send(buff);
			motor_status.done = 0; 
 264:	12 8a       	std	Z+18, r1	; 0x12
 266:	11 8a       	std	Z+17, r1	; 0x11
			uint16_t duration = (motor_status.data[0]-48)*10 + (motor_status.data[1]-48);
 268:	81 81       	ldd	r24, Z+1	; 0x01
 26a:	92 81       	ldd	r25, Z+2	; 0x02
 26c:	c0 97       	sbiw	r24, 0x30	; 48
 26e:	4c 01       	movw	r8, r24
 270:	88 0c       	add	r8, r8
 272:	99 1c       	adc	r9, r9
 274:	88 0f       	add	r24, r24
 276:	99 1f       	adc	r25, r25
 278:	88 0f       	add	r24, r24
 27a:	99 1f       	adc	r25, r25
 27c:	88 0f       	add	r24, r24
 27e:	99 1f       	adc	r25, r25
 280:	88 0d       	add	r24, r8
 282:	99 1d       	adc	r25, r9
 284:	83 80       	ldd	r8, Z+3	; 0x03
 286:	94 80       	ldd	r9, Z+4	; 0x04
 288:	f0 e3       	ldi	r31, 0x30	; 48
 28a:	8f 1a       	sub	r8, r31
 28c:	91 08       	sbc	r9, r1
 28e:	88 0e       	add	r8, r24
 290:	99 1e       	adc	r9, r25
			uint16_t acceleration = (motor_status.data[2]-48)*10 + (motor_status.data[3]-48);
 292:	f7 01       	movw	r30, r14
 294:	85 81       	ldd	r24, Z+5	; 0x05
 296:	96 81       	ldd	r25, Z+6	; 0x06
 298:	c0 97       	sbiw	r24, 0x30	; 48
 29a:	5c 01       	movw	r10, r24
 29c:	aa 0c       	add	r10, r10
 29e:	bb 1c       	adc	r11, r11
 2a0:	88 0f       	add	r24, r24
 2a2:	99 1f       	adc	r25, r25
 2a4:	88 0f       	add	r24, r24
 2a6:	99 1f       	adc	r25, r25
 2a8:	88 0f       	add	r24, r24
 2aa:	99 1f       	adc	r25, r25
 2ac:	8a 0d       	add	r24, r10
 2ae:	9b 1d       	adc	r25, r11
 2b0:	a7 80       	ldd	r10, Z+7	; 0x07
 2b2:	b0 84       	ldd	r11, Z+8	; 0x08
 2b4:	f0 e3       	ldi	r31, 0x30	; 48
 2b6:	af 1a       	sub	r10, r31
 2b8:	b1 08       	sbc	r11, r1
 2ba:	a8 0e       	add	r10, r24
 2bc:	b9 1e       	adc	r11, r25
			int16_t angle = (motor_status.data[5]-48)*100 + (motor_status.data[6]-48)*10 + (motor_status.data[7]-48);
 2be:	f7 01       	movw	r30, r14
 2c0:	83 85       	ldd	r24, Z+11	; 0x0b
 2c2:	94 85       	ldd	r25, Z+12	; 0x0c
 2c4:	c0 97       	sbiw	r24, 0x30	; 48
 2c6:	58 9e       	mul	r5, r24
 2c8:	60 01       	movw	r12, r0
 2ca:	59 9e       	mul	r5, r25
 2cc:	d0 0c       	add	r13, r0
 2ce:	11 24       	eor	r1, r1
 2d0:	85 85       	ldd	r24, Z+13	; 0x0d
 2d2:	96 85       	ldd	r25, Z+14	; 0x0e
 2d4:	c0 97       	sbiw	r24, 0x30	; 48
 2d6:	ac 01       	movw	r20, r24
 2d8:	44 0f       	add	r20, r20
 2da:	55 1f       	adc	r21, r21
 2dc:	9c 01       	movw	r18, r24
 2de:	22 0f       	add	r18, r18
 2e0:	33 1f       	adc	r19, r19
 2e2:	22 0f       	add	r18, r18
 2e4:	33 1f       	adc	r19, r19
 2e6:	22 0f       	add	r18, r18
 2e8:	33 1f       	adc	r19, r19
 2ea:	ca 01       	movw	r24, r20
 2ec:	82 0f       	add	r24, r18
 2ee:	93 1f       	adc	r25, r19
 2f0:	8c 0d       	add	r24, r12
 2f2:	9d 1d       	adc	r25, r13
 2f4:	c7 84       	ldd	r12, Z+15	; 0x0f
 2f6:	d0 88       	ldd	r13, Z+16	; 0x10
 2f8:	f0 e3       	ldi	r31, 0x30	; 48
 2fa:	cf 1a       	sub	r12, r31
 2fc:	d1 08       	sbc	r13, r1
 2fe:	c8 0e       	add	r12, r24
 300:	d9 1e       	adc	r13, r25

			usart_sendln((int)duration);
 302:	c4 01       	movw	r24, r8
 304:	0e 94 18 05 	call	0xa30	; 0xa30 <_Z12usart_sendlni>
			usart_sendln((int)acceleration);
 308:	c5 01       	movw	r24, r10
 30a:	0e 94 18 05 	call	0xa30	; 0xa30 <_Z12usart_sendlni>
			usart_sendln(angle);
 30e:	c6 01       	movw	r24, r12
 310:	0e 94 18 05 	call	0xa30	; 0xa30 <_Z12usart_sendlni>
			if(motor_status.data[4] == '-'){
 314:	f7 01       	movw	r30, r14
 316:	81 85       	ldd	r24, Z+9	; 0x09
 318:	92 85       	ldd	r25, Z+10	; 0x0a
 31a:	8d 97       	sbiw	r24, 0x2d	; 45
 31c:	19 f4       	brne	.+6      	; 0x324 <main+0x16e>
				angle = angle * -1;
 31e:	d1 94       	neg	r13
 320:	c1 94       	neg	r12
 322:	d1 08       	sbc	r13, r1
			}
			switch(motor_status.motor_select){
 324:	f7 01       	movw	r30, r14
 326:	80 81       	ld	r24, Z
 328:	81 30       	cpi	r24, 0x01	; 1
 32a:	19 f0       	breq	.+6      	; 0x332 <main+0x17c>
 32c:	82 30       	cpi	r24, 0x02	; 2
 32e:	49 f0       	breq	.+18     	; 0x342 <main+0x18c>
 330:	0f c0       	rjmp	.+30     	; 0x350 <main+0x19a>
				case 0 : 
					servo0.target_pos = angle; 
					break;
				case 1 :
					stepper0.target_pos = angle; 
 332:	dd 82       	std	Y+5, r13	; 0x05
 334:	cc 82       	std	Y+4, r12	; 0x04
					stepper0.duration = duration;
 336:	9f 86       	std	Y+15, r9	; 0x0f
 338:	8e 86       	std	Y+14, r8	; 0x0e
					stepper0.acceleration = acceleration;
 33a:	bd 86       	std	Y+13, r11	; 0x0d
 33c:	ac 86       	std	Y+12, r10	; 0x0c
					stepper0.start = 1; 
 33e:	79 82       	std	Y+1, r7	; 0x01
					break; 
 340:	07 c0       	rjmp	.+14     	; 0x350 <main+0x19a>
				case 2 : 
					stepper1.target_pos = angle; 
 342:	df a2       	std	Y+39, r13	; 0x27
 344:	ce a2       	std	Y+38, r12	; 0x26
					stepper1.duration = duration;
 346:	99 aa       	std	Y+49, r9	; 0x31
 348:	88 aa       	std	Y+48, r8	; 0x30
					stepper1.acceleration = acceleration;
 34a:	bf a6       	std	Y+47, r11	; 0x2f
 34c:	ae a6       	std	Y+46, r10	; 0x2e
					stepper1.start = 1;
 34e:	7b a2       	std	Y+35, r7	; 0x23
			output = 255; 
		}else if(output < -255){
			output = -255;
		}
		//usart_sendln(temp);	
		servo_rotate(output,&SERVO_0_PWM,SERVO_0_DIR_A,SERVO_0_DIR_B);
 350:	00 e8       	ldi	r16, 0x80	; 128
 352:	20 e4       	ldi	r18, 0x40	; 64
 354:	44 eb       	ldi	r20, 0xB4	; 180
 356:	50 e0       	ldi	r21, 0x00	; 0
 358:	60 e0       	ldi	r22, 0x00	; 0
 35a:	70 e0       	ldi	r23, 0x00	; 0
 35c:	cb 01       	movw	r24, r22
 35e:	0e 94 b5 00 	call	0x16a	; 0x16a <_Z12servo_rotatefPVhhh>
	
		stepper0.rotate(timer_10k());
 362:	0e 94 7f 04 	call	0x8fe	; 0x8fe <_Z9timer_10kv>
 366:	ab 01       	movw	r20, r22
 368:	bc 01       	movw	r22, r24
 36a:	ce 01       	movw	r24, r28
 36c:	01 96       	adiw	r24, 0x01	; 1
 36e:	0e 94 c1 02 	call	0x582	; 0x582 <_ZN12StepperMotor6rotateEm>
		stepper1.rotate(timer_10k());
 372:	0e 94 7f 04 	call	0x8fe	; 0x8fe <_Z9timer_10kv>
 376:	ab 01       	movw	r20, r22
 378:	bc 01       	movw	r22, r24
 37a:	ce 01       	movw	r24, r28
 37c:	83 96       	adiw	r24, 0x23	; 35
 37e:	0e 94 c1 02 	call	0x582	; 0x582 <_ZN12StepperMotor6rotateEm>
		tacho_values= PIND;
 382:	89 b1       	in	r24, 0x09	; 9
		if (tacho_state == 0){
 384:	11 11       	cpse	r17, r1
 386:	05 c0       	rjmp	.+10     	; 0x392 <main+0x1dc>
			if (PIND & TACHO_0_P){
 388:	4a 9b       	sbis	0x09, 2	; 9
 38a:	66 cf       	rjmp	.-308    	; 0x258 <main+0xa2>
				if(PIND & TACHO_0_M){
 38c:	89 b1       	in	r24, 0x09	; 9
					servo0.current_pos++;
				}else{
					servo0.current_pos--;
				}
				tacho_state = 1; 
 38e:	17 2d       	mov	r17, r7
 390:	63 cf       	rjmp	.-314    	; 0x258 <main+0xa2>
			}
		}else{
			if (!(PIND & TACHO_0_P)){
 392:	4a 99       	sbic	0x09, 2	; 9
 394:	61 cf       	rjmp	.-318    	; 0x258 <main+0xa2>
				tacho_state = 0; 
 396:	16 2d       	mov	r17, r6
 398:	5f cf       	rjmp	.-322    	; 0x258 <main+0xa2>

0000039a <_ZN12StepperMotorC1Eifhh>:
#include <math.h>
#include "Usart.h"
#include "StepperMotor.h"

/* Iniatialize the stepper motor */
StepperMotor::StepperMotor(int16_t current_pos, float step_to_angle, uint8_t dir_pin, uint8_t step_pin)
 39a:	ef 92       	push	r14
 39c:	0f 93       	push	r16
 39e:	cf 93       	push	r28
 3a0:	df 93       	push	r29
 3a2:	ec 01       	movw	r28, r24
{
	state = S_WAIT; 
 3a4:	19 a2       	std	Y+33, r1	; 0x21
	this->current_pos	= current_pos;
 3a6:	7a 83       	std	Y+2, r23	; 0x02
 3a8:	69 83       	std	Y+1, r22	; 0x01
	/*this value should ideally be an integer */
	this->step_to_angle	= 1.0f/step_to_angle; 
 3aa:	60 e0       	ldi	r22, 0x00	; 0
 3ac:	70 e0       	ldi	r23, 0x00	; 0
 3ae:	80 e8       	ldi	r24, 0x80	; 128
 3b0:	9f e3       	ldi	r25, 0x3F	; 63
 3b2:	0e 94 8f 05 	call	0xb1e	; 0xb1e <__divsf3>
 3b6:	6d 8f       	std	Y+29, r22	; 0x1d
 3b8:	7e 8f       	std	Y+30, r23	; 0x1e
 3ba:	8f 8f       	std	Y+31, r24	; 0x1f
 3bc:	98 a3       	std	Y+32, r25	; 0x20
	this->dir_pin		= dir_pin;
 3be:	0b 8f       	std	Y+27, r16	; 0x1b
	this->step_pin		= step_pin;		
 3c0:	ec 8e       	std	Y+28, r14	; 0x1c
	stepper_time = 0;
 3c2:	1f 8a       	std	Y+23, r1	; 0x17
 3c4:	18 8e       	std	Y+24, r1	; 0x18
 3c6:	19 8e       	std	Y+25, r1	; 0x19
 3c8:	1a 8e       	std	Y+26, r1	; 0x1a
	pulse_width = 0;
 3ca:	18 8a       	std	Y+16, r1	; 0x10
 3cc:	1f 86       	std	Y+15, r1	; 0x0f
} 
 3ce:	df 91       	pop	r29
 3d0:	cf 91       	pop	r28
 3d2:	0f 91       	pop	r16
 3d4:	ef 90       	pop	r14
 3d6:	08 95       	ret

000003d8 <_ZN12StepperMotor3fsmEm>:
		fsm(current_time); 
	}

}
stepper_fsm StepperMotor::fsm(uint32_t current_time)
{
 3d8:	4f 92       	push	r4
 3da:	5f 92       	push	r5
 3dc:	6f 92       	push	r6
 3de:	7f 92       	push	r7
 3e0:	8f 92       	push	r8
 3e2:	9f 92       	push	r9
 3e4:	af 92       	push	r10
 3e6:	bf 92       	push	r11
 3e8:	cf 92       	push	r12
 3ea:	df 92       	push	r13
 3ec:	ef 92       	push	r14
 3ee:	ff 92       	push	r15
 3f0:	0f 93       	push	r16
 3f2:	1f 93       	push	r17
 3f4:	cf 93       	push	r28
 3f6:	df 93       	push	r29
 3f8:	ec 01       	movw	r28, r24
	STEPPER_REGISTER |= step_pin;
 3fa:	95 b1       	in	r25, 0x05	; 5
 3fc:	8c 8d       	ldd	r24, Y+28	; 0x1c
 3fe:	89 2b       	or	r24, r25
 400:	85 b9       	out	0x05, r24	; 5
	/*Generate pulses at a frequency of step time*/
	if(current_time - stepper_time > pulse_width){
 402:	0f 85       	ldd	r16, Y+15	; 0x0f
 404:	18 89       	ldd	r17, Y+16	; 0x10
 406:	8f 89       	ldd	r24, Y+23	; 0x17
 408:	98 8d       	ldd	r25, Y+24	; 0x18
 40a:	a9 8d       	ldd	r26, Y+25	; 0x19
 40c:	ba 8d       	ldd	r27, Y+26	; 0x1a
 40e:	6a 01       	movw	r12, r20
 410:	7b 01       	movw	r14, r22
 412:	c8 1a       	sub	r12, r24
 414:	d9 0a       	sbc	r13, r25
 416:	ea 0a       	sbc	r14, r26
 418:	fb 0a       	sbc	r15, r27
 41a:	c8 01       	movw	r24, r16
 41c:	01 2e       	mov	r0, r17
 41e:	00 0c       	add	r0, r0
 420:	aa 0b       	sbc	r26, r26
 422:	bb 0b       	sbc	r27, r27
 424:	8c 15       	cp	r24, r12
 426:	9d 05       	cpc	r25, r13
 428:	ae 05       	cpc	r26, r14
 42a:	bf 05       	cpc	r27, r15
 42c:	08 f0       	brcs	.+2      	; 0x430 <__LOCK_REGION_LENGTH__+0x30>
 42e:	97 c0       	rjmp	.+302    	; 0x55e <__LOCK_REGION_LENGTH__+0x15e>
		stepper_time = current_time;
 430:	4f 8b       	std	Y+23, r20	; 0x17
 432:	58 8f       	std	Y+24, r21	; 0x18
 434:	69 8f       	std	Y+25, r22	; 0x19
 436:	7a 8f       	std	Y+26, r23	; 0x1a
		switch(state){
 438:	89 a1       	ldd	r24, Y+33	; 0x21
 43a:	83 30       	cpi	r24, 0x03	; 3
 43c:	09 f4       	brne	.+2      	; 0x440 <__LOCK_REGION_LENGTH__+0x40>
 43e:	56 c0       	rjmp	.+172    	; 0x4ec <__LOCK_REGION_LENGTH__+0xec>
 440:	84 30       	cpi	r24, 0x04	; 4
 442:	09 f4       	brne	.+2      	; 0x446 <__LOCK_REGION_LENGTH__+0x46>
 444:	64 c0       	rjmp	.+200    	; 0x50e <__LOCK_REGION_LENGTH__+0x10e>
 446:	82 30       	cpi	r24, 0x02	; 2
 448:	09 f0       	breq	.+2      	; 0x44c <__LOCK_REGION_LENGTH__+0x4c>
 44a:	7f c0       	rjmp	.+254    	; 0x54a <__LOCK_REGION_LENGTH__+0x14a>
			case S_ACCEL:
				pulse_width=(int)pulse_width-(2*(int)pulse_width)/(4.0*pulse_width_counter  +1);	
 44c:	e9 88       	ldd	r14, Y+17	; 0x11
 44e:	fa 88       	ldd	r15, Y+18	; 0x12
 450:	b8 01       	movw	r22, r16
 452:	01 2e       	mov	r0, r17
 454:	00 0c       	add	r0, r0
 456:	88 0b       	sbc	r24, r24
 458:	99 0b       	sbc	r25, r25
 45a:	0e 94 39 06 	call	0xc72	; 0xc72 <__floatsisf>
 45e:	4b 01       	movw	r8, r22
 460:	5c 01       	movw	r10, r24
 462:	b8 01       	movw	r22, r16
 464:	66 0f       	add	r22, r22
 466:	77 1f       	adc	r23, r23
 468:	07 2e       	mov	r0, r23
 46a:	00 0c       	add	r0, r0
 46c:	88 0b       	sbc	r24, r24
 46e:	99 0b       	sbc	r25, r25
 470:	0e 94 39 06 	call	0xc72	; 0xc72 <__floatsisf>
 474:	2b 01       	movw	r4, r22
 476:	3c 01       	movw	r6, r24
 478:	b7 01       	movw	r22, r14
 47a:	0f 2c       	mov	r0, r15
 47c:	00 0c       	add	r0, r0
 47e:	88 0b       	sbc	r24, r24
 480:	99 0b       	sbc	r25, r25
 482:	0e 94 39 06 	call	0xc72	; 0xc72 <__floatsisf>
 486:	20 e0       	ldi	r18, 0x00	; 0
 488:	30 e0       	ldi	r19, 0x00	; 0
 48a:	40 e8       	ldi	r20, 0x80	; 128
 48c:	50 e4       	ldi	r21, 0x40	; 64
 48e:	0e 94 c5 06 	call	0xd8a	; 0xd8a <__mulsf3>
 492:	20 e0       	ldi	r18, 0x00	; 0
 494:	30 e0       	ldi	r19, 0x00	; 0
 496:	40 e8       	ldi	r20, 0x80	; 128
 498:	5f e3       	ldi	r21, 0x3F	; 63
 49a:	0e 94 23 05 	call	0xa46	; 0xa46 <__addsf3>
 49e:	9b 01       	movw	r18, r22
 4a0:	ac 01       	movw	r20, r24
 4a2:	c3 01       	movw	r24, r6
 4a4:	b2 01       	movw	r22, r4
 4a6:	0e 94 8f 05 	call	0xb1e	; 0xb1e <__divsf3>
 4aa:	9b 01       	movw	r18, r22
 4ac:	ac 01       	movw	r20, r24
 4ae:	c5 01       	movw	r24, r10
 4b0:	b4 01       	movw	r22, r8
 4b2:	0e 94 22 05 	call	0xa44	; 0xa44 <__subsf3>
 4b6:	0e 94 01 06 	call	0xc02	; 0xc02 <__fixsfsi>
					
				if (pulse_width <= 10){
 4ba:	6b 30       	cpi	r22, 0x0B	; 11
 4bc:	71 05       	cpc	r23, r1
 4be:	1c f0       	brlt	.+6      	; 0x4c6 <__LOCK_REGION_LENGTH__+0xc6>
	/*Generate pulses at a frequency of step time*/
	if(current_time - stepper_time > pulse_width){
		stepper_time = current_time;
		switch(state){
			case S_ACCEL:
				pulse_width=(int)pulse_width-(2*(int)pulse_width)/(4.0*pulse_width_counter  +1);	
 4c0:	78 8b       	std	Y+16, r23	; 0x10
 4c2:	6f 87       	std	Y+15, r22	; 0x0f
 4c4:	04 c0       	rjmp	.+8      	; 0x4ce <__LOCK_REGION_LENGTH__+0xce>
					
				if (pulse_width <= 10){
					pulse_width = 10;
 4c6:	8a e0       	ldi	r24, 0x0A	; 10
 4c8:	90 e0       	ldi	r25, 0x00	; 0
 4ca:	98 8b       	std	Y+16, r25	; 0x10
 4cc:	8f 87       	std	Y+15, r24	; 0x0f
				}
				if( step_counter >=  t0){
 4ce:	2b 89       	ldd	r18, Y+19	; 0x13
 4d0:	3c 89       	ldd	r19, Y+20	; 0x14
 4d2:	8f 81       	ldd	r24, Y+7	; 0x07
 4d4:	98 85       	ldd	r25, Y+8	; 0x08
 4d6:	28 17       	cp	r18, r24
 4d8:	39 07       	cpc	r19, r25
 4da:	10 f0       	brcs	.+4      	; 0x4e0 <__LOCK_REGION_LENGTH__+0xe0>
					state = S_CONSTANT;
 4dc:	83 e0       	ldi	r24, 0x03	; 3
 4de:	89 a3       	std	Y+33, r24	; 0x21
				}	
				pulse_width_counter ++;
 4e0:	8f ef       	ldi	r24, 0xFF	; 255
 4e2:	e8 1a       	sub	r14, r24
 4e4:	f8 0a       	sbc	r15, r24
 4e6:	fa 8a       	std	Y+18, r15	; 0x12
 4e8:	e9 8a       	std	Y+17, r14	; 0x11
				break; 
 4ea:	2f c0       	rjmp	.+94     	; 0x54a <__LOCK_REGION_LENGTH__+0x14a>
			case S_CONSTANT:
				if(step_counter >= t1){
 4ec:	2b 89       	ldd	r18, Y+19	; 0x13
 4ee:	3c 89       	ldd	r19, Y+20	; 0x14
 4f0:	89 85       	ldd	r24, Y+9	; 0x09
 4f2:	9a 85       	ldd	r25, Y+10	; 0x0a
 4f4:	28 17       	cp	r18, r24
 4f6:	39 07       	cpc	r19, r25
 4f8:	40 f1       	brcs	.+80     	; 0x54a <__LOCK_REGION_LENGTH__+0x14a>
					state = S_DECEL;
 4fa:	84 e0       	ldi	r24, 0x04	; 4
 4fc:	89 a3       	std	Y+33, r24	; 0x21
					pulse_width_counter =pulse_width_counter *-1; 
 4fe:	89 89       	ldd	r24, Y+17	; 0x11
 500:	9a 89       	ldd	r25, Y+18	; 0x12
 502:	91 95       	neg	r25
 504:	81 95       	neg	r24
 506:	91 09       	sbc	r25, r1
 508:	9a 8b       	std	Y+18, r25	; 0x12
 50a:	89 8b       	std	Y+17, r24	; 0x11
 50c:	1e c0       	rjmp	.+60     	; 0x54a <__LOCK_REGION_LENGTH__+0x14a>
					}
				break;
			case S_DECEL:
				pulse_width=(pulse_width-(2*pulse_width)/(4*pulse_width_counter  +1));		
 50e:	29 89       	ldd	r18, Y+17	; 0x11
 510:	3a 89       	ldd	r19, Y+18	; 0x12
 512:	c8 01       	movw	r24, r16
 514:	88 0f       	add	r24, r24
 516:	99 1f       	adc	r25, r25
 518:	b9 01       	movw	r22, r18
 51a:	66 0f       	add	r22, r22
 51c:	77 1f       	adc	r23, r23
 51e:	66 0f       	add	r22, r22
 520:	77 1f       	adc	r23, r23
 522:	6f 5f       	subi	r22, 0xFF	; 255
 524:	7f 4f       	sbci	r23, 0xFF	; 255
 526:	0e 94 8d 07 	call	0xf1a	; 0xf1a <__divmodhi4>
 52a:	06 1b       	sub	r16, r22
 52c:	17 0b       	sbc	r17, r23
 52e:	18 8b       	std	Y+16, r17	; 0x10
 530:	0f 87       	std	Y+15, r16	; 0x0f
				if(step_counter >= num_steps){
 532:	4b 89       	ldd	r20, Y+19	; 0x13
 534:	5c 89       	ldd	r21, Y+20	; 0x14
 536:	8d 81       	ldd	r24, Y+5	; 0x05
 538:	9e 81       	ldd	r25, Y+6	; 0x06
 53a:	48 17       	cp	r20, r24
 53c:	59 07       	cpc	r21, r25
 53e:	08 f0       	brcs	.+2      	; 0x542 <__LOCK_REGION_LENGTH__+0x142>
							start = 0; 
 540:	18 82       	st	Y, r1
				}
				pulse_width_counter ++;
 542:	2f 5f       	subi	r18, 0xFF	; 255
 544:	3f 4f       	sbci	r19, 0xFF	; 255
 546:	3a 8b       	std	Y+18, r19	; 0x12
 548:	29 8b       	std	Y+17, r18	; 0x11
				break;
		}	
		STEPPER_REGISTER &= ~step_pin;
 54a:	95 b1       	in	r25, 0x05	; 5
 54c:	8c 8d       	ldd	r24, Y+28	; 0x1c
 54e:	80 95       	com	r24
 550:	89 23       	and	r24, r25
 552:	85 b9       	out	0x05, r24	; 5
		step_counter++; 
 554:	8b 89       	ldd	r24, Y+19	; 0x13
 556:	9c 89       	ldd	r25, Y+20	; 0x14
 558:	01 96       	adiw	r24, 0x01	; 1
 55a:	9c 8b       	std	Y+20, r25	; 0x14
 55c:	8b 8b       	std	Y+19, r24	; 0x13
	}
	
	
	return state;
}
 55e:	89 a1       	ldd	r24, Y+33	; 0x21
 560:	df 91       	pop	r29
 562:	cf 91       	pop	r28
 564:	1f 91       	pop	r17
 566:	0f 91       	pop	r16
 568:	ff 90       	pop	r15
 56a:	ef 90       	pop	r14
 56c:	df 90       	pop	r13
 56e:	cf 90       	pop	r12
 570:	bf 90       	pop	r11
 572:	af 90       	pop	r10
 574:	9f 90       	pop	r9
 576:	8f 90       	pop	r8
 578:	7f 90       	pop	r7
 57a:	6f 90       	pop	r6
 57c:	5f 90       	pop	r5
 57e:	4f 90       	pop	r4
 580:	08 95       	ret

00000582 <_ZN12StepperMotor6rotateEm>:
} 




int StepperMotor::rotate(uint32_t current_time){
 582:	2f 92       	push	r2
 584:	3f 92       	push	r3
 586:	4f 92       	push	r4
 588:	5f 92       	push	r5
 58a:	6f 92       	push	r6
 58c:	7f 92       	push	r7
 58e:	8f 92       	push	r8
 590:	9f 92       	push	r9
 592:	af 92       	push	r10
 594:	bf 92       	push	r11
 596:	cf 92       	push	r12
 598:	df 92       	push	r13
 59a:	ef 92       	push	r14
 59c:	ff 92       	push	r15
 59e:	0f 93       	push	r16
 5a0:	1f 93       	push	r17
 5a2:	cf 93       	push	r28
 5a4:	df 93       	push	r29
 5a6:	cd b7       	in	r28, 0x3d	; 61
 5a8:	de b7       	in	r29, 0x3e	; 62
 5aa:	2c 97       	sbiw	r28, 0x0c	; 12
 5ac:	0f b6       	in	r0, 0x3f	; 63
 5ae:	f8 94       	cli
 5b0:	de bf       	out	0x3e, r29	; 62
 5b2:	0f be       	out	0x3f, r0	; 63
 5b4:	cd bf       	out	0x3d, r28	; 61
 5b6:	9c 87       	std	Y+12, r25	; 0x0c
 5b8:	8b 87       	std	Y+11, r24	; 0x0b
	if(start == 1){
 5ba:	dc 01       	movw	r26, r24
 5bc:	8c 91       	ld	r24, X
 5be:	81 30       	cpi	r24, 0x01	; 1
 5c0:	09 f0       	breq	.+2      	; 0x5c4 <_ZN12StepperMotor6rotateEm+0x42>
 5c2:	5b c1       	rjmp	.+694    	; 0x87a <_ZN12StepperMotor6rotateEm+0x2f8>
		state = S_ACCEL;
 5c4:	82 e0       	ldi	r24, 0x02	; 2
 5c6:	91 96       	adiw	r26, 0x21	; 33
 5c8:	8c 93       	st	X, r24
 5ca:	91 97       	sbiw	r26, 0x21	; 33
		int16_t angle=(target_pos - current_pos);
 5cc:	13 96       	adiw	r26, 0x03	; 3
 5ce:	8d 91       	ld	r24, X+
 5d0:	9c 91       	ld	r25, X
 5d2:	14 97       	sbiw	r26, 0x04	; 4
 5d4:	11 96       	adiw	r26, 0x01	; 1
 5d6:	2d 91       	ld	r18, X+
 5d8:	3c 91       	ld	r19, X
 5da:	12 97       	sbiw	r26, 0x02	; 2
 5dc:	8c 01       	movw	r16, r24
 5de:	02 1b       	sub	r16, r18
 5e0:	13 0b       	sbc	r17, r19
		current_pos = target_pos;
 5e2:	12 96       	adiw	r26, 0x02	; 2
 5e4:	9c 93       	st	X, r25
 5e6:	8e 93       	st	-X, r24
 5e8:	11 97       	sbiw	r26, 0x01	; 1
		if(angle> 0){
 5ea:	10 16       	cp	r1, r16
 5ec:	11 06       	cpc	r1, r17
 5ee:	34 f4       	brge	.+12     	; 0x5fc <_ZN12StepperMotor6rotateEm+0x7a>
			STEPPER_REGISTER |= dir_pin; 
 5f0:	95 b1       	in	r25, 0x05	; 5
 5f2:	5b 96       	adiw	r26, 0x1b	; 27
 5f4:	8c 91       	ld	r24, X
 5f6:	89 2b       	or	r24, r25
 5f8:	85 b9       	out	0x05, r24	; 5
 5fa:	14 c0       	rjmp	.+40     	; 0x624 <_ZN12StepperMotor6rotateEm+0xa2>
		}else if(angle <0){
 5fc:	11 23       	and	r17, r17
 5fe:	5c f4       	brge	.+22     	; 0x616 <_ZN12StepperMotor6rotateEm+0x94>
			STEPPER_REGISTER &= ~dir_pin; 
 600:	95 b1       	in	r25, 0x05	; 5
 602:	eb 85       	ldd	r30, Y+11	; 0x0b
 604:	fc 85       	ldd	r31, Y+12	; 0x0c
 606:	83 8d       	ldd	r24, Z+27	; 0x1b
 608:	80 95       	com	r24
 60a:	89 23       	and	r24, r25
 60c:	85 b9       	out	0x05, r24	; 5
			angle = angle * -1;
 60e:	11 95       	neg	r17
 610:	01 95       	neg	r16
 612:	11 09       	sbc	r17, r1
 614:	07 c0       	rjmp	.+14     	; 0x624 <_ZN12StepperMotor6rotateEm+0xa2>
		}else if(angle == 0){
 616:	01 15       	cp	r16, r1
 618:	11 05       	cpc	r17, r1
 61a:	21 f4       	brne	.+8      	; 0x624 <_ZN12StepperMotor6rotateEm+0xa2>
			state = S_WAIT;
 61c:	ab 85       	ldd	r26, Y+11	; 0x0b
 61e:	bc 85       	ldd	r27, Y+12	; 0x0c
 620:	91 96       	adiw	r26, 0x21	; 33
 622:	1c 92       	st	X, r1
			start = 0; 
		}

		/* Compute parameters */
		num_steps = angle*step_to_angle;
 624:	ab 85       	ldd	r26, Y+11	; 0x0b
 626:	bc 85       	ldd	r27, Y+12	; 0x0c
 628:	5d 96       	adiw	r26, 0x1d	; 29
 62a:	8d 91       	ld	r24, X+
 62c:	9d 91       	ld	r25, X+
 62e:	0d 90       	ld	r0, X+
 630:	bc 91       	ld	r27, X
 632:	a0 2d       	mov	r26, r0
 634:	8d 83       	std	Y+5, r24	; 0x05
 636:	9e 83       	std	Y+6, r25	; 0x06
 638:	af 83       	std	Y+7, r26	; 0x07
 63a:	b8 87       	std	Y+8, r27	; 0x08
 63c:	b8 01       	movw	r22, r16
 63e:	01 2e       	mov	r0, r17
 640:	00 0c       	add	r0, r0
 642:	88 0b       	sbc	r24, r24
 644:	99 0b       	sbc	r25, r25
 646:	0e 94 39 06 	call	0xc72	; 0xc72 <__floatsisf>
 64a:	2d 81       	ldd	r18, Y+5	; 0x05
 64c:	3e 81       	ldd	r19, Y+6	; 0x06
 64e:	4f 81       	ldd	r20, Y+7	; 0x07
 650:	58 85       	ldd	r21, Y+8	; 0x08
 652:	0e 94 c5 06 	call	0xd8a	; 0xd8a <__mulsf3>
 656:	0e 94 08 06 	call	0xc10	; 0xc10 <__fixunssfsi>
 65a:	2b 01       	movw	r4, r22
 65c:	3c 01       	movw	r6, r24
 65e:	eb 85       	ldd	r30, Y+11	; 0x0b
 660:	fc 85       	ldd	r31, Y+12	; 0x0c
 662:	76 83       	std	Z+6, r23	; 0x06
 664:	65 83       	std	Z+5, r22	; 0x05
		uint16_t vmax= 0.5*(acceleration*duration-sqrt(pow(acceleration*duration,2)-(angle*acceleration*4)));
 666:	23 84       	ldd	r2, Z+11	; 0x0b
 668:	34 84       	ldd	r3, Z+12	; 0x0c
 66a:	85 85       	ldd	r24, Z+13	; 0x0d
 66c:	96 85       	ldd	r25, Z+14	; 0x0e
 66e:	28 9e       	mul	r2, r24
 670:	b0 01       	movw	r22, r0
 672:	29 9e       	mul	r2, r25
 674:	70 0d       	add	r23, r0
 676:	38 9e       	mul	r3, r24
 678:	70 0d       	add	r23, r0
 67a:	11 24       	eor	r1, r1
 67c:	80 e0       	ldi	r24, 0x00	; 0
 67e:	90 e0       	ldi	r25, 0x00	; 0
 680:	0e 94 37 06 	call	0xc6e	; 0xc6e <__floatunsisf>
 684:	6b 01       	movw	r12, r22
 686:	7c 01       	movw	r14, r24
 688:	02 9d       	mul	r16, r2
 68a:	c0 01       	movw	r24, r0
 68c:	03 9d       	mul	r16, r3
 68e:	90 0d       	add	r25, r0
 690:	12 9d       	mul	r17, r2
 692:	90 0d       	add	r25, r0
 694:	11 24       	eor	r1, r1
 696:	9a 87       	std	Y+10, r25	; 0x0a
 698:	89 87       	std	Y+9, r24	; 0x09
 69a:	a7 01       	movw	r20, r14
 69c:	96 01       	movw	r18, r12
 69e:	c7 01       	movw	r24, r14
 6a0:	b6 01       	movw	r22, r12
 6a2:	0e 94 c5 06 	call	0xd8a	; 0xd8a <__mulsf3>
 6a6:	69 83       	std	Y+1, r22	; 0x01
 6a8:	7a 83       	std	Y+2, r23	; 0x02
 6aa:	8b 83       	std	Y+3, r24	; 0x03
 6ac:	9c 83       	std	Y+4, r25	; 0x04
 6ae:	89 84       	ldd	r8, Y+9	; 0x09
 6b0:	9a 84       	ldd	r9, Y+10	; 0x0a
 6b2:	88 0c       	add	r8, r8
 6b4:	99 1c       	adc	r9, r9
 6b6:	88 0c       	add	r8, r8
 6b8:	99 1c       	adc	r9, r9
 6ba:	a1 2c       	mov	r10, r1
 6bc:	b1 2c       	mov	r11, r1
 6be:	c5 01       	movw	r24, r10
 6c0:	b4 01       	movw	r22, r8
 6c2:	0e 94 37 06 	call	0xc6e	; 0xc6e <__floatunsisf>
 6c6:	9b 01       	movw	r18, r22
 6c8:	ac 01       	movw	r20, r24
 6ca:	69 81       	ldd	r22, Y+1	; 0x01
 6cc:	7a 81       	ldd	r23, Y+2	; 0x02
 6ce:	8b 81       	ldd	r24, Y+3	; 0x03
 6d0:	9c 81       	ldd	r25, Y+4	; 0x04
 6d2:	0e 94 22 05 	call	0xa44	; 0xa44 <__subsf3>
 6d6:	0e 94 38 07 	call	0xe70	; 0xe70 <sqrt>
 6da:	9b 01       	movw	r18, r22
 6dc:	ac 01       	movw	r20, r24
 6de:	c7 01       	movw	r24, r14
 6e0:	b6 01       	movw	r22, r12
 6e2:	0e 94 22 05 	call	0xa44	; 0xa44 <__subsf3>
 6e6:	20 e0       	ldi	r18, 0x00	; 0
 6e8:	30 e0       	ldi	r19, 0x00	; 0
 6ea:	40 e0       	ldi	r20, 0x00	; 0
 6ec:	5f e3       	ldi	r21, 0x3F	; 63
 6ee:	0e 94 c5 06 	call	0xd8a	; 0xd8a <__mulsf3>
 6f2:	0e 94 08 06 	call	0xc10	; 0xc10 <__fixunssfsi>
 6f6:	6b 01       	movw	r12, r22
 6f8:	7c 01       	movw	r14, r24
		t0=(pow(vmax,2)*num_steps)/(2*angle*acceleration);
 6fa:	80 e0       	ldi	r24, 0x00	; 0
 6fc:	90 e0       	ldi	r25, 0x00	; 0
 6fe:	0e 94 37 06 	call	0xc6e	; 0xc6e <__floatunsisf>
 702:	4b 01       	movw	r8, r22
 704:	5c 01       	movw	r10, r24
 706:	b2 01       	movw	r22, r4
 708:	80 e0       	ldi	r24, 0x00	; 0
 70a:	90 e0       	ldi	r25, 0x00	; 0
 70c:	0e 94 37 06 	call	0xc6e	; 0xc6e <__floatunsisf>
 710:	69 83       	std	Y+1, r22	; 0x01
 712:	7a 83       	std	Y+2, r23	; 0x02
 714:	8b 83       	std	Y+3, r24	; 0x03
 716:	9c 83       	std	Y+4, r25	; 0x04
 718:	a5 01       	movw	r20, r10
 71a:	94 01       	movw	r18, r8
 71c:	c5 01       	movw	r24, r10
 71e:	b4 01       	movw	r22, r8
 720:	0e 94 c5 06 	call	0xd8a	; 0xd8a <__mulsf3>
 724:	9b 01       	movw	r18, r22
 726:	ac 01       	movw	r20, r24
 728:	69 81       	ldd	r22, Y+1	; 0x01
 72a:	7a 81       	ldd	r23, Y+2	; 0x02
 72c:	8b 81       	ldd	r24, Y+3	; 0x03
 72e:	9c 81       	ldd	r25, Y+4	; 0x04
 730:	0e 94 c5 06 	call	0xd8a	; 0xd8a <__mulsf3>
 734:	4b 01       	movw	r8, r22
 736:	5c 01       	movw	r10, r24
 738:	69 85       	ldd	r22, Y+9	; 0x09
 73a:	7a 85       	ldd	r23, Y+10	; 0x0a
 73c:	66 0f       	add	r22, r22
 73e:	77 1f       	adc	r23, r23
 740:	80 e0       	ldi	r24, 0x00	; 0
 742:	90 e0       	ldi	r25, 0x00	; 0
 744:	0e 94 37 06 	call	0xc6e	; 0xc6e <__floatunsisf>
 748:	9b 01       	movw	r18, r22
 74a:	ac 01       	movw	r20, r24
 74c:	c5 01       	movw	r24, r10
 74e:	b4 01       	movw	r22, r8
 750:	0e 94 8f 05 	call	0xb1e	; 0xb1e <__divsf3>
 754:	0e 94 08 06 	call	0xc10	; 0xc10 <__fixunssfsi>
 758:	ab 85       	ldd	r26, Y+11	; 0x0b
 75a:	bc 85       	ldd	r27, Y+12	; 0x0c
 75c:	18 96       	adiw	r26, 0x08	; 8
 75e:	7c 93       	st	X, r23
 760:	6e 93       	st	-X, r22
 762:	17 97       	sbiw	r26, 0x07	; 7
		t1 =num_steps-t0;
 764:	c2 01       	movw	r24, r4
 766:	86 1b       	sub	r24, r22
 768:	97 0b       	sbc	r25, r23
 76a:	1a 96       	adiw	r26, 0x0a	; 10
 76c:	9c 93       	st	X, r25
 76e:	8e 93       	st	-X, r24
 770:	19 97       	sbiw	r26, 0x09	; 9
		pulse_width =10000* sqrt(2/(acceleration*step_to_angle));
 772:	41 01       	movw	r8, r2
 774:	a1 2c       	mov	r10, r1
 776:	b1 2c       	mov	r11, r1
 778:	c5 01       	movw	r24, r10
 77a:	b4 01       	movw	r22, r8
 77c:	0e 94 37 06 	call	0xc6e	; 0xc6e <__floatunsisf>
 780:	2d 81       	ldd	r18, Y+5	; 0x05
 782:	3e 81       	ldd	r19, Y+6	; 0x06
 784:	4f 81       	ldd	r20, Y+7	; 0x07
 786:	58 85       	ldd	r21, Y+8	; 0x08
 788:	0e 94 c5 06 	call	0xd8a	; 0xd8a <__mulsf3>
 78c:	9b 01       	movw	r18, r22
 78e:	ac 01       	movw	r20, r24
 790:	60 e0       	ldi	r22, 0x00	; 0
 792:	70 e0       	ldi	r23, 0x00	; 0
 794:	80 e0       	ldi	r24, 0x00	; 0
 796:	90 e4       	ldi	r25, 0x40	; 64
 798:	0e 94 8f 05 	call	0xb1e	; 0xb1e <__divsf3>
 79c:	0e 94 38 07 	call	0xe70	; 0xe70 <sqrt>
 7a0:	20 e0       	ldi	r18, 0x00	; 0
 7a2:	30 e4       	ldi	r19, 0x40	; 64
 7a4:	4c e1       	ldi	r20, 0x1C	; 28
 7a6:	56 e4       	ldi	r21, 0x46	; 70
 7a8:	0e 94 c5 06 	call	0xd8a	; 0xd8a <__mulsf3>
 7ac:	0e 94 01 06 	call	0xc02	; 0xc02 <__fixsfsi>
 7b0:	eb 85       	ldd	r30, Y+11	; 0x0b
 7b2:	fc 85       	ldd	r31, Y+12	; 0x0c
 7b4:	70 8b       	std	Z+16, r23	; 0x10
 7b6:	67 87       	std	Z+15, r22	; 0x0f
		/* End  computations */

		step_counter  = 0;
 7b8:	14 8a       	std	Z+20, r1	; 0x14
 7ba:	13 8a       	std	Z+19, r1	; 0x13
		pulse_width_counter  = 1; 
 7bc:	81 e0       	ldi	r24, 0x01	; 1
 7be:	90 e0       	ldi	r25, 0x00	; 0
 7c0:	92 8b       	std	Z+18, r25	; 0x12
 7c2:	81 8b       	std	Z+17, r24	; 0x11
		start = 2; 
 7c4:	82 e0       	ldi	r24, 0x02	; 2
 7c6:	80 83       	st	Z, r24
		
		usart_sendln("####################"); 
 7c8:	8d e0       	ldi	r24, 0x0D	; 13
 7ca:	91 e0       	ldi	r25, 0x01	; 1
 7cc:	0e 94 1d 05 	call	0xa3a	; 0xa3a <_Z12usart_sendlnPc>
		usart_send("Angle ");usart_sendln((int)angle);  
 7d0:	82 e2       	ldi	r24, 0x22	; 34
 7d2:	91 e0       	ldi	r25, 0x01	; 1
 7d4:	0e 94 09 05 	call	0xa12	; 0xa12 <_Z10usart_sendPc>
 7d8:	c8 01       	movw	r24, r16
 7da:	0e 94 18 05 	call	0xa30	; 0xa30 <_Z12usart_sendlni>
		usart_send("duration ");usart_sendln((int)duration);
 7de:	89 e2       	ldi	r24, 0x29	; 41
 7e0:	91 e0       	ldi	r25, 0x01	; 1
 7e2:	0e 94 09 05 	call	0xa12	; 0xa12 <_Z10usart_sendPc>
 7e6:	ab 85       	ldd	r26, Y+11	; 0x0b
 7e8:	bc 85       	ldd	r27, Y+12	; 0x0c
 7ea:	1d 96       	adiw	r26, 0x0d	; 13
 7ec:	8d 91       	ld	r24, X+
 7ee:	9c 91       	ld	r25, X
 7f0:	1e 97       	sbiw	r26, 0x0e	; 14
 7f2:	0e 94 18 05 	call	0xa30	; 0xa30 <_Z12usart_sendlni>
		usart_send("Acceleration ");usart_sendln((int)acceleration);
 7f6:	83 e3       	ldi	r24, 0x33	; 51
 7f8:	91 e0       	ldi	r25, 0x01	; 1
 7fa:	0e 94 09 05 	call	0xa12	; 0xa12 <_Z10usart_sendPc>
 7fe:	eb 85       	ldd	r30, Y+11	; 0x0b
 800:	fc 85       	ldd	r31, Y+12	; 0x0c
 802:	83 85       	ldd	r24, Z+11	; 0x0b
 804:	94 85       	ldd	r25, Z+12	; 0x0c
 806:	0e 94 18 05 	call	0xa30	; 0xa30 <_Z12usart_sendlni>
		usart_send("vmax ");usart_sendln((int)vmax); 			
 80a:	81 e4       	ldi	r24, 0x41	; 65
 80c:	91 e0       	ldi	r25, 0x01	; 1
 80e:	0e 94 09 05 	call	0xa12	; 0xa12 <_Z10usart_sendPc>
 812:	c6 01       	movw	r24, r12
 814:	0e 94 18 05 	call	0xa30	; 0xa30 <_Z12usart_sendlni>
		usart_send("#n ");usart_sendln((int)num_steps); 			
 818:	87 e4       	ldi	r24, 0x47	; 71
 81a:	91 e0       	ldi	r25, 0x01	; 1
 81c:	0e 94 09 05 	call	0xa12	; 0xa12 <_Z10usart_sendPc>
 820:	ab 85       	ldd	r26, Y+11	; 0x0b
 822:	bc 85       	ldd	r27, Y+12	; 0x0c
 824:	15 96       	adiw	r26, 0x05	; 5
 826:	8d 91       	ld	r24, X+
 828:	9c 91       	ld	r25, X
 82a:	16 97       	sbiw	r26, 0x06	; 6
 82c:	0e 94 18 05 	call	0xa30	; 0xa30 <_Z12usart_sendlni>
		usart_send("t0 ");usart_sendln((int)t0); 			
 830:	8b e4       	ldi	r24, 0x4B	; 75
 832:	91 e0       	ldi	r25, 0x01	; 1
 834:	0e 94 09 05 	call	0xa12	; 0xa12 <_Z10usart_sendPc>
 838:	eb 85       	ldd	r30, Y+11	; 0x0b
 83a:	fc 85       	ldd	r31, Y+12	; 0x0c
 83c:	87 81       	ldd	r24, Z+7	; 0x07
 83e:	90 85       	ldd	r25, Z+8	; 0x08
 840:	0e 94 18 05 	call	0xa30	; 0xa30 <_Z12usart_sendlni>
		usart_send("t1 ");usart_sendln((int)t1); 			
 844:	8f e4       	ldi	r24, 0x4F	; 79
 846:	91 e0       	ldi	r25, 0x01	; 1
 848:	0e 94 09 05 	call	0xa12	; 0xa12 <_Z10usart_sendPc>
 84c:	ab 85       	ldd	r26, Y+11	; 0x0b
 84e:	bc 85       	ldd	r27, Y+12	; 0x0c
 850:	19 96       	adiw	r26, 0x09	; 9
 852:	8d 91       	ld	r24, X+
 854:	9c 91       	ld	r25, X
 856:	1a 97       	sbiw	r26, 0x0a	; 10
 858:	0e 94 18 05 	call	0xa30	; 0xa30 <_Z12usart_sendlni>
		usart_send("Step time ");usart_sendln((int)pulse_width);
 85c:	83 e5       	ldi	r24, 0x53	; 83
 85e:	91 e0       	ldi	r25, 0x01	; 1
 860:	0e 94 09 05 	call	0xa12	; 0xa12 <_Z10usart_sendPc>
 864:	eb 85       	ldd	r30, Y+11	; 0x0b
 866:	fc 85       	ldd	r31, Y+12	; 0x0c
 868:	87 85       	ldd	r24, Z+15	; 0x0f
 86a:	90 89       	ldd	r25, Z+16	; 0x10
 86c:	0e 94 18 05 	call	0xa30	; 0xa30 <_Z12usart_sendlni>
		usart_sendln("####################"); 	
 870:	8d e0       	ldi	r24, 0x0D	; 13
 872:	91 e0       	ldi	r25, 0x01	; 1
 874:	0e 94 1d 05 	call	0xa3a	; 0xa3a <_Z12usart_sendlnPc>
 878:	06 c0       	rjmp	.+12     	; 0x886 <_ZN12StepperMotor6rotateEm+0x304>
	}else if(start == 2){
 87a:	82 30       	cpi	r24, 0x02	; 2
 87c:	21 f4       	brne	.+8      	; 0x886 <_ZN12StepperMotor6rotateEm+0x304>
		fsm(current_time); 
 87e:	8b 85       	ldd	r24, Y+11	; 0x0b
 880:	9c 85       	ldd	r25, Y+12	; 0x0c
 882:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <_ZN12StepperMotor3fsmEm>
	}

}
 886:	2c 96       	adiw	r28, 0x0c	; 12
 888:	0f b6       	in	r0, 0x3f	; 63
 88a:	f8 94       	cli
 88c:	de bf       	out	0x3e, r29	; 62
 88e:	0f be       	out	0x3f, r0	; 63
 890:	cd bf       	out	0x3d, r28	; 61
 892:	df 91       	pop	r29
 894:	cf 91       	pop	r28
 896:	1f 91       	pop	r17
 898:	0f 91       	pop	r16
 89a:	ff 90       	pop	r15
 89c:	ef 90       	pop	r14
 89e:	df 90       	pop	r13
 8a0:	cf 90       	pop	r12
 8a2:	bf 90       	pop	r11
 8a4:	af 90       	pop	r10
 8a6:	9f 90       	pop	r9
 8a8:	8f 90       	pop	r8
 8aa:	7f 90       	pop	r7
 8ac:	6f 90       	pop	r6
 8ae:	5f 90       	pop	r5
 8b0:	4f 90       	pop	r4
 8b2:	3f 90       	pop	r3
 8b4:	2f 90       	pop	r2
 8b6:	08 95       	ret

000008b8 <_Z12timer_enablev>:
	timer_counter = 0; 
}

//Reset the counter
void timer_reset(){
	timer_counter = 0; 
 8b8:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
 8bc:	e1 e8       	ldi	r30, 0x81	; 129
 8be:	f0 e0       	ldi	r31, 0x00	; 0
 8c0:	10 82       	st	Z, r1
 8c2:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
 8c6:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
 8ca:	88 e1       	ldi	r24, 0x18	; 24
 8cc:	90 e0       	ldi	r25, 0x00	; 0
 8ce:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__DATA_REGION_ORIGIN__+0x29>
 8d2:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__DATA_REGION_ORIGIN__+0x28>
 8d6:	80 81       	ld	r24, Z
 8d8:	88 60       	ori	r24, 0x08	; 8
 8da:	80 83       	st	Z, r24
 8dc:	80 81       	ld	r24, Z
 8de:	83 60       	ori	r24, 0x03	; 3
 8e0:	80 83       	st	Z, r24
 8e2:	ef e6       	ldi	r30, 0x6F	; 111
 8e4:	f0 e0       	ldi	r31, 0x00	; 0
 8e6:	80 81       	ld	r24, Z
 8e8:	82 60       	ori	r24, 0x02	; 2
 8ea:	80 83       	st	Z, r24
 8ec:	10 92 74 01 	sts	0x0174, r1	; 0x800174 <timer_counter>
 8f0:	10 92 75 01 	sts	0x0175, r1	; 0x800175 <timer_counter+0x1>
 8f4:	10 92 76 01 	sts	0x0176, r1	; 0x800176 <timer_counter+0x2>
 8f8:	10 92 77 01 	sts	0x0177, r1	; 0x800177 <timer_counter+0x3>
 8fc:	08 95       	ret

000008fe <_Z9timer_10kv>:
}

//Return the elapsed time since the counter was enable 
uint32_t timer_10k(){
	return timer_counter;
 8fe:	60 91 74 01 	lds	r22, 0x0174	; 0x800174 <timer_counter>
 902:	70 91 75 01 	lds	r23, 0x0175	; 0x800175 <timer_counter+0x1>
 906:	80 91 76 01 	lds	r24, 0x0176	; 0x800176 <timer_counter+0x2>
 90a:	90 91 77 01 	lds	r25, 0x0177	; 0x800177 <timer_counter+0x3>
}
 90e:	08 95       	ret

00000910 <__vector_11>:

//interrupt vector 
ISR (TIMER1_COMPA_vect) {
 910:	1f 92       	push	r1
 912:	0f 92       	push	r0
 914:	0f b6       	in	r0, 0x3f	; 63
 916:	0f 92       	push	r0
 918:	11 24       	eor	r1, r1
 91a:	8f 93       	push	r24
 91c:	9f 93       	push	r25
 91e:	af 93       	push	r26
 920:	bf 93       	push	r27
	timer_counter++;
 922:	80 91 74 01 	lds	r24, 0x0174	; 0x800174 <timer_counter>
 926:	90 91 75 01 	lds	r25, 0x0175	; 0x800175 <timer_counter+0x1>
 92a:	a0 91 76 01 	lds	r26, 0x0176	; 0x800176 <timer_counter+0x2>
 92e:	b0 91 77 01 	lds	r27, 0x0177	; 0x800177 <timer_counter+0x3>
 932:	01 96       	adiw	r24, 0x01	; 1
 934:	a1 1d       	adc	r26, r1
 936:	b1 1d       	adc	r27, r1
 938:	80 93 74 01 	sts	0x0174, r24	; 0x800174 <timer_counter>
 93c:	90 93 75 01 	sts	0x0175, r25	; 0x800175 <timer_counter+0x1>
 940:	a0 93 76 01 	sts	0x0176, r26	; 0x800176 <timer_counter+0x2>
 944:	b0 93 77 01 	sts	0x0177, r27	; 0x800177 <timer_counter+0x3>
 948:	bf 91       	pop	r27
 94a:	af 91       	pop	r26
 94c:	9f 91       	pop	r25
 94e:	8f 91       	pop	r24
 950:	0f 90       	pop	r0
 952:	0f be       	out	0x3f, r0	; 63
 954:	0f 90       	pop	r0
 956:	1f 90       	pop	r1
 958:	18 95       	reti

0000095a <_Z12usart_enablej>:
	usart_newline();	
}

void usart_sendln(char character){
	usart_send(character);
	usart_newline();	
 95a:	28 e9       	ldi	r18, 0x98	; 152
 95c:	20 93 c1 00 	sts	0x00C1, r18	; 0x8000c1 <__DATA_REGION_ORIGIN__+0x61>
 960:	26 e0       	ldi	r18, 0x06	; 6
 962:	20 93 c2 00 	sts	0x00C2, r18	; 0x8000c2 <__DATA_REGION_ORIGIN__+0x62>
 966:	bc 01       	movw	r22, r24
 968:	80 e0       	ldi	r24, 0x00	; 0
 96a:	90 e0       	ldi	r25, 0x00	; 0
 96c:	0e 94 37 06 	call	0xc6e	; 0xc6e <__floatunsisf>
 970:	20 e0       	ldi	r18, 0x00	; 0
 972:	30 e0       	ldi	r19, 0x00	; 0
 974:	40 e8       	ldi	r20, 0x80	; 128
 976:	51 e4       	ldi	r21, 0x41	; 65
 978:	0e 94 c5 06 	call	0xd8a	; 0xd8a <__mulsf3>
 97c:	9b 01       	movw	r18, r22
 97e:	ac 01       	movw	r20, r24
 980:	60 e0       	ldi	r22, 0x00	; 0
 982:	74 e2       	ldi	r23, 0x24	; 36
 984:	84 e7       	ldi	r24, 0x74	; 116
 986:	9b e4       	ldi	r25, 0x4B	; 75
 988:	0e 94 8f 05 	call	0xb1e	; 0xb1e <__divsf3>
 98c:	20 e0       	ldi	r18, 0x00	; 0
 98e:	30 e0       	ldi	r19, 0x00	; 0
 990:	40 e8       	ldi	r20, 0x80	; 128
 992:	5f e3       	ldi	r21, 0x3F	; 63
 994:	0e 94 22 05 	call	0xa44	; 0xa44 <__subsf3>
 998:	0e 94 08 06 	call	0xc10	; 0xc10 <__fixunssfsi>
 99c:	70 93 c5 00 	sts	0x00C5, r23	; 0x8000c5 <__DATA_REGION_ORIGIN__+0x65>
 9a0:	60 93 c4 00 	sts	0x00C4, r22	; 0x8000c4 <__DATA_REGION_ORIGIN__+0x64>
 9a4:	08 95       	ret

000009a6 <_Z10usart_sendc>:
 9a6:	e0 ec       	ldi	r30, 0xC0	; 192
 9a8:	f0 e0       	ldi	r31, 0x00	; 0
 9aa:	90 81       	ld	r25, Z
 9ac:	95 ff       	sbrs	r25, 5
 9ae:	fd cf       	rjmp	.-6      	; 0x9aa <_Z10usart_sendc+0x4>
 9b0:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
 9b4:	08 95       	ret

000009b6 <_Z13usart_newlinev>:
 9b6:	8a e0       	ldi	r24, 0x0A	; 10
 9b8:	0e 94 d3 04 	call	0x9a6	; 0x9a6 <_Z10usart_sendc>
 9bc:	08 95       	ret

000009be <_Z10usart_sendi>:
 9be:	0f 93       	push	r16
 9c0:	1f 93       	push	r17
 9c2:	cf 93       	push	r28
 9c4:	df 93       	push	r29
 9c6:	cd b7       	in	r28, 0x3d	; 61
 9c8:	de b7       	in	r29, 0x3e	; 62
 9ca:	2a 97       	sbiw	r28, 0x0a	; 10
 9cc:	0f b6       	in	r0, 0x3f	; 63
 9ce:	f8 94       	cli
 9d0:	de bf       	out	0x3e, r29	; 62
 9d2:	0f be       	out	0x3f, r0	; 63
 9d4:	cd bf       	out	0x3d, r28	; 61
 9d6:	4a e0       	ldi	r20, 0x0A	; 10
 9d8:	be 01       	movw	r22, r28
 9da:	6f 5f       	subi	r22, 0xFF	; 255
 9dc:	7f 4f       	sbci	r23, 0xFF	; 255
 9de:	0e 94 b5 07 	call	0xf6a	; 0xf6a <__itoa_ncheck>
 9e2:	89 81       	ldd	r24, Y+1	; 0x01
 9e4:	88 23       	and	r24, r24
 9e6:	51 f0       	breq	.+20     	; 0x9fc <_Z10usart_sendi+0x3e>
 9e8:	8e 01       	movw	r16, r28
 9ea:	0e 5f       	subi	r16, 0xFE	; 254
 9ec:	1f 4f       	sbci	r17, 0xFF	; 255
 9ee:	0e 94 d3 04 	call	0x9a6	; 0x9a6 <_Z10usart_sendc>
 9f2:	f8 01       	movw	r30, r16
 9f4:	81 91       	ld	r24, Z+
 9f6:	8f 01       	movw	r16, r30
 9f8:	81 11       	cpse	r24, r1
 9fa:	f9 cf       	rjmp	.-14     	; 0x9ee <_Z10usart_sendi+0x30>
 9fc:	2a 96       	adiw	r28, 0x0a	; 10
 9fe:	0f b6       	in	r0, 0x3f	; 63
 a00:	f8 94       	cli
 a02:	de bf       	out	0x3e, r29	; 62
 a04:	0f be       	out	0x3f, r0	; 63
 a06:	cd bf       	out	0x3d, r28	; 61
 a08:	df 91       	pop	r29
 a0a:	cf 91       	pop	r28
 a0c:	1f 91       	pop	r17
 a0e:	0f 91       	pop	r16
 a10:	08 95       	ret

00000a12 <_Z10usart_sendPc>:
 a12:	cf 93       	push	r28
 a14:	df 93       	push	r29
 a16:	ec 01       	movw	r28, r24
 a18:	88 81       	ld	r24, Y
 a1a:	88 23       	and	r24, r24
 a1c:	31 f0       	breq	.+12     	; 0xa2a <_Z10usart_sendPc+0x18>
 a1e:	21 96       	adiw	r28, 0x01	; 1
 a20:	0e 94 d3 04 	call	0x9a6	; 0x9a6 <_Z10usart_sendc>
 a24:	89 91       	ld	r24, Y+
 a26:	81 11       	cpse	r24, r1
 a28:	fb cf       	rjmp	.-10     	; 0xa20 <_Z10usart_sendPc+0xe>
 a2a:	df 91       	pop	r29
 a2c:	cf 91       	pop	r28
 a2e:	08 95       	ret

00000a30 <_Z12usart_sendlni>:
 a30:	0e 94 df 04 	call	0x9be	; 0x9be <_Z10usart_sendi>
 a34:	0e 94 db 04 	call	0x9b6	; 0x9b6 <_Z13usart_newlinev>
 a38:	08 95       	ret

00000a3a <_Z12usart_sendlnPc>:
}

 void usart_sendln(char * text){
	usart_send(text);
 a3a:	0e 94 09 05 	call	0xa12	; 0xa12 <_Z10usart_sendPc>
	usart_newline();	
 a3e:	0e 94 db 04 	call	0x9b6	; 0x9b6 <_Z13usart_newlinev>
 a42:	08 95       	ret

00000a44 <__subsf3>:
 a44:	50 58       	subi	r21, 0x80	; 128

00000a46 <__addsf3>:
 a46:	bb 27       	eor	r27, r27
 a48:	aa 27       	eor	r26, r26
 a4a:	0e 94 3a 05 	call	0xa74	; 0xa74 <__addsf3x>
 a4e:	0c 94 8b 06 	jmp	0xd16	; 0xd16 <__fp_round>
 a52:	0e 94 7d 06 	call	0xcfa	; 0xcfa <__fp_pscA>
 a56:	38 f0       	brcs	.+14     	; 0xa66 <__addsf3+0x20>
 a58:	0e 94 84 06 	call	0xd08	; 0xd08 <__fp_pscB>
 a5c:	20 f0       	brcs	.+8      	; 0xa66 <__addsf3+0x20>
 a5e:	39 f4       	brne	.+14     	; 0xa6e <__addsf3+0x28>
 a60:	9f 3f       	cpi	r25, 0xFF	; 255
 a62:	19 f4       	brne	.+6      	; 0xa6a <__addsf3+0x24>
 a64:	26 f4       	brtc	.+8      	; 0xa6e <__addsf3+0x28>
 a66:	0c 94 7a 06 	jmp	0xcf4	; 0xcf4 <__fp_nan>
 a6a:	0e f4       	brtc	.+2      	; 0xa6e <__addsf3+0x28>
 a6c:	e0 95       	com	r30
 a6e:	e7 fb       	bst	r30, 7
 a70:	0c 94 74 06 	jmp	0xce8	; 0xce8 <__fp_inf>

00000a74 <__addsf3x>:
 a74:	e9 2f       	mov	r30, r25
 a76:	0e 94 9c 06 	call	0xd38	; 0xd38 <__fp_split3>
 a7a:	58 f3       	brcs	.-42     	; 0xa52 <__addsf3+0xc>
 a7c:	ba 17       	cp	r27, r26
 a7e:	62 07       	cpc	r22, r18
 a80:	73 07       	cpc	r23, r19
 a82:	84 07       	cpc	r24, r20
 a84:	95 07       	cpc	r25, r21
 a86:	20 f0       	brcs	.+8      	; 0xa90 <__addsf3x+0x1c>
 a88:	79 f4       	brne	.+30     	; 0xaa8 <__addsf3x+0x34>
 a8a:	a6 f5       	brtc	.+104    	; 0xaf4 <__addsf3x+0x80>
 a8c:	0c 94 be 06 	jmp	0xd7c	; 0xd7c <__fp_zero>
 a90:	0e f4       	brtc	.+2      	; 0xa94 <__addsf3x+0x20>
 a92:	e0 95       	com	r30
 a94:	0b 2e       	mov	r0, r27
 a96:	ba 2f       	mov	r27, r26
 a98:	a0 2d       	mov	r26, r0
 a9a:	0b 01       	movw	r0, r22
 a9c:	b9 01       	movw	r22, r18
 a9e:	90 01       	movw	r18, r0
 aa0:	0c 01       	movw	r0, r24
 aa2:	ca 01       	movw	r24, r20
 aa4:	a0 01       	movw	r20, r0
 aa6:	11 24       	eor	r1, r1
 aa8:	ff 27       	eor	r31, r31
 aaa:	59 1b       	sub	r21, r25
 aac:	99 f0       	breq	.+38     	; 0xad4 <__addsf3x+0x60>
 aae:	59 3f       	cpi	r21, 0xF9	; 249
 ab0:	50 f4       	brcc	.+20     	; 0xac6 <__addsf3x+0x52>
 ab2:	50 3e       	cpi	r21, 0xE0	; 224
 ab4:	68 f1       	brcs	.+90     	; 0xb10 <__addsf3x+0x9c>
 ab6:	1a 16       	cp	r1, r26
 ab8:	f0 40       	sbci	r31, 0x00	; 0
 aba:	a2 2f       	mov	r26, r18
 abc:	23 2f       	mov	r18, r19
 abe:	34 2f       	mov	r19, r20
 ac0:	44 27       	eor	r20, r20
 ac2:	58 5f       	subi	r21, 0xF8	; 248
 ac4:	f3 cf       	rjmp	.-26     	; 0xaac <__addsf3x+0x38>
 ac6:	46 95       	lsr	r20
 ac8:	37 95       	ror	r19
 aca:	27 95       	ror	r18
 acc:	a7 95       	ror	r26
 ace:	f0 40       	sbci	r31, 0x00	; 0
 ad0:	53 95       	inc	r21
 ad2:	c9 f7       	brne	.-14     	; 0xac6 <__addsf3x+0x52>
 ad4:	7e f4       	brtc	.+30     	; 0xaf4 <__addsf3x+0x80>
 ad6:	1f 16       	cp	r1, r31
 ad8:	ba 0b       	sbc	r27, r26
 ada:	62 0b       	sbc	r22, r18
 adc:	73 0b       	sbc	r23, r19
 ade:	84 0b       	sbc	r24, r20
 ae0:	ba f0       	brmi	.+46     	; 0xb10 <__addsf3x+0x9c>
 ae2:	91 50       	subi	r25, 0x01	; 1
 ae4:	a1 f0       	breq	.+40     	; 0xb0e <__addsf3x+0x9a>
 ae6:	ff 0f       	add	r31, r31
 ae8:	bb 1f       	adc	r27, r27
 aea:	66 1f       	adc	r22, r22
 aec:	77 1f       	adc	r23, r23
 aee:	88 1f       	adc	r24, r24
 af0:	c2 f7       	brpl	.-16     	; 0xae2 <__addsf3x+0x6e>
 af2:	0e c0       	rjmp	.+28     	; 0xb10 <__addsf3x+0x9c>
 af4:	ba 0f       	add	r27, r26
 af6:	62 1f       	adc	r22, r18
 af8:	73 1f       	adc	r23, r19
 afa:	84 1f       	adc	r24, r20
 afc:	48 f4       	brcc	.+18     	; 0xb10 <__addsf3x+0x9c>
 afe:	87 95       	ror	r24
 b00:	77 95       	ror	r23
 b02:	67 95       	ror	r22
 b04:	b7 95       	ror	r27
 b06:	f7 95       	ror	r31
 b08:	9e 3f       	cpi	r25, 0xFE	; 254
 b0a:	08 f0       	brcs	.+2      	; 0xb0e <__addsf3x+0x9a>
 b0c:	b0 cf       	rjmp	.-160    	; 0xa6e <__addsf3+0x28>
 b0e:	93 95       	inc	r25
 b10:	88 0f       	add	r24, r24
 b12:	08 f0       	brcs	.+2      	; 0xb16 <__addsf3x+0xa2>
 b14:	99 27       	eor	r25, r25
 b16:	ee 0f       	add	r30, r30
 b18:	97 95       	ror	r25
 b1a:	87 95       	ror	r24
 b1c:	08 95       	ret

00000b1e <__divsf3>:
 b1e:	0e 94 a3 05 	call	0xb46	; 0xb46 <__divsf3x>
 b22:	0c 94 8b 06 	jmp	0xd16	; 0xd16 <__fp_round>
 b26:	0e 94 84 06 	call	0xd08	; 0xd08 <__fp_pscB>
 b2a:	58 f0       	brcs	.+22     	; 0xb42 <__divsf3+0x24>
 b2c:	0e 94 7d 06 	call	0xcfa	; 0xcfa <__fp_pscA>
 b30:	40 f0       	brcs	.+16     	; 0xb42 <__divsf3+0x24>
 b32:	29 f4       	brne	.+10     	; 0xb3e <__divsf3+0x20>
 b34:	5f 3f       	cpi	r21, 0xFF	; 255
 b36:	29 f0       	breq	.+10     	; 0xb42 <__divsf3+0x24>
 b38:	0c 94 74 06 	jmp	0xce8	; 0xce8 <__fp_inf>
 b3c:	51 11       	cpse	r21, r1
 b3e:	0c 94 bf 06 	jmp	0xd7e	; 0xd7e <__fp_szero>
 b42:	0c 94 7a 06 	jmp	0xcf4	; 0xcf4 <__fp_nan>

00000b46 <__divsf3x>:
 b46:	0e 94 9c 06 	call	0xd38	; 0xd38 <__fp_split3>
 b4a:	68 f3       	brcs	.-38     	; 0xb26 <__divsf3+0x8>

00000b4c <__divsf3_pse>:
 b4c:	99 23       	and	r25, r25
 b4e:	b1 f3       	breq	.-20     	; 0xb3c <__divsf3+0x1e>
 b50:	55 23       	and	r21, r21
 b52:	91 f3       	breq	.-28     	; 0xb38 <__divsf3+0x1a>
 b54:	95 1b       	sub	r25, r21
 b56:	55 0b       	sbc	r21, r21
 b58:	bb 27       	eor	r27, r27
 b5a:	aa 27       	eor	r26, r26
 b5c:	62 17       	cp	r22, r18
 b5e:	73 07       	cpc	r23, r19
 b60:	84 07       	cpc	r24, r20
 b62:	38 f0       	brcs	.+14     	; 0xb72 <__divsf3_pse+0x26>
 b64:	9f 5f       	subi	r25, 0xFF	; 255
 b66:	5f 4f       	sbci	r21, 0xFF	; 255
 b68:	22 0f       	add	r18, r18
 b6a:	33 1f       	adc	r19, r19
 b6c:	44 1f       	adc	r20, r20
 b6e:	aa 1f       	adc	r26, r26
 b70:	a9 f3       	breq	.-22     	; 0xb5c <__divsf3_pse+0x10>
 b72:	35 d0       	rcall	.+106    	; 0xbde <__divsf3_pse+0x92>
 b74:	0e 2e       	mov	r0, r30
 b76:	3a f0       	brmi	.+14     	; 0xb86 <__divsf3_pse+0x3a>
 b78:	e0 e8       	ldi	r30, 0x80	; 128
 b7a:	32 d0       	rcall	.+100    	; 0xbe0 <__divsf3_pse+0x94>
 b7c:	91 50       	subi	r25, 0x01	; 1
 b7e:	50 40       	sbci	r21, 0x00	; 0
 b80:	e6 95       	lsr	r30
 b82:	00 1c       	adc	r0, r0
 b84:	ca f7       	brpl	.-14     	; 0xb78 <__divsf3_pse+0x2c>
 b86:	2b d0       	rcall	.+86     	; 0xbde <__divsf3_pse+0x92>
 b88:	fe 2f       	mov	r31, r30
 b8a:	29 d0       	rcall	.+82     	; 0xbde <__divsf3_pse+0x92>
 b8c:	66 0f       	add	r22, r22
 b8e:	77 1f       	adc	r23, r23
 b90:	88 1f       	adc	r24, r24
 b92:	bb 1f       	adc	r27, r27
 b94:	26 17       	cp	r18, r22
 b96:	37 07       	cpc	r19, r23
 b98:	48 07       	cpc	r20, r24
 b9a:	ab 07       	cpc	r26, r27
 b9c:	b0 e8       	ldi	r27, 0x80	; 128
 b9e:	09 f0       	breq	.+2      	; 0xba2 <__divsf3_pse+0x56>
 ba0:	bb 0b       	sbc	r27, r27
 ba2:	80 2d       	mov	r24, r0
 ba4:	bf 01       	movw	r22, r30
 ba6:	ff 27       	eor	r31, r31
 ba8:	93 58       	subi	r25, 0x83	; 131
 baa:	5f 4f       	sbci	r21, 0xFF	; 255
 bac:	3a f0       	brmi	.+14     	; 0xbbc <__divsf3_pse+0x70>
 bae:	9e 3f       	cpi	r25, 0xFE	; 254
 bb0:	51 05       	cpc	r21, r1
 bb2:	78 f0       	brcs	.+30     	; 0xbd2 <__divsf3_pse+0x86>
 bb4:	0c 94 74 06 	jmp	0xce8	; 0xce8 <__fp_inf>
 bb8:	0c 94 bf 06 	jmp	0xd7e	; 0xd7e <__fp_szero>
 bbc:	5f 3f       	cpi	r21, 0xFF	; 255
 bbe:	e4 f3       	brlt	.-8      	; 0xbb8 <__divsf3_pse+0x6c>
 bc0:	98 3e       	cpi	r25, 0xE8	; 232
 bc2:	d4 f3       	brlt	.-12     	; 0xbb8 <__divsf3_pse+0x6c>
 bc4:	86 95       	lsr	r24
 bc6:	77 95       	ror	r23
 bc8:	67 95       	ror	r22
 bca:	b7 95       	ror	r27
 bcc:	f7 95       	ror	r31
 bce:	9f 5f       	subi	r25, 0xFF	; 255
 bd0:	c9 f7       	brne	.-14     	; 0xbc4 <__divsf3_pse+0x78>
 bd2:	88 0f       	add	r24, r24
 bd4:	91 1d       	adc	r25, r1
 bd6:	96 95       	lsr	r25
 bd8:	87 95       	ror	r24
 bda:	97 f9       	bld	r25, 7
 bdc:	08 95       	ret
 bde:	e1 e0       	ldi	r30, 0x01	; 1
 be0:	66 0f       	add	r22, r22
 be2:	77 1f       	adc	r23, r23
 be4:	88 1f       	adc	r24, r24
 be6:	bb 1f       	adc	r27, r27
 be8:	62 17       	cp	r22, r18
 bea:	73 07       	cpc	r23, r19
 bec:	84 07       	cpc	r24, r20
 bee:	ba 07       	cpc	r27, r26
 bf0:	20 f0       	brcs	.+8      	; 0xbfa <__divsf3_pse+0xae>
 bf2:	62 1b       	sub	r22, r18
 bf4:	73 0b       	sbc	r23, r19
 bf6:	84 0b       	sbc	r24, r20
 bf8:	ba 0b       	sbc	r27, r26
 bfa:	ee 1f       	adc	r30, r30
 bfc:	88 f7       	brcc	.-30     	; 0xbe0 <__divsf3_pse+0x94>
 bfe:	e0 95       	com	r30
 c00:	08 95       	ret

00000c02 <__fixsfsi>:
 c02:	0e 94 08 06 	call	0xc10	; 0xc10 <__fixunssfsi>
 c06:	68 94       	set
 c08:	b1 11       	cpse	r27, r1
 c0a:	0c 94 bf 06 	jmp	0xd7e	; 0xd7e <__fp_szero>
 c0e:	08 95       	ret

00000c10 <__fixunssfsi>:
 c10:	0e 94 a4 06 	call	0xd48	; 0xd48 <__fp_splitA>
 c14:	88 f0       	brcs	.+34     	; 0xc38 <__fixunssfsi+0x28>
 c16:	9f 57       	subi	r25, 0x7F	; 127
 c18:	98 f0       	brcs	.+38     	; 0xc40 <__fixunssfsi+0x30>
 c1a:	b9 2f       	mov	r27, r25
 c1c:	99 27       	eor	r25, r25
 c1e:	b7 51       	subi	r27, 0x17	; 23
 c20:	b0 f0       	brcs	.+44     	; 0xc4e <__fixunssfsi+0x3e>
 c22:	e1 f0       	breq	.+56     	; 0xc5c <__fixunssfsi+0x4c>
 c24:	66 0f       	add	r22, r22
 c26:	77 1f       	adc	r23, r23
 c28:	88 1f       	adc	r24, r24
 c2a:	99 1f       	adc	r25, r25
 c2c:	1a f0       	brmi	.+6      	; 0xc34 <__fixunssfsi+0x24>
 c2e:	ba 95       	dec	r27
 c30:	c9 f7       	brne	.-14     	; 0xc24 <__fixunssfsi+0x14>
 c32:	14 c0       	rjmp	.+40     	; 0xc5c <__fixunssfsi+0x4c>
 c34:	b1 30       	cpi	r27, 0x01	; 1
 c36:	91 f0       	breq	.+36     	; 0xc5c <__fixunssfsi+0x4c>
 c38:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fp_zero>
 c3c:	b1 e0       	ldi	r27, 0x01	; 1
 c3e:	08 95       	ret
 c40:	0c 94 be 06 	jmp	0xd7c	; 0xd7c <__fp_zero>
 c44:	67 2f       	mov	r22, r23
 c46:	78 2f       	mov	r23, r24
 c48:	88 27       	eor	r24, r24
 c4a:	b8 5f       	subi	r27, 0xF8	; 248
 c4c:	39 f0       	breq	.+14     	; 0xc5c <__fixunssfsi+0x4c>
 c4e:	b9 3f       	cpi	r27, 0xF9	; 249
 c50:	cc f3       	brlt	.-14     	; 0xc44 <__fixunssfsi+0x34>
 c52:	86 95       	lsr	r24
 c54:	77 95       	ror	r23
 c56:	67 95       	ror	r22
 c58:	b3 95       	inc	r27
 c5a:	d9 f7       	brne	.-10     	; 0xc52 <__fixunssfsi+0x42>
 c5c:	3e f4       	brtc	.+14     	; 0xc6c <__fixunssfsi+0x5c>
 c5e:	90 95       	com	r25
 c60:	80 95       	com	r24
 c62:	70 95       	com	r23
 c64:	61 95       	neg	r22
 c66:	7f 4f       	sbci	r23, 0xFF	; 255
 c68:	8f 4f       	sbci	r24, 0xFF	; 255
 c6a:	9f 4f       	sbci	r25, 0xFF	; 255
 c6c:	08 95       	ret

00000c6e <__floatunsisf>:
 c6e:	e8 94       	clt
 c70:	09 c0       	rjmp	.+18     	; 0xc84 <__floatsisf+0x12>

00000c72 <__floatsisf>:
 c72:	97 fb       	bst	r25, 7
 c74:	3e f4       	brtc	.+14     	; 0xc84 <__floatsisf+0x12>
 c76:	90 95       	com	r25
 c78:	80 95       	com	r24
 c7a:	70 95       	com	r23
 c7c:	61 95       	neg	r22
 c7e:	7f 4f       	sbci	r23, 0xFF	; 255
 c80:	8f 4f       	sbci	r24, 0xFF	; 255
 c82:	9f 4f       	sbci	r25, 0xFF	; 255
 c84:	99 23       	and	r25, r25
 c86:	a9 f0       	breq	.+42     	; 0xcb2 <__floatsisf+0x40>
 c88:	f9 2f       	mov	r31, r25
 c8a:	96 e9       	ldi	r25, 0x96	; 150
 c8c:	bb 27       	eor	r27, r27
 c8e:	93 95       	inc	r25
 c90:	f6 95       	lsr	r31
 c92:	87 95       	ror	r24
 c94:	77 95       	ror	r23
 c96:	67 95       	ror	r22
 c98:	b7 95       	ror	r27
 c9a:	f1 11       	cpse	r31, r1
 c9c:	f8 cf       	rjmp	.-16     	; 0xc8e <__floatsisf+0x1c>
 c9e:	fa f4       	brpl	.+62     	; 0xcde <__floatsisf+0x6c>
 ca0:	bb 0f       	add	r27, r27
 ca2:	11 f4       	brne	.+4      	; 0xca8 <__floatsisf+0x36>
 ca4:	60 ff       	sbrs	r22, 0
 ca6:	1b c0       	rjmp	.+54     	; 0xcde <__floatsisf+0x6c>
 ca8:	6f 5f       	subi	r22, 0xFF	; 255
 caa:	7f 4f       	sbci	r23, 0xFF	; 255
 cac:	8f 4f       	sbci	r24, 0xFF	; 255
 cae:	9f 4f       	sbci	r25, 0xFF	; 255
 cb0:	16 c0       	rjmp	.+44     	; 0xcde <__floatsisf+0x6c>
 cb2:	88 23       	and	r24, r24
 cb4:	11 f0       	breq	.+4      	; 0xcba <__floatsisf+0x48>
 cb6:	96 e9       	ldi	r25, 0x96	; 150
 cb8:	11 c0       	rjmp	.+34     	; 0xcdc <__floatsisf+0x6a>
 cba:	77 23       	and	r23, r23
 cbc:	21 f0       	breq	.+8      	; 0xcc6 <__floatsisf+0x54>
 cbe:	9e e8       	ldi	r25, 0x8E	; 142
 cc0:	87 2f       	mov	r24, r23
 cc2:	76 2f       	mov	r23, r22
 cc4:	05 c0       	rjmp	.+10     	; 0xcd0 <__floatsisf+0x5e>
 cc6:	66 23       	and	r22, r22
 cc8:	71 f0       	breq	.+28     	; 0xce6 <__floatsisf+0x74>
 cca:	96 e8       	ldi	r25, 0x86	; 134
 ccc:	86 2f       	mov	r24, r22
 cce:	70 e0       	ldi	r23, 0x00	; 0
 cd0:	60 e0       	ldi	r22, 0x00	; 0
 cd2:	2a f0       	brmi	.+10     	; 0xcde <__floatsisf+0x6c>
 cd4:	9a 95       	dec	r25
 cd6:	66 0f       	add	r22, r22
 cd8:	77 1f       	adc	r23, r23
 cda:	88 1f       	adc	r24, r24
 cdc:	da f7       	brpl	.-10     	; 0xcd4 <__floatsisf+0x62>
 cde:	88 0f       	add	r24, r24
 ce0:	96 95       	lsr	r25
 ce2:	87 95       	ror	r24
 ce4:	97 f9       	bld	r25, 7
 ce6:	08 95       	ret

00000ce8 <__fp_inf>:
 ce8:	97 f9       	bld	r25, 7
 cea:	9f 67       	ori	r25, 0x7F	; 127
 cec:	80 e8       	ldi	r24, 0x80	; 128
 cee:	70 e0       	ldi	r23, 0x00	; 0
 cf0:	60 e0       	ldi	r22, 0x00	; 0
 cf2:	08 95       	ret

00000cf4 <__fp_nan>:
 cf4:	9f ef       	ldi	r25, 0xFF	; 255
 cf6:	80 ec       	ldi	r24, 0xC0	; 192
 cf8:	08 95       	ret

00000cfa <__fp_pscA>:
 cfa:	00 24       	eor	r0, r0
 cfc:	0a 94       	dec	r0
 cfe:	16 16       	cp	r1, r22
 d00:	17 06       	cpc	r1, r23
 d02:	18 06       	cpc	r1, r24
 d04:	09 06       	cpc	r0, r25
 d06:	08 95       	ret

00000d08 <__fp_pscB>:
 d08:	00 24       	eor	r0, r0
 d0a:	0a 94       	dec	r0
 d0c:	12 16       	cp	r1, r18
 d0e:	13 06       	cpc	r1, r19
 d10:	14 06       	cpc	r1, r20
 d12:	05 06       	cpc	r0, r21
 d14:	08 95       	ret

00000d16 <__fp_round>:
 d16:	09 2e       	mov	r0, r25
 d18:	03 94       	inc	r0
 d1a:	00 0c       	add	r0, r0
 d1c:	11 f4       	brne	.+4      	; 0xd22 <__fp_round+0xc>
 d1e:	88 23       	and	r24, r24
 d20:	52 f0       	brmi	.+20     	; 0xd36 <__fp_round+0x20>
 d22:	bb 0f       	add	r27, r27
 d24:	40 f4       	brcc	.+16     	; 0xd36 <__fp_round+0x20>
 d26:	bf 2b       	or	r27, r31
 d28:	11 f4       	brne	.+4      	; 0xd2e <__fp_round+0x18>
 d2a:	60 ff       	sbrs	r22, 0
 d2c:	04 c0       	rjmp	.+8      	; 0xd36 <__fp_round+0x20>
 d2e:	6f 5f       	subi	r22, 0xFF	; 255
 d30:	7f 4f       	sbci	r23, 0xFF	; 255
 d32:	8f 4f       	sbci	r24, 0xFF	; 255
 d34:	9f 4f       	sbci	r25, 0xFF	; 255
 d36:	08 95       	ret

00000d38 <__fp_split3>:
 d38:	57 fd       	sbrc	r21, 7
 d3a:	90 58       	subi	r25, 0x80	; 128
 d3c:	44 0f       	add	r20, r20
 d3e:	55 1f       	adc	r21, r21
 d40:	59 f0       	breq	.+22     	; 0xd58 <__fp_splitA+0x10>
 d42:	5f 3f       	cpi	r21, 0xFF	; 255
 d44:	71 f0       	breq	.+28     	; 0xd62 <__fp_splitA+0x1a>
 d46:	47 95       	ror	r20

00000d48 <__fp_splitA>:
 d48:	88 0f       	add	r24, r24
 d4a:	97 fb       	bst	r25, 7
 d4c:	99 1f       	adc	r25, r25
 d4e:	61 f0       	breq	.+24     	; 0xd68 <__fp_splitA+0x20>
 d50:	9f 3f       	cpi	r25, 0xFF	; 255
 d52:	79 f0       	breq	.+30     	; 0xd72 <__fp_splitA+0x2a>
 d54:	87 95       	ror	r24
 d56:	08 95       	ret
 d58:	12 16       	cp	r1, r18
 d5a:	13 06       	cpc	r1, r19
 d5c:	14 06       	cpc	r1, r20
 d5e:	55 1f       	adc	r21, r21
 d60:	f2 cf       	rjmp	.-28     	; 0xd46 <__fp_split3+0xe>
 d62:	46 95       	lsr	r20
 d64:	f1 df       	rcall	.-30     	; 0xd48 <__fp_splitA>
 d66:	08 c0       	rjmp	.+16     	; 0xd78 <__fp_splitA+0x30>
 d68:	16 16       	cp	r1, r22
 d6a:	17 06       	cpc	r1, r23
 d6c:	18 06       	cpc	r1, r24
 d6e:	99 1f       	adc	r25, r25
 d70:	f1 cf       	rjmp	.-30     	; 0xd54 <__fp_splitA+0xc>
 d72:	86 95       	lsr	r24
 d74:	71 05       	cpc	r23, r1
 d76:	61 05       	cpc	r22, r1
 d78:	08 94       	sec
 d7a:	08 95       	ret

00000d7c <__fp_zero>:
 d7c:	e8 94       	clt

00000d7e <__fp_szero>:
 d7e:	bb 27       	eor	r27, r27
 d80:	66 27       	eor	r22, r22
 d82:	77 27       	eor	r23, r23
 d84:	cb 01       	movw	r24, r22
 d86:	97 f9       	bld	r25, 7
 d88:	08 95       	ret

00000d8a <__mulsf3>:
 d8a:	0e 94 d8 06 	call	0xdb0	; 0xdb0 <__mulsf3x>
 d8e:	0c 94 8b 06 	jmp	0xd16	; 0xd16 <__fp_round>
 d92:	0e 94 7d 06 	call	0xcfa	; 0xcfa <__fp_pscA>
 d96:	38 f0       	brcs	.+14     	; 0xda6 <__mulsf3+0x1c>
 d98:	0e 94 84 06 	call	0xd08	; 0xd08 <__fp_pscB>
 d9c:	20 f0       	brcs	.+8      	; 0xda6 <__mulsf3+0x1c>
 d9e:	95 23       	and	r25, r21
 da0:	11 f0       	breq	.+4      	; 0xda6 <__mulsf3+0x1c>
 da2:	0c 94 74 06 	jmp	0xce8	; 0xce8 <__fp_inf>
 da6:	0c 94 7a 06 	jmp	0xcf4	; 0xcf4 <__fp_nan>
 daa:	11 24       	eor	r1, r1
 dac:	0c 94 bf 06 	jmp	0xd7e	; 0xd7e <__fp_szero>

00000db0 <__mulsf3x>:
 db0:	0e 94 9c 06 	call	0xd38	; 0xd38 <__fp_split3>
 db4:	70 f3       	brcs	.-36     	; 0xd92 <__mulsf3+0x8>

00000db6 <__mulsf3_pse>:
 db6:	95 9f       	mul	r25, r21
 db8:	c1 f3       	breq	.-16     	; 0xdaa <__mulsf3+0x20>
 dba:	95 0f       	add	r25, r21
 dbc:	50 e0       	ldi	r21, 0x00	; 0
 dbe:	55 1f       	adc	r21, r21
 dc0:	62 9f       	mul	r22, r18
 dc2:	f0 01       	movw	r30, r0
 dc4:	72 9f       	mul	r23, r18
 dc6:	bb 27       	eor	r27, r27
 dc8:	f0 0d       	add	r31, r0
 dca:	b1 1d       	adc	r27, r1
 dcc:	63 9f       	mul	r22, r19
 dce:	aa 27       	eor	r26, r26
 dd0:	f0 0d       	add	r31, r0
 dd2:	b1 1d       	adc	r27, r1
 dd4:	aa 1f       	adc	r26, r26
 dd6:	64 9f       	mul	r22, r20
 dd8:	66 27       	eor	r22, r22
 dda:	b0 0d       	add	r27, r0
 ddc:	a1 1d       	adc	r26, r1
 dde:	66 1f       	adc	r22, r22
 de0:	82 9f       	mul	r24, r18
 de2:	22 27       	eor	r18, r18
 de4:	b0 0d       	add	r27, r0
 de6:	a1 1d       	adc	r26, r1
 de8:	62 1f       	adc	r22, r18
 dea:	73 9f       	mul	r23, r19
 dec:	b0 0d       	add	r27, r0
 dee:	a1 1d       	adc	r26, r1
 df0:	62 1f       	adc	r22, r18
 df2:	83 9f       	mul	r24, r19
 df4:	a0 0d       	add	r26, r0
 df6:	61 1d       	adc	r22, r1
 df8:	22 1f       	adc	r18, r18
 dfa:	74 9f       	mul	r23, r20
 dfc:	33 27       	eor	r19, r19
 dfe:	a0 0d       	add	r26, r0
 e00:	61 1d       	adc	r22, r1
 e02:	23 1f       	adc	r18, r19
 e04:	84 9f       	mul	r24, r20
 e06:	60 0d       	add	r22, r0
 e08:	21 1d       	adc	r18, r1
 e0a:	82 2f       	mov	r24, r18
 e0c:	76 2f       	mov	r23, r22
 e0e:	6a 2f       	mov	r22, r26
 e10:	11 24       	eor	r1, r1
 e12:	9f 57       	subi	r25, 0x7F	; 127
 e14:	50 40       	sbci	r21, 0x00	; 0
 e16:	9a f0       	brmi	.+38     	; 0xe3e <__mulsf3_pse+0x88>
 e18:	f1 f0       	breq	.+60     	; 0xe56 <__mulsf3_pse+0xa0>
 e1a:	88 23       	and	r24, r24
 e1c:	4a f0       	brmi	.+18     	; 0xe30 <__mulsf3_pse+0x7a>
 e1e:	ee 0f       	add	r30, r30
 e20:	ff 1f       	adc	r31, r31
 e22:	bb 1f       	adc	r27, r27
 e24:	66 1f       	adc	r22, r22
 e26:	77 1f       	adc	r23, r23
 e28:	88 1f       	adc	r24, r24
 e2a:	91 50       	subi	r25, 0x01	; 1
 e2c:	50 40       	sbci	r21, 0x00	; 0
 e2e:	a9 f7       	brne	.-22     	; 0xe1a <__mulsf3_pse+0x64>
 e30:	9e 3f       	cpi	r25, 0xFE	; 254
 e32:	51 05       	cpc	r21, r1
 e34:	80 f0       	brcs	.+32     	; 0xe56 <__mulsf3_pse+0xa0>
 e36:	0c 94 74 06 	jmp	0xce8	; 0xce8 <__fp_inf>
 e3a:	0c 94 bf 06 	jmp	0xd7e	; 0xd7e <__fp_szero>
 e3e:	5f 3f       	cpi	r21, 0xFF	; 255
 e40:	e4 f3       	brlt	.-8      	; 0xe3a <__mulsf3_pse+0x84>
 e42:	98 3e       	cpi	r25, 0xE8	; 232
 e44:	d4 f3       	brlt	.-12     	; 0xe3a <__mulsf3_pse+0x84>
 e46:	86 95       	lsr	r24
 e48:	77 95       	ror	r23
 e4a:	67 95       	ror	r22
 e4c:	b7 95       	ror	r27
 e4e:	f7 95       	ror	r31
 e50:	e7 95       	ror	r30
 e52:	9f 5f       	subi	r25, 0xFF	; 255
 e54:	c1 f7       	brne	.-16     	; 0xe46 <__mulsf3_pse+0x90>
 e56:	fe 2b       	or	r31, r30
 e58:	88 0f       	add	r24, r24
 e5a:	91 1d       	adc	r25, r1
 e5c:	96 95       	lsr	r25
 e5e:	87 95       	ror	r24
 e60:	97 f9       	bld	r25, 7
 e62:	08 95       	ret
 e64:	19 f4       	brne	.+6      	; 0xe6c <__mulsf3_pse+0xb6>
 e66:	16 f4       	brtc	.+4      	; 0xe6c <__mulsf3_pse+0xb6>
 e68:	0c 94 7a 06 	jmp	0xcf4	; 0xcf4 <__fp_nan>
 e6c:	0c 94 78 07 	jmp	0xef0	; 0xef0 <__fp_mpack>

00000e70 <sqrt>:
 e70:	0e 94 a4 06 	call	0xd48	; 0xd48 <__fp_splitA>
 e74:	b8 f3       	brcs	.-18     	; 0xe64 <__mulsf3_pse+0xae>
 e76:	99 23       	and	r25, r25
 e78:	c9 f3       	breq	.-14     	; 0xe6c <__mulsf3_pse+0xb6>
 e7a:	b6 f3       	brts	.-20     	; 0xe68 <__mulsf3_pse+0xb2>
 e7c:	9f 57       	subi	r25, 0x7F	; 127
 e7e:	55 0b       	sbc	r21, r21
 e80:	87 ff       	sbrs	r24, 7
 e82:	0e 94 86 07 	call	0xf0c	; 0xf0c <__fp_norm2>
 e86:	00 24       	eor	r0, r0
 e88:	a0 e6       	ldi	r26, 0x60	; 96
 e8a:	40 ea       	ldi	r20, 0xA0	; 160
 e8c:	90 01       	movw	r18, r0
 e8e:	80 58       	subi	r24, 0x80	; 128
 e90:	56 95       	lsr	r21
 e92:	97 95       	ror	r25
 e94:	28 f4       	brcc	.+10     	; 0xea0 <sqrt+0x30>
 e96:	80 5c       	subi	r24, 0xC0	; 192
 e98:	66 0f       	add	r22, r22
 e9a:	77 1f       	adc	r23, r23
 e9c:	88 1f       	adc	r24, r24
 e9e:	20 f0       	brcs	.+8      	; 0xea8 <sqrt+0x38>
 ea0:	26 17       	cp	r18, r22
 ea2:	37 07       	cpc	r19, r23
 ea4:	48 07       	cpc	r20, r24
 ea6:	30 f4       	brcc	.+12     	; 0xeb4 <sqrt+0x44>
 ea8:	62 1b       	sub	r22, r18
 eaa:	73 0b       	sbc	r23, r19
 eac:	84 0b       	sbc	r24, r20
 eae:	20 29       	or	r18, r0
 eb0:	31 29       	or	r19, r1
 eb2:	4a 2b       	or	r20, r26
 eb4:	a6 95       	lsr	r26
 eb6:	17 94       	ror	r1
 eb8:	07 94       	ror	r0
 eba:	20 25       	eor	r18, r0
 ebc:	31 25       	eor	r19, r1
 ebe:	4a 27       	eor	r20, r26
 ec0:	58 f7       	brcc	.-42     	; 0xe98 <sqrt+0x28>
 ec2:	66 0f       	add	r22, r22
 ec4:	77 1f       	adc	r23, r23
 ec6:	88 1f       	adc	r24, r24
 ec8:	20 f0       	brcs	.+8      	; 0xed2 <sqrt+0x62>
 eca:	26 17       	cp	r18, r22
 ecc:	37 07       	cpc	r19, r23
 ece:	48 07       	cpc	r20, r24
 ed0:	30 f4       	brcc	.+12     	; 0xede <sqrt+0x6e>
 ed2:	62 0b       	sbc	r22, r18
 ed4:	73 0b       	sbc	r23, r19
 ed6:	84 0b       	sbc	r24, r20
 ed8:	20 0d       	add	r18, r0
 eda:	31 1d       	adc	r19, r1
 edc:	41 1d       	adc	r20, r1
 ede:	a0 95       	com	r26
 ee0:	81 f7       	brne	.-32     	; 0xec2 <sqrt+0x52>
 ee2:	b9 01       	movw	r22, r18
 ee4:	84 2f       	mov	r24, r20
 ee6:	91 58       	subi	r25, 0x81	; 129
 ee8:	88 0f       	add	r24, r24
 eea:	96 95       	lsr	r25
 eec:	87 95       	ror	r24
 eee:	08 95       	ret

00000ef0 <__fp_mpack>:
 ef0:	9f 3f       	cpi	r25, 0xFF	; 255
 ef2:	31 f0       	breq	.+12     	; 0xf00 <__fp_mpack_finite+0xc>

00000ef4 <__fp_mpack_finite>:
 ef4:	91 50       	subi	r25, 0x01	; 1
 ef6:	20 f4       	brcc	.+8      	; 0xf00 <__fp_mpack_finite+0xc>
 ef8:	87 95       	ror	r24
 efa:	77 95       	ror	r23
 efc:	67 95       	ror	r22
 efe:	b7 95       	ror	r27
 f00:	88 0f       	add	r24, r24
 f02:	91 1d       	adc	r25, r1
 f04:	96 95       	lsr	r25
 f06:	87 95       	ror	r24
 f08:	97 f9       	bld	r25, 7
 f0a:	08 95       	ret

00000f0c <__fp_norm2>:
 f0c:	91 50       	subi	r25, 0x01	; 1
 f0e:	50 40       	sbci	r21, 0x00	; 0
 f10:	66 0f       	add	r22, r22
 f12:	77 1f       	adc	r23, r23
 f14:	88 1f       	adc	r24, r24
 f16:	d2 f7       	brpl	.-12     	; 0xf0c <__fp_norm2>
 f18:	08 95       	ret

00000f1a <__divmodhi4>:
 f1a:	97 fb       	bst	r25, 7
 f1c:	07 2e       	mov	r0, r23
 f1e:	16 f4       	brtc	.+4      	; 0xf24 <__divmodhi4+0xa>
 f20:	00 94       	com	r0
 f22:	07 d0       	rcall	.+14     	; 0xf32 <__divmodhi4_neg1>
 f24:	77 fd       	sbrc	r23, 7
 f26:	09 d0       	rcall	.+18     	; 0xf3a <__divmodhi4_neg2>
 f28:	0e 94 a1 07 	call	0xf42	; 0xf42 <__udivmodhi4>
 f2c:	07 fc       	sbrc	r0, 7
 f2e:	05 d0       	rcall	.+10     	; 0xf3a <__divmodhi4_neg2>
 f30:	3e f4       	brtc	.+14     	; 0xf40 <__divmodhi4_exit>

00000f32 <__divmodhi4_neg1>:
 f32:	90 95       	com	r25
 f34:	81 95       	neg	r24
 f36:	9f 4f       	sbci	r25, 0xFF	; 255
 f38:	08 95       	ret

00000f3a <__divmodhi4_neg2>:
 f3a:	70 95       	com	r23
 f3c:	61 95       	neg	r22
 f3e:	7f 4f       	sbci	r23, 0xFF	; 255

00000f40 <__divmodhi4_exit>:
 f40:	08 95       	ret

00000f42 <__udivmodhi4>:
 f42:	aa 1b       	sub	r26, r26
 f44:	bb 1b       	sub	r27, r27
 f46:	51 e1       	ldi	r21, 0x11	; 17
 f48:	07 c0       	rjmp	.+14     	; 0xf58 <__udivmodhi4_ep>

00000f4a <__udivmodhi4_loop>:
 f4a:	aa 1f       	adc	r26, r26
 f4c:	bb 1f       	adc	r27, r27
 f4e:	a6 17       	cp	r26, r22
 f50:	b7 07       	cpc	r27, r23
 f52:	10 f0       	brcs	.+4      	; 0xf58 <__udivmodhi4_ep>
 f54:	a6 1b       	sub	r26, r22
 f56:	b7 0b       	sbc	r27, r23

00000f58 <__udivmodhi4_ep>:
 f58:	88 1f       	adc	r24, r24
 f5a:	99 1f       	adc	r25, r25
 f5c:	5a 95       	dec	r21
 f5e:	a9 f7       	brne	.-22     	; 0xf4a <__udivmodhi4_loop>
 f60:	80 95       	com	r24
 f62:	90 95       	com	r25
 f64:	bc 01       	movw	r22, r24
 f66:	cd 01       	movw	r24, r26
 f68:	08 95       	ret

00000f6a <__itoa_ncheck>:
 f6a:	bb 27       	eor	r27, r27
 f6c:	4a 30       	cpi	r20, 0x0A	; 10
 f6e:	31 f4       	brne	.+12     	; 0xf7c <__itoa_ncheck+0x12>
 f70:	99 23       	and	r25, r25
 f72:	22 f4       	brpl	.+8      	; 0xf7c <__itoa_ncheck+0x12>
 f74:	bd e2       	ldi	r27, 0x2D	; 45
 f76:	90 95       	com	r25
 f78:	81 95       	neg	r24
 f7a:	9f 4f       	sbci	r25, 0xFF	; 255
 f7c:	0c 94 c1 07 	jmp	0xf82	; 0xf82 <__utoa_common>

00000f80 <__utoa_ncheck>:
 f80:	bb 27       	eor	r27, r27

00000f82 <__utoa_common>:
 f82:	fb 01       	movw	r30, r22
 f84:	55 27       	eor	r21, r21
 f86:	aa 27       	eor	r26, r26
 f88:	88 0f       	add	r24, r24
 f8a:	99 1f       	adc	r25, r25
 f8c:	aa 1f       	adc	r26, r26
 f8e:	a4 17       	cp	r26, r20
 f90:	10 f0       	brcs	.+4      	; 0xf96 <__utoa_common+0x14>
 f92:	a4 1b       	sub	r26, r20
 f94:	83 95       	inc	r24
 f96:	50 51       	subi	r21, 0x10	; 16
 f98:	b9 f7       	brne	.-18     	; 0xf88 <__utoa_common+0x6>
 f9a:	a0 5d       	subi	r26, 0xD0	; 208
 f9c:	aa 33       	cpi	r26, 0x3A	; 58
 f9e:	08 f0       	brcs	.+2      	; 0xfa2 <__utoa_common+0x20>
 fa0:	a9 5d       	subi	r26, 0xD9	; 217
 fa2:	a1 93       	st	Z+, r26
 fa4:	00 97       	sbiw	r24, 0x00	; 0
 fa6:	79 f7       	brne	.-34     	; 0xf86 <__utoa_common+0x4>
 fa8:	b1 11       	cpse	r27, r1
 faa:	b1 93       	st	Z+, r27
 fac:	11 92       	st	Z+, r1
 fae:	cb 01       	movw	r24, r22
 fb0:	0c 94 da 07 	jmp	0xfb4	; 0xfb4 <strrev>

00000fb4 <strrev>:
 fb4:	dc 01       	movw	r26, r24
 fb6:	fc 01       	movw	r30, r24
 fb8:	67 2f       	mov	r22, r23
 fba:	71 91       	ld	r23, Z+
 fbc:	77 23       	and	r23, r23
 fbe:	e1 f7       	brne	.-8      	; 0xfb8 <strrev+0x4>
 fc0:	32 97       	sbiw	r30, 0x02	; 2
 fc2:	04 c0       	rjmp	.+8      	; 0xfcc <strrev+0x18>
 fc4:	7c 91       	ld	r23, X
 fc6:	6d 93       	st	X+, r22
 fc8:	70 83       	st	Z, r23
 fca:	62 91       	ld	r22, -Z
 fcc:	ae 17       	cp	r26, r30
 fce:	bf 07       	cpc	r27, r31
 fd0:	c8 f3       	brcs	.-14     	; 0xfc4 <strrev+0x10>
 fd2:	08 95       	ret

00000fd4 <_exit>:
 fd4:	f8 94       	cli

00000fd6 <__stop_program>:
 fd6:	ff cf       	rjmp	.-2      	; 0xfd6 <__stop_program>
